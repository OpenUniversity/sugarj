package metamodel;

import org.sugarj.languages.Model;

import metamodel.Types;
import metamodel.util.Lexical;
import metamodel.util.MetaExplode;

/**
 * copied from https://svn.strategoxt.org/repos/WebDSL/webdsls/trunk/src/org/webdsl/dsl/syntax/WebDSL-DataModel.sdf
 **/
public sugar Entity {
  desugarings
    entity-model

  rules
    entity-model :
      EntityDec(mods, name, body) -> 
      ModelDec(ModelDecHead(mods, name), <meta-explode> body) 

  context-free syntax
    Entity -> ToplevelDeclaration
    AnnoOrSugarMod* "entity" JavaId "{" EntityBodyDeclaration* "}" -> Entity {cons("EntityDec")}
    Property -> EntityBodyDeclaration

  context-free syntax
    Id PropKind Sort "(" {Annotation ","}* ")" -> Property {cons("Property")}
    Id PropKind Sort                           -> Property {cons("PropertyNoAnno")}

    Id PropKind Sort "(" {Annotation ","}* ")" ":=" Exp -> Property {cons("DerivedProperty")}
    Id PropKind Sort ":=" Exp                           -> Property {cons("DerivedPropertyNoAnno")}


    "::" -> PropKind {cons("Simple")}
    "->" -> PropKind {cons("Ref")}
    "<>" -> PropKind {cons("Comp")}


  context-free syntax
    Id                           -> Annotation {cons("SimpleAnno")}
    "inverse" "=" Id "." Id      -> Annotation {cons("InverseAnno")}
    %%fallback for code completion:
    "inverse" "=" Id             -> Annotation {cons("IncompleteInverseAnno")}
    "inverseSlave" "=" Id "." Id -> Annotation {cons("InverseSlaveAnno")}
    "inline" "(" {Id ","}* ")"   -> Annotation {cons("InlineAnno")}
    "select" "=" Id              -> Annotation {cons("SelectAnno")}
    "not null"                   -> Annotation {cons("NotNullAnno")}
    "not empty"                  -> Annotation {cons("NotEmptyAnno")}
    "allowed" "=" Exp            -> Annotation {cons("AllowedAnno")}
    "default" "=" Exp            -> Annotation {cons("DefaultAnno")}
    "length" "=" Int             -> Annotation {cons("LengthAnno")}
    "format" "=" String          -> Annotation {cons("FormatAnno")}
    "index" "(" ")"              -> Annotation {cons("IndexAnno")}
    "index" "(" Int ")"          -> Annotation {cons("IndexAnno")}
    "collation" "(" Id ")"       -> Annotation {cons("CollationAnno")}
    "iderror" "=" String         -> Annotation {cons("IdErrorAnno")}
    "idemptyerror" "=" String    -> Annotation {cons("IdEmptyErrorAnno")}
    
}