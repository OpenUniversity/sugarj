module org/sugarj/languages/Java

imports
  org/sugarj/transformations/typesmart/Runtime
  org/sugarj/languages/Stratego


signature
  constructors
    Assign                  : LHS * Expr -> Expr
    AssignMul               : LHS * Expr -> Expr
    AssignDiv               : LHS * Expr -> Expr
    AssignRemain            : LHS * Expr -> Expr
    AssignPlus              : LHS * Expr -> Expr
    AssignMinus             : LHS * Expr -> Expr
    AssignLeftShift         : LHS * Expr -> Expr
    AssignRightShift        : LHS * Expr -> Expr
    AssignURightShift       : LHS * Expr -> Expr
    AssignAnd               : LHS * Expr -> Expr
    AssignExcOr             : LHS * Expr -> Expr
    AssignOr                : LHS * Expr -> Expr
    InstanceOf              : Expr * RefType -> Expr
    Mul                     : Expr * Expr -> Expr
    Div                     : Expr * Expr -> Expr
    Remain                  : Expr * Expr -> Expr
    Plus                    : Expr * Expr -> Expr
    Minus                   : Expr * Expr -> Expr
    LeftShift               : Expr * Expr -> Expr
    RightShift              : Expr * Expr -> Expr
    URightShift             : Expr * Expr -> Expr
    Lt                      : Expr * Expr -> Expr
    Gt                      : Expr * Expr -> Expr
    LtEq                    : Expr * Expr -> Expr
    GtEq                    : Expr * Expr -> Expr
    Eq                      : Expr * Expr -> Expr
    NotEq                   : Expr * Expr -> Expr
    LazyAnd                 : Expr * Expr -> Expr
    LazyOr                  : Expr * Expr -> Expr
    And                     : Expr * Expr -> Expr
    ExcOr                   : Expr * Expr -> Expr
    Or                      : Expr * Expr -> Expr
    Cond                    : Expr * CondMid * Expr -> Expr
    Plus                    : Expr -> Expr
    Minus                   : Expr -> Expr
    PreIncr                 : Expr -> Expr
    PreDecr                 : Expr -> Expr
    Complement              : Expr -> Expr
    Not                     : Expr -> Expr
    CastPrim                : PrimType * Expr -> Expr
    CastRef                 : RefType * Expr -> Expr
    PostIncr                : Expr -> Expr
    PostDecr                : Expr -> Expr
    Invoke                  : MethodSpec * List(Expr) -> Expr
    Method                  : MethodName -> MethodSpec
    Method                  : Expr * Option(TypeArgs) * Id -> MethodSpec
    SuperMethod             : Option(TypeArgs) * Id -> MethodSpec
    QSuperMethod            : TypeName * Option(TypeArgs) * Id -> MethodSpec
    GenericMethod           : AmbName * TypeArgs * Id -> MethodSpec
    ArrayAccess             : Expr * ArraySubscript -> ArrayAccess
    Field                   : Expr * Id -> FieldAccess
    SuperField              : Id -> FieldAccess
    QSuperField             : TypeName * Id -> FieldAccess
    NewArray                : ArrayBaseType * List(DimExpr) * List(Dim) -> ArrayCreationExpr
    NewArray                : ArrayBaseType * List(Dim) * ArrayInit -> ArrayCreationExpr
    UnboundWld              : TypeName -> ArrayBaseType
    Dim                     : Expr -> DimExpr
    Dim                     : Dim
    NewInstance             : Option(TypeArgs) * ClassOrInterfaceType * List(Expr) * Option(ClassBody) -> Expr
    QNewInstance            : Expr * Option(TypeArgs) * Id * Option(TypeArgs) * List(Expr) * Option(ClassBody) -> Expr
    Lit                     : Literal -> Expr
    Class                   : Type -> ClassLiteral
    VoidClass               : ClassLiteral
    This                    : Expr
    QThis                   : TypeName -> Expr
    PackageDec              : List(Anno) * PackageName -> PackageDec
    TypeImportDec           : TypeName -> ImportDec
    TypeImportOnDemandDec   : PackageName -> ImportDec
    StaticImportDec         : TypeName * Id -> ImportDec
    StaticImportOnDemandDec : TypeName -> ImportDec
    AnnoDec                 : AnnoDecHead * List(AnnoElemDec) -> AnnoDec
    AnnoDecHead             : List(Alt(Anno, InterfaceMod)) * Id -> AnnoDecHead
    AnnoMethodDec           : List(AbstractMethodMod) * Type * Id * Option(DefaultVal) -> AnnoElemDec
    Semicolon               : AnnoElemDec
    DefaultVal              : ElemVal -> DefaultVal
    AbstractMethodDec       : List(Alt(Anno, AbstractMethodMod)) * Option(TypeParams) * ResultType * Id * List(FormalParam) * Option(Throws) -> AbstractMethodDec
    DeprAbstractMethodDec   : List(Alt(Anno, AbstractMethodMod)) * Option(TypeParams) * ResultType * Id * List(FormalParam) * List(Dim) * Option(Throws) -> AbstractMethodDec
    ConstantDec             : List(Alt(Anno, ConstantMod)) * Type * List(VarDec) -> ConstantDec
    InterfaceDec            : InterfaceDecHead * List(InterfaceMemberDec) -> InterfaceDec
    InterfaceDecHead        : List(Alt(Anno, InterfaceMod)) * Id * Option(TypeParams) * Option(ExtendsInterfaces) -> InterfaceDecHead
    ExtendsInterfaces       : List(InterfaceType) -> ExtendsInterfaces
    Semicolon               : InterfaceMemberDec
    EnumDec                 : EnumDecHead * EnumBody -> EnumDec
    EnumDecHead             : List(Alt(Anno, ClassMod)) * Id * Option(Interfaces) -> EnumDecHead
    EnumBody                : List(EnumConst) * Option(EnumBodyDecs) -> EnumBody
    EnumBody                : List(EnumConst) * Option(EnumBodyDecs) -> EnumBody
    EnumConst               : Id * Option(EnumConstArgs) * Option(ClassBody) -> EnumConst
    EnumBodyDecs            : List(ClassBodyDec) -> EnumBodyDecs
    ConstrDec               : ConstrHead * ConstrBody -> ConstrDec
    ConstrDecHead           : List(Alt(Anno, ConstrMod)) * Option(TypeParams) * Id * List(FormalParam) * Option(Throws) -> ConstrHead
    ConstrBody              : Option(ConstrInv) * List(BlockStm) -> ConstrBody
    AltConstrInv            : Option(TypeArgs) * List(Expr) -> ConstrInv
    SuperConstrInv          : Option(TypeArgs) * List(Expr) -> ConstrInv
    QSuperConstrInv         : Expr * Option(TypeArgs) * List(Expr) -> ConstrInv
    StaticInit              : Block -> StaticInit
    InstanceInit            : Block -> InstanceInit
    Empty                   : Stm
    Labeled                 : Id * Stm -> Stm
    ExprStm                 : Expr -> Stm
    If                      : Expr * Stm -> Stm
    If                      : Expr * Stm * Stm -> Stm
    AssertStm               : Expr -> Stm
    AssertStm               : Expr * Expr -> Stm
    Switch                  : Expr * SwitchBlock -> Stm
    SwitchBlock             : List(SwitchGroup) * List(SwitchLabel) -> SwitchBlock
    SwitchGroup             : List(SwitchLabel) * List(BlockStm) -> SwitchGroup
    Case                    : Expr -> SwitchLabel
    Default                 : SwitchLabel
    While                   : Expr * Stm -> Stm
    DoWhile                 : Stm * Expr -> Stm
    For                     : LocalVarDec * Option(Expr) * List(Expr) * Stm -> Stm
    For                     : List(Expr) * Option(Expr) * List(Expr) * Stm -> Stm
    ForEach                 : FormalParam * Expr * Stm -> Stm
    Break                   : Option(Id) -> Stm
    Continue                : Option(Id) -> Stm
    Return                  : Option(Expr) -> Stm
    Throw                   : Expr -> Stm
    Synchronized            : Expr * Block -> Stm
    Try                     : Block * List(CatchClause) -> Stm
    Try                     : Block * List(CatchClause) * Block -> Stm
    Catch                   : FormalParam * Block -> CatchClause
    LocalVarDecStm          : LocalVarDec -> LocalVarDecStm
    LocalVarDec             : List(Alt(Anno, VarMod)) * Type * List(VarDec) -> LocalVarDec
    Block                   : List(BlockStm) -> Block
    ClassDecStm             : ClassDec -> BlockStm
    MethodDec               : MethodDecHead * MethodBody -> MethodDec
    MethodDecHead           : List(Alt(Anno, MethodMod)) * Option(TypeParams) * ResultType * Id * List(FormalParam) * Option(Throws) -> MethodDecHead
    DeprMethodDecHead       : List(Alt(Anno, MethodMod)) * Option(TypeParams) * ResultType * Id * List(FormalParam) * List(Dim) * Option(Throws) -> MethodDecHead
    Void                    : ResultType
    Param                   : List(Alt(Anno, VarMod)) * Type * VarDecId -> FormalParam
    VarArityParam           : List(Alt(Anno, VarMod)) * Type * VarDecId -> FormalParam
    ThrowsDec               : List(ExceptionType) -> Throws
    NoMethodBody            : MethodBody
    ArrayInit               : List(VarInit) -> ArrayInit
    ArrayInit               : List(VarInit) -> ArrayInit
    Anno                    : TypeName * List(ElemValPair) -> Anno
    SingleElemAnno          : TypeName * ElemVal -> Anno
    MarkerAnno              : TypeName -> Anno
    ElemValPair             : Id * ElemVal -> ElemValPair
    ElemValArrayInit        : List(ElemVal) -> ElemVal
    ElemValArrayInit        : List(ElemVal) -> ElemVal
    FieldDec                : List(Alt(Anno, FieldMod)) * Type * List(VarDec) -> FieldDec
    VarDec                  : VarDecId -> VarDec
    VarDec                  : VarDecId * VarInit -> VarDec
    ArrayVarDecId           : Id * List(Dim) -> VarDecId
    Dim                     : Dim
    ClassDec                : ClassDecHead * ClassBody -> ClassDec
    ClassBody               : List(ClassBodyDec) -> ClassBody
    ClassDecHead            : List(Alt(Anno, ClassMod)) * Id * Option(TypeParams) * Option(Super) * Option(Interfaces) -> ClassDecHead
    SuperDec                : ClassType -> Super
    ImplementsDec           : List(InterfaceType) -> Interfaces
    Semicolon               : ClassMemberDec
    Semicolon               : TypeDec
    CompilationUnit         : Option(PackageDec) * List(ImportDec) * List(TypeDec) -> CompilationUnit
    PackageName             : List(Id) -> PackageName
    AmbName                 : Id -> AmbName
    AmbName                 : AmbName * Id -> AmbName
    TypeName                : Id -> TypeName
    TypeName                : PackageOrTypeName * Id -> TypeName
    ExprName                : Id -> ExprName
    ExprName                : AmbName * Id -> ExprName
    MethodName              : Id -> MethodName
    MethodName              : AmbName * Id -> MethodName
    PackageOrTypeName       : Id -> PackageOrTypeName
    PackageOrTypeName       : PackageOrTypeName * Id -> PackageOrTypeName
    TypeArgs                : List(ActualTypeArg) -> TypeArgs
    Wildcard                : Option(WildcardBound) -> ActualTypeArg
    WildcardUpperBound      : RefType -> WildcardBound
    WildcardLowerBound      : RefType -> WildcardBound
    TypeParam               : TypeVarId * Option(TypeBound) -> TypeParam
    TypeBound               : List(ClassOrInterfaceType) -> TypeBound
    TypeParams              : List(TypeParam) -> TypeParams
    ClassOrInterfaceType    : TypeDecSpec * Option(TypeArgs) -> ClassOrInterfaceType
    ClassType               : TypeDecSpec * Option(TypeArgs) -> ClassType
    InterfaceType           : TypeDecSpec * Option(TypeArgs) -> InterfaceType
    Member                  : TypeDecSpec * TypeArgs * Id -> TypeDecSpec
    TypeVar                 : TypeVarId -> TypeVar
    ArrayType               : Type -> ArrayType
    Boolean                 : PrimType
    Byte                    : IntType
    Short                   : IntType
    Int                     : IntType
    Long                    : IntType
    Char                    : IntType
    Float                   : FloatType
    Double                  : FloatType
    Null                    : NullLiteral
    String                  : List(StringPart) -> StringLiteral
    Chars                   : StringChars -> StringPart
    NamedEscape             : NamedEscape
    OctaEscape1             : LastOcta -> OctaEscape
    OctaEscape2             : LastOcta -> OctaEscape
    OctaEscape2             : OctaEscape
    OctaEscape3             : OctaEscape
    Char                    : CharContent -> CharLiteral
    Single                  : SingleChar -> CharContent
    Bool                    : Bool -> BoolLiteral
    True                    : Bool
    False                   : Bool
    Float                   : DeciFloatLiteral -> FloatLiteral
    Float                   : HexaFloatLiteral -> FloatLiteral
    Deci                    : DeciLiteral -> IntLiteral
    Hexa                    : HexaLiteral -> IntLiteral
    Octa                    : OctaLiteral -> IntLiteral
    Public                  : Public
    Private                 : Private
    Protected               : Protected
    Abstract                : Abstract
    Final                   : Final
    Static                  : Static
    Native                  : Native
    Transient               : Transient
    Volatile                : Volatile
    Synchronized            : Synchronized
    StrictFP                : StrictFP
    Id                      : ID -> Id
    UnicodeEscape           : UnicodeEscape


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaFloatLiteral"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciFloatLiteral"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciFloatNumeral"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciFloatDigits"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciFloatExponentPart"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SignedInteger"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaFloatNumeral"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaSignificand"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BinaryExponent"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciLiteral"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaLiteral"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaLiteral"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciNumeral"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaNumeral"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaNumeral"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Keyword"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ID"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EOLCommentChars"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Comment"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CommentPart"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BlockCommentChars"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Asterisk"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EscEscChar"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EscChar"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["UnicodeEscape"]
    )


rules


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LineTerminator"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CarriageReturn"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EndOfFile"]
    )


rules

  smart-Assign(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Assign") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Assign") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Assign")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignMul(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignMul") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignMul") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "AssignMul")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignDiv(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignDiv") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignDiv") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "AssignDiv")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignRemain(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignRemain") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignRemain") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "AssignRemain")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignPlus(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignPlus") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignPlus") ; fail)> ( arg2
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "AssignPlus")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignMinus(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignMinus") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignMinus") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "AssignMinus")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignLeftShift(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignLeftShift") ; fail)> ( arg1
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignLeftShift") ; fail)> ( arg2
                                                                                  , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "AssignLeftShift")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignRightShift(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignRightShift") ; fail)> ( arg1
                                                                                 , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                                 ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignRightShift") ; fail)> ( arg2
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "AssignRightShift")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignURightShift(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignURightShift") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                                  ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignURightShift") ; fail)> ( arg2
                                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "AssignURightShift")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignAnd(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignAnd") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignAnd") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "AssignAnd")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignExcOr(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignExcOr") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignExcOr") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "AssignExcOr")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-AssignOr(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssignOr") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssignOr") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "AssignOr")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExprName"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldAccess"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayAccess"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]
    )

  smart-InstanceOf(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"InstanceOf") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"InstanceOf") ; fail)> ( arg2
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RefType"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "InstanceOf")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Mul(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Mul") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Mul") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Mul")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Div(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Div") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Div") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Div")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Remain(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Remain") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Remain") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Remain")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Plus(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Plus") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Plus") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "Plus")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Minus(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Minus") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Minus") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "Minus")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-LeftShift(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"LeftShift") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"LeftShift") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "LeftShift")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-RightShift(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"RightShift") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"RightShift") ; fail)> ( arg2
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "RightShift")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-URightShift(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"URightShift") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"URightShift") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "URightShift")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Lt(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Lt") ; fail)> ( arg1
                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Lt") ; fail)> ( arg2
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Lt")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Gt(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Gt") ; fail)> ( arg1
                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Gt") ; fail)> ( arg2
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Gt")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-LtEq(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"LtEq") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"LtEq") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "LtEq")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-GtEq(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"GtEq") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"GtEq") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "GtEq")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Eq(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Eq") ; fail)> ( arg1
                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Eq") ; fail)> ( arg2
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Eq")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-NotEq(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"NotEq") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"NotEq") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "NotEq")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-LazyAnd(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"LazyAnd") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"LazyAnd") ; fail)> ( arg2
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "LazyAnd")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-LazyOr(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"LazyOr") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"LazyOr") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "LazyOr")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-And(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"And") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"And") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "And")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-ExcOr(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ExcOr") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ExcOr") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "ExcOr")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Or(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Or") ; fail)> ( arg1
                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Or") ; fail)> ( arg2
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Or")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Cond(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Cond") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Cond") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CondMid"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Cond") ; fail)> ( arg3
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "Cond")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CondMid"]
    )

  smart-Plus(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Plus") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Plus")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Minus(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Minus") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Minus")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-PreIncr(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"PreIncr") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "PreIncr")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-PreDecr(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"PreDecr") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "PreDecr")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Complement(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Complement") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "Complement")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Not(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Not") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "Not")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-CastPrim(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CastPrim") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PrimType"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CastPrim") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "CastPrim")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-CastRef(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CastRef") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RefType"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CastRef") ; fail)> ( arg2
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "CastRef")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExprName"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
    )

  smart-PostIncr(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"PostIncr") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "PostIncr")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-PostDecr(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"PostDecr") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "PostDecr")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Invoke(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Invoke") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodSpec"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Invoke") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                         ]]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Invoke")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Method(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Method") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodName"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "Method")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodSpec"]
      )
    ; id

  smart-Method(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Method") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Method") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                           ]]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Method") ; fail)> ( arg3
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Method")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodSpec"]
      )
    ; id

  smart-SuperMethod(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SuperMethod") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                              ]]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"SuperMethod") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "SuperMethod")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodSpec"]
      )
    ; id

  smart-QSuperMethod(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"QSuperMethod") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QSuperMethod") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                                 ]]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QSuperMethod") ; fail)> ( arg3
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "QSuperMethod")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodSpec"]
      )
    ; id

  smart-GenericMethod(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"GenericMethod") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AmbName"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"GenericMethod") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"GenericMethod") ; fail)> ( arg3
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "GenericMethod")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodSpec"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExprName"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayAccess"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
    )

  smart-ArrayAccess(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ArrayAccess") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ArrayAccess") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArraySubscript"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "ArrayAccess")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayAccess"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArraySubscript"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldAccess"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
    )

  smart-Field(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Field") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Field") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "Field")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldAccess"]
      )
    ; id

  smart-SuperField(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SuperField") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "SuperField")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldAccess"]
      )
    ; id

  smart-QSuperField(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"QSuperField") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QSuperField") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "QSuperField")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldAccess"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayCreationExpr"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
    )

  smart-NewArray(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"NewArray") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayBaseType"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"NewArray") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DimExpr"]]
                                                                                                                           ]]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"NewArray") ; fail)> ( arg3
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Dim"]]
                                                                                                                           ]]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "NewArray")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayCreationExpr"]
      )
    ; id

  smart-NewArray(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"NewArray") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayBaseType"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"NewArray") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Dim"]]
                                                                                                                           ]]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"NewArray") ; fail)> ( arg3
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayInit"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "NewArray")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayCreationExpr"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PrimType"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayBaseType"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayBaseType"]
    )

  smart-UnboundWld(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"UnboundWld") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "UnboundWld")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayBaseType"]
      )
    ; id

  smart-Dim(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Dim") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "Dim")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DimExpr"]
      )
    ; id

  smart-Dim(|) =
    <prim("SUGARJ_unsafe_build", "Dim")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Dim"]
      )
    ; id

  smart-NewInstance(|arg1, arg2, arg3, arg4) =
    where(<(has-sort <+ log-mismatching-sort-error(|"NewInstance") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                              ]]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"NewInstance") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassOrInterfaceType"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"NewInstance") ; fail)> ( arg3
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                              ]]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"NewInstance") ; fail)> ( arg4
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBody"]]
                                                                                                                                ]]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "NewInstance")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-QNewInstance(|arg1, arg2, arg3, arg4, arg5, arg6) =
    where(<(has-sort <+ log-mismatching-sort-error(|"QNewInstance") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QNewInstance") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                                 ]]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QNewInstance") ; fail)> ( arg3
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QNewInstance") ; fail)> ( arg4
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                                 ]]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QNewInstance") ; fail)> ( arg5
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                               ]]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QNewInstance") ; fail)> ( arg6
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBody"]]
                                                                                                                                 ]]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "QNewInstance")> [arg1, arg2, arg3, arg4, arg5, arg6]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-Lit(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Lit") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Literal"]
                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "Lit")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntLiteral"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Literal"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FloatLiteral"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Literal"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BoolLiteral"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Literal"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharLiteral"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Literal"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringLiteral"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Literal"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NullLiteral"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Literal"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassLiteral"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Literal"]
    )

  smart-Class(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Class") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Class")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassLiteral"]
      )
    ; id

  smart-VoidClass(|) =
    <prim("SUGARJ_unsafe_build", "VoidClass")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassLiteral"]
      )
    ; id

  smart-This(|) =
    <prim("SUGARJ_unsafe_build", "This")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-QThis(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"QThis") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "QThis")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
      )
    ; id

  smart-PackageDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"PackageDec") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]]
                                                                                                                           ]]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"PackageDec") ; fail)> ( arg2
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageName"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "PackageDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageDec"]
      )
    ; id

  smart-TypeImportDec(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeImportDec") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "TypeImportDec")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImportDec"]
      )
    ; id

  smart-TypeImportOnDemandDec(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeImportOnDemandDec") ; fail)> ( arg1
                                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageName"]
                                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "TypeImportOnDemandDec")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImportDec"]
      )
    ; id

  smart-StaticImportDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"StaticImportDec") ; fail)> ( arg1
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"StaticImportDec") ; fail)> ( arg2
                                                                                  , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "StaticImportDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImportDec"]
      )
    ; id

  smart-StaticImportOnDemandDec(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"StaticImportOnDemandDec") ; fail)> ( arg1
                                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "StaticImportOnDemandDec")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImportDec"]
      )
    ; id

  smart-AnnoDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AnnoDec") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoDecHead"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AnnoDec") ; fail)> ( arg2
                                                                          , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]]
                                                                                                                          ]]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "AnnoDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoDec"]
      )
    ; id

  smart-AnnoDecHead(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AnnoDecHead") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMod"]]]
                                                                                                                                                                             ]]
                                                                                                                              ]
                                                                                                                            ]]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AnnoDecHead") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "AnnoDecHead")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoDecHead"]
      )
    ; id

  smart-AnnoMethodDec(|arg1, arg2, arg3, arg4) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AnnoMethodDec") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodMod"]]
                                                                                                                              ]]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AnnoMethodDec") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AnnoMethodDec") ; fail)> ( arg3
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AnnoMethodDec") ; fail)> ( arg4
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DefaultVal"]]
                                                                                                                                  ]]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "AnnoMethodDec")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstantDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]
    )

  smart-Semicolon(|) =
    <prim("SUGARJ_unsafe_build", "Semicolon")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMemberDec"]]]
                                                     ]]
      )
    ; id

  smart-Semicolon(|) =
    <prim("SUGARJ_unsafe_build", "Semicolon")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMemberDec"]]]
                                                     ]]
      )
    ; id

  smart-Semicolon(|) =
    <prim("SUGARJ_unsafe_build", "Semicolon")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDec"]]]
                                                     ]]
      )
    ; id

  smart-DefaultVal(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"DefaultVal") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemVal"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "DefaultVal")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DefaultVal"]
      )
    ; id

  smart-AbstractMethodDec(|arg1, arg2, arg3, arg4, arg5, arg6) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AbstractMethodDec") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodMod"]]]
                                                                                                                                                                                   ]]
                                                                                                                                    ]
                                                                                                                                  ]]
                                                                                  ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AbstractMethodDec") ; fail)> ( arg2
                                                                                    , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParams"]]
                                                                                                                                      ]]
                                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AbstractMethodDec") ; fail)> ( arg3
                                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ResultType"]
                                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AbstractMethodDec") ; fail)> ( arg4
                                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AbstractMethodDec") ; fail)> ( arg5
                                                                                    , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]]
                                                                                                                                    ]]
                                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AbstractMethodDec") ; fail)> ( arg6
                                                                                    , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Throws"]]
                                                                                                                                      ]]
                                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "AbstractMethodDec")> [arg1, arg2, arg3, arg4, arg5, arg6]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodDec"]
      )
    ; id

  smart-DeprAbstractMethodDec(|arg1, arg2, arg3, arg4, arg5, arg6, arg7) =
    where(<(has-sort <+ log-mismatching-sort-error(|"DeprAbstractMethodDec") ; fail)> ( arg1
                                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodMod"]]]
                                                                                                                                                                                       ]]
                                                                                                                                        ]
                                                                                                                                      ]]
                                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprAbstractMethodDec") ; fail)> ( arg2
                                                                                        , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParams"]]
                                                                                                                                          ]]
                                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprAbstractMethodDec") ; fail)> ( arg3
                                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ResultType"]
                                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprAbstractMethodDec") ; fail)> ( arg4
                                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprAbstractMethodDec") ; fail)> ( arg5
                                                                                        , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]]
                                                                                                                                        ]]
                                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprAbstractMethodDec") ; fail)> ( arg6
                                                                                        , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Dim"]]
                                                                                                                                        ]]
                                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprAbstractMethodDec") ; fail)> ( arg7
                                                                                        , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Throws"]]
                                                                                                                                          ]]
                                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "DeprAbstractMethodDec")> [arg1, arg2, arg3, arg4, arg5, arg6, arg7]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodDec"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Abstract"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodMod"]
    )

  smart-ConstantDec(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ConstantDec") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstantMod"]]]
                                                                                                                                                                             ]]
                                                                                                                              ]
                                                                                                                            ]]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ConstantDec") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ConstantDec") ; fail)> ( arg3
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDec"]]
                                                                                                                              ]]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "ConstantDec")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstantDec"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstantMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Static"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstantMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Final"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstantMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDec"]
    )

  smart-InterfaceDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"InterfaceDec") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDecHead"]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"InterfaceDec") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMemberDec"]]
                                                                                                                               ]]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "InterfaceDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDec"]
      )
    ; id

  smart-InterfaceDecHead(|arg1, arg2, arg3, arg4) =
    where(<(has-sort <+ log-mismatching-sort-error(|"InterfaceDecHead") ; fail)> ( arg1
                                                                                 , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMod"]]]
                                                                                                                                                                                  ]]
                                                                                                                                   ]
                                                                                                                                 ]]
                                                                                 ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"InterfaceDecHead") ; fail)> ( arg2
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"InterfaceDecHead") ; fail)> ( arg3
                                                                                   , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParams"]]
                                                                                                                                     ]]
                                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"InterfaceDecHead") ; fail)> ( arg4
                                                                                   , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExtendsInterfaces"]]
                                                                                                                                     ]]
                                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "InterfaceDecHead")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDecHead"]
      )
    ; id

  smart-ExtendsInterfaces(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ExtendsInterfaces") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceType"]]
                                                                                                                                  ]]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "ExtendsInterfaces")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExtendsInterfaces"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstantDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMemberDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMemberDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMemberDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMemberDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Protected"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Private"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Abstract"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Static"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrictFP"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMod"]
    )

  smart-EnumDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"EnumDec") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumDecHead"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"EnumDec") ; fail)> ( arg2
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumBody"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "EnumDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumDec"]
      )
    ; id

  smart-EnumDecHead(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"EnumDecHead") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]]]
                                                                                                                                                                             ]]
                                                                                                                              ]
                                                                                                                            ]]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"EnumDecHead") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"EnumDecHead") ; fail)> ( arg3
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Interfaces"]]
                                                                                                                                ]]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "EnumDecHead")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumDecHead"]
      )
    ; id

  smart-EnumBody(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"EnumBody") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumConst"]]
                                                                                                                         ]]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"EnumBody") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumBodyDecs"]]
                                                                                                                             ]]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "EnumBody")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumBody"]
      )
    ; id

  smart-EnumConst(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"EnumConst") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"EnumConst") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumConstArgs"]]
                                                                                                                              ]]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"EnumConst") ; fail)> ( arg3
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBody"]]
                                                                                                                              ]]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "EnumConst")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumConst"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumConstArgs"]
    )

  smart-EnumBodyDecs(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"EnumBodyDecs") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBodyDec"]]
                                                                                                                             ]]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "EnumBodyDecs")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumBodyDecs"]
      )
    ; id

  smart-ConstrDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ConstrDec") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrHead"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ConstrDec") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrBody"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "ConstrDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrDec"]
      )
    ; id

  smart-ConstrDecHead(|arg1, arg2, arg3, arg4, arg5) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ConstrDecHead") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrMod"]]]
                                                                                                                                                                               ]]
                                                                                                                                ]
                                                                                                                              ]]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ConstrDecHead") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParams"]]
                                                                                                                                  ]]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ConstrDecHead") ; fail)> ( arg3
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ConstrDecHead") ; fail)> ( arg4
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]]
                                                                                                                                ]]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ConstrDecHead") ; fail)> ( arg5
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Throws"]]
                                                                                                                                  ]]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "ConstrDecHead")> [arg1, arg2, arg3, arg4, arg5]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrHead"]
      )
    ; id

  smart-ConstrBody(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ConstrBody") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrInv"]]
                                                                                                                             ]]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ConstrBody") ; fail)> ( arg2
                                                                             , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BlockStm"]]
                                                                                                                             ]]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "ConstrBody")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrBody"]
      )
    ; id

  smart-AltConstrInv(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AltConstrInv") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                               ]]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AltConstrInv") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                               ]]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "AltConstrInv")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrInv"]
      )
    ; id

  smart-SuperConstrInv(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SuperConstrInv") ; fail)> ( arg1
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                                 ]]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"SuperConstrInv") ; fail)> ( arg2
                                                                                 , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                                 ]]
                                                                                 ))
    ; <prim("SUGARJ_unsafe_build", "SuperConstrInv")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrInv"]
      )
    ; id

  smart-QSuperConstrInv(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"QSuperConstrInv") ; fail)> ( arg1
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QSuperConstrInv") ; fail)> ( arg2
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                                    ]]
                                                                                  ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"QSuperConstrInv") ; fail)> ( arg3
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                                  ]]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "QSuperConstrInv")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrInv"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Protected"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Private"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrMod"]
    )

  smart-StaticInit(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"StaticInit") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "StaticInit")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StaticInit"]
      )
    ; id

  smart-InstanceInit(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"InstanceInit") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "InstanceInit")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InstanceInit"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
    )

  smart-Empty(|) =
    <prim("SUGARJ_unsafe_build", "Empty")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Labeled(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Labeled") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Labeled") ; fail)> ( arg2
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "Labeled")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-ExprStm(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ExprStm") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "ExprStm")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-If(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"If") ; fail)> ( arg1
                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"If") ; fail)> ( arg2
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "If")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-If(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"If") ; fail)> ( arg1
                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"If") ; fail)> ( arg2
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"If") ; fail)> ( arg3
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "If")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-AssertStm(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssertStm") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "AssertStm")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-AssertStm(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AssertStm") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AssertStm") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "AssertStm")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Switch(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Switch") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Switch") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchBlock"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Switch")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-SwitchBlock(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SwitchBlock") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchGroup"]]
                                                                                                                            ]]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"SwitchBlock") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchLabel"]]
                                                                                                                              ]]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "SwitchBlock")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchBlock"]
      )
    ; id

  smart-SwitchGroup(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SwitchGroup") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchLabel"]]
                                                                                                                            ]]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"SwitchGroup") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BlockStm"]]
                                                                                                                              ]]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "SwitchGroup")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchGroup"]
      )
    ; id

  smart-Case(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Case") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Case")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchLabel"]
      )
    ; id

  smart-Default(|) =
    <prim("SUGARJ_unsafe_build", "Default")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchLabel"]
      )
    ; id

  smart-While(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"While") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"While") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "While")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-DoWhile(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"DoWhile") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DoWhile") ; fail)> ( arg2
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "DoWhile")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-For(|arg1, arg2, arg3, arg4) =
    where(<(has-sort <+ log-mismatching-sort-error(|"For") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LocalVarDec"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"For") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                        ]]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"For") ; fail)> ( arg3
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                      ]]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"For") ; fail)> ( arg4
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "For")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-For(|arg1, arg2, arg3, arg4) =
    where(<(has-sort <+ log-mismatching-sort-error(|"For") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                    ]]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"For") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                        ]]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"For") ; fail)> ( arg3
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                      ]]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"For") ; fail)> ( arg4
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "For")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-ForEach(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ForEach") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ForEach") ; fail)> ( arg2
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ForEach") ; fail)> ( arg3
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "ForEach")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Break(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Break") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]]
                                                                                                                        ]]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Break")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Continue(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Continue") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]]
                                                                                                                           ]]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Continue")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Return(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Return") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]]
                                                                                                                         ]]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "Return")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Throw(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Throw") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Throw")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Synchronized(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Synchronized") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Synchronized") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "Synchronized")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Try(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Try") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Try") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CatchClause"]]
                                                                                                                      ]]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Try")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Try(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Try") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Try") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CatchClause"]]
                                                                                                                      ]]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Try") ; fail)> ( arg3
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Try")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
      )
    ; id

  smart-Catch(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Catch") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Catch") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "Catch")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CatchClause"]
      )
    ; id

  smart-LocalVarDecStm(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"LocalVarDecStm") ; fail)> ( arg1
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LocalVarDec"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "LocalVarDecStm")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LocalVarDecStm"]
      )
    ; id

  smart-LocalVarDec(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"LocalVarDec") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarMod"]]]
                                                                                                                                                                             ]]
                                                                                                                              ]
                                                                                                                            ]]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"LocalVarDec") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"LocalVarDec") ; fail)> ( arg3
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDec"]]
                                                                                                                              ]]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "LocalVarDec")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LocalVarDec"]
      )
    ; id

  smart-Block(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Block") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BlockStm"]]
                                                                                                                      ]]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Block")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LocalVarDecStm"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BlockStm"]
    )

  smart-ClassDecStm(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ClassDecStm") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDec"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "ClassDecStm")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BlockStm"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BlockStm"]
    )

  smart-MethodDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"MethodDec") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodDecHead"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"MethodDec") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodBody"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "MethodDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodDec"]
      )
    ; id

  smart-MethodDecHead(|arg1, arg2, arg3, arg4, arg5, arg6) =
    where(<(has-sort <+ log-mismatching-sort-error(|"MethodDecHead") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]]]
                                                                                                                                                                               ]]
                                                                                                                                ]
                                                                                                                              ]]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"MethodDecHead") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParams"]]
                                                                                                                                  ]]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"MethodDecHead") ; fail)> ( arg3
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ResultType"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"MethodDecHead") ; fail)> ( arg4
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"MethodDecHead") ; fail)> ( arg5
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]]
                                                                                                                                ]]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"MethodDecHead") ; fail)> ( arg6
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Throws"]]
                                                                                                                                  ]]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "MethodDecHead")> [arg1, arg2, arg3, arg4, arg5, arg6]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodDecHead"]
      )
    ; id

  smart-DeprMethodDecHead(|arg1, arg2, arg3, arg4, arg5, arg6, arg7) =
    where(<(has-sort <+ log-mismatching-sort-error(|"DeprMethodDecHead") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]]]
                                                                                                                                                                                   ]]
                                                                                                                                    ]
                                                                                                                                  ]]
                                                                                  ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprMethodDecHead") ; fail)> ( arg2
                                                                                    , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParams"]]
                                                                                                                                      ]]
                                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprMethodDecHead") ; fail)> ( arg3
                                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ResultType"]
                                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprMethodDecHead") ; fail)> ( arg4
                                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprMethodDecHead") ; fail)> ( arg5
                                                                                    , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]]
                                                                                                                                    ]]
                                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprMethodDecHead") ; fail)> ( arg6
                                                                                    , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Dim"]]
                                                                                                                                    ]]
                                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"DeprMethodDecHead") ; fail)> ( arg7
                                                                                    , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Throws"]]
                                                                                                                                      ]]
                                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "DeprMethodDecHead")> [arg1, arg2, arg3, arg4, arg5, arg6, arg7]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodDecHead"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ResultType"]
    )

  smart-Void(|) =
    <prim("SUGARJ_unsafe_build", "Void")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ResultType"]
      )
    ; id

  smart-Param(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Param") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarMod"]]]
                                                                                                                                                                       ]]
                                                                                                                        ]
                                                                                                                      ]]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Param") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Param") ; fail)> ( arg3
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDecId"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "Param")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]
      )
    ; id

  smart-VarArityParam(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"VarArityParam") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarMod"]]]
                                                                                                                                                                               ]]
                                                                                                                                ]
                                                                                                                              ]]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"VarArityParam") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"VarArityParam") ; fail)> ( arg3
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDecId"]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "VarArityParam")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Final"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Protected"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Private"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Abstract"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Static"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Final"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Synchronized"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Native"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrictFP"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]
    )

  smart-ThrowsDec(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ThrowsDec") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExceptionType"]]
                                                                                                                          ]]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "ThrowsDec")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Throws"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassType"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExceptionType"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodBody"]
    )

  smart-NoMethodBody(|) =
    <prim("SUGARJ_unsafe_build", "NoMethodBody")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodBody"]
      )
    ; id

  smart-ArrayInit(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ArrayInit") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarInit"]]
                                                                                                                          ]]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "ArrayInit")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayInit"]
      )
    ; id

  smart-Anno(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Anno") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Anno") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemValPair"]]
                                                                                                                       ]]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "Anno")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]
      )
    ; id

  smart-SingleElemAnno(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SingleElemAnno") ; fail)> ( arg1
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"SingleElemAnno") ; fail)> ( arg2
                                                                                 , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemVal"]
                                                                                 ))
    ; <prim("SUGARJ_unsafe_build", "SingleElemAnno")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]
      )
    ; id

  smart-MarkerAnno(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"MarkerAnno") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "MarkerAnno")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]
      )
    ; id

  smart-ElemValPair(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ElemValPair") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ElemValPair") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemVal"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "ElemValPair")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemValPair"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemVal"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemVal"]
    )

  smart-ElemValArrayInit(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ElemValArrayInit") ; fail)> ( arg1
                                                                                 , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemVal"]]
                                                                                                                                 ]]
                                                                                 ))
    ; <prim("SUGARJ_unsafe_build", "ElemValArrayInit")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemVal"]
      )
    ; id

  smart-FieldDec(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"FieldDec") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldMod"]]]
                                                                                                                                                                          ]]
                                                                                                                           ]
                                                                                                                         ]]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"FieldDec") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"FieldDec") ; fail)> ( arg3
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDec"]]
                                                                                                                           ]]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "FieldDec")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldDec"]
      )
    ; id

  smart-VarDec(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"VarDec") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDecId"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "VarDec")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDec"]
      )
    ; id

  smart-VarDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"VarDec") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDecId"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"VarDec") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarInit"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "VarDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDec"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDecId"]
    )

  smart-ArrayVarDecId(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ArrayVarDecId") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ArrayVarDecId") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Dim"]]
                                                                                                                                ]]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "ArrayVarDecId")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDecId"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarInit"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayInit"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarInit"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Protected"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Private"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Static"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Final"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Transient"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Volatile"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDec"]
    )

  smart-ClassDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ClassDec") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDecHead"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ClassDec") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBody"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "ClassDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDec"]
      )
    ; id

  smart-ClassBody(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ClassBody") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBodyDec"]]
                                                                                                                          ]]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "ClassBody")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBody"]
      )
    ; id

  smart-ClassDecHead(|arg1, arg2, arg3, arg4, arg5) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ClassDecHead") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]]]
                                                                                                                                                                              ]]
                                                                                                                               ]
                                                                                                                             ]]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ClassDecHead") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ClassDecHead") ; fail)> ( arg3
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParams"]]
                                                                                                                                 ]]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ClassDecHead") ; fail)> ( arg4
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Super"]]
                                                                                                                                 ]]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ClassDecHead") ; fail)> ( arg5
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Interfaces"]]
                                                                                                                                 ]]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "ClassDecHead")> [arg1, arg2, arg3, arg4, arg5]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDecHead"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Abstract"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Protected"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Private"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Static"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Final"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrictFP"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]
    )

  smart-SuperDec(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SuperDec") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassType"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "SuperDec")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Super"]
      )
    ; id

  smart-ImplementsDec(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ImplementsDec") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceType"]]
                                                                                                                              ]]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "ImplementsDec")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Interfaces"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMemberDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBodyDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InstanceInit"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBodyDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StaticInit"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBodyDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBodyDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMemberDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMemberDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMemberDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMemberDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDec"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDec"]
    )

  smart-CompilationUnit(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CompilationUnit") ; fail)> ( arg1
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageDec"]]
                                                                                                                                  ]]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CompilationUnit") ; fail)> ( arg2
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImportDec"]]
                                                                                                                                  ]]
                                                                                  ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CompilationUnit") ; fail)> ( arg3
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDec"]]
                                                                                                                                  ]]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "CompilationUnit")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CompilationUnit"]
      )
    ; id

  smart-PackageName(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"PackageName") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]]
                                                                                                                            ]]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "PackageName")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageName"]
      )
    ; id

  smart-AmbName(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AmbName") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "AmbName")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AmbName"]
      )
    ; id

  smart-AmbName(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"AmbName") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AmbName"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"AmbName") ; fail)> ( arg2
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "AmbName")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AmbName"]
      )
    ; id

  smart-TypeName(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeName") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "TypeName")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
      )
    ; id

  smart-TypeName(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeName") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageOrTypeName"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"TypeName") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "TypeName")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
      )
    ; id

  smart-ExprName(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ExprName") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "ExprName")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExprName"]
      )
    ; id

  smart-ExprName(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ExprName") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AmbName"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ExprName") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "ExprName")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExprName"]
      )
    ; id

  smart-MethodName(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"MethodName") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "MethodName")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodName"]
      )
    ; id

  smart-MethodName(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"MethodName") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AmbName"]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"MethodName") ; fail)> ( arg2
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "MethodName")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodName"]
      )
    ; id

  smart-PackageOrTypeName(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"PackageOrTypeName") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "PackageOrTypeName")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageOrTypeName"]
      )
    ; id

  smart-PackageOrTypeName(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"PackageOrTypeName") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageOrTypeName"]
                                                                                  ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"PackageOrTypeName") ; fail)> ( arg2
                                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "PackageOrTypeName")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageOrTypeName"]
      )
    ; id

  smart-TypeArgs(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeArgs") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ActualTypeArg"]]
                                                                                                                         ]]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "TypeArgs")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ActualTypeArg"]
    )

  smart-Wildcard(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Wildcard") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["WildcardBound"]]
                                                                                                                           ]]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Wildcard")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ActualTypeArg"]
      )
    ; id

  smart-WildcardUpperBound(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"WildcardUpperBound") ; fail)> ( arg1
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RefType"]
                                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "WildcardUpperBound")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["WildcardBound"]
      )
    ; id

  smart-WildcardLowerBound(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"WildcardLowerBound") ; fail)> ( arg1
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RefType"]
                                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "WildcardLowerBound")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["WildcardBound"]
      )
    ; id

  smart-TypeParam(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeParam") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeVarId"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"TypeParam") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeBound"]]
                                                                                                                              ]]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "TypeParam")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParam"]
      )
    ; id

  smart-TypeBound(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeBound") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassOrInterfaceType"]]
                                                                                                                          ]]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "TypeBound")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeBound"]
      )
    ; id

  smart-TypeParams(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeParams") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParam"]]
                                                                                                                           ]]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "TypeParams")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParams"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeVarId"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassOrInterfaceType"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RefType"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayType"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RefType"]
    )

  smart-ClassOrInterfaceType(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ClassOrInterfaceType") ; fail)> ( arg1
                                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDecSpec"]
                                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ClassOrInterfaceType") ; fail)> ( arg2
                                                                                       , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                                         ]]
                                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "ClassOrInterfaceType")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassOrInterfaceType"]
      )
    ; id

  smart-ClassType(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ClassType") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDecSpec"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ClassType") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                              ]]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "ClassType")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassType"]
      )
    ; id

  smart-InterfaceType(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"InterfaceType") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDecSpec"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"InterfaceType") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]]
                                                                                                                                  ]]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "InterfaceType")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceType"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDecSpec"]
    )

  smart-Member(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Member") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDecSpec"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Member") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"Member") ; fail)> ( arg3
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Member")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDecSpec"]
      )
    ; id

  smart-TypeVar(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeVar") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeVarId"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "TypeVar")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeVar"]
      )
    ; id

  smart-ArrayType(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ArrayType") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "ArrayType")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayType"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NumType"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PrimType"]
    )

  smart-Boolean(|) =
    <prim("SUGARJ_unsafe_build", "Boolean")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PrimType"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntType"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NumType"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FloatType"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NumType"]
    )

  smart-Byte(|) =
    <prim("SUGARJ_unsafe_build", "Byte")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntType"]
      )
    ; id

  smart-Short(|) =
    <prim("SUGARJ_unsafe_build", "Short")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntType"]
      )
    ; id

  smart-Int(|) =
    <prim("SUGARJ_unsafe_build", "Int")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntType"]
      )
    ; id

  smart-Long(|) =
    <prim("SUGARJ_unsafe_build", "Long")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntType"]
      )
    ; id

  smart-Char(|) =
    <prim("SUGARJ_unsafe_build", "Char")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntType"]
      )
    ; id

  smart-Float(|) =
    <prim("SUGARJ_unsafe_build", "Float")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FloatType"]
      )
    ; id

  smart-Double(|) =
    <prim("SUGARJ_unsafe_build", "Double")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FloatType"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PrimType"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RefType"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]
    )

  smart-Null(|) =
    <prim("SUGARJ_unsafe_build", "Null")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NullLiteral"]
      )
    ; id

  smart-String(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"String") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringPart"]]
                                                                                                                       ]]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "String")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringLiteral"]
      )
    ; id

  smart-Chars(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Chars") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringChars"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Chars")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringPart"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["UnicodeEscape"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringPart"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EscapeSeq"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringPart"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FooStringChars"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringChars"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaEscape"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EscapeSeq"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NamedEscape"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EscapeSeq"]
    )

  smart-NamedEscape(|) =
    <prim("SUGARJ_unsafe_build", "NamedEscape")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NamedEscape"]
      )
    ; id

  smart-OctaEscape1(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"OctaEscape1") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LastOcta"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "OctaEscape1")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaEscape"]
      )
    ; id

  smart-OctaEscape2(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"OctaEscape2") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LastOcta"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "OctaEscape2")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaEscape"]
      )
    ; id

  smart-OctaEscape2(|) =
    <prim("SUGARJ_unsafe_build", "OctaEscape2")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaEscape"]
      )
    ; id

  smart-OctaEscape3(|) =
    <prim("SUGARJ_unsafe_build", "OctaEscape3")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaEscape"]
      )
    ; id

  smart-Char(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Char") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharContent"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Char")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharLiteral"]
      )
    ; id

  smart-Single(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Single") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SingleChar"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "Single")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharContent"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["UnicodeEscape"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharContent"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EscapeSeq"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharContent"]
    )

  smart-Bool(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Bool") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Bool"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Bool")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BoolLiteral"]
      )
    ; id

  smart-True(|) =
    <prim("SUGARJ_unsafe_build", "True")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Bool"]
      )
    ; id

  smart-False(|) =
    <prim("SUGARJ_unsafe_build", "False")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Bool"]
      )
    ; id

  smart-Float(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Float") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciFloatLiteral"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Float")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FloatLiteral"]
      )
    ; id

  smart-Float(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Float") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaFloatLiteral"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Float")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FloatLiteral"]
      )
    ; id

  smart-Deci(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Deci") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciLiteral"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Deci")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntLiteral"]
      )
    ; id

  smart-Hexa(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Hexa") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaLiteral"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Hexa")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntLiteral"]
      )
    ; id

  smart-Octa(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Octa") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaLiteral"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "Octa")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntLiteral"]
      )
    ; id

  smart-Public(|) =
    <prim("SUGARJ_unsafe_build", "Public")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]
      )
    ; id

  smart-Private(|) =
    <prim("SUGARJ_unsafe_build", "Private")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Private"]
      )
    ; id

  smart-Protected(|) =
    <prim("SUGARJ_unsafe_build", "Protected")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Protected"]
      )
    ; id

  smart-Abstract(|) =
    <prim("SUGARJ_unsafe_build", "Abstract")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Abstract"]
      )
    ; id

  smart-Final(|) =
    <prim("SUGARJ_unsafe_build", "Final")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Final"]
      )
    ; id

  smart-Static(|) =
    <prim("SUGARJ_unsafe_build", "Static")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Static"]
      )
    ; id

  smart-Native(|) =
    <prim("SUGARJ_unsafe_build", "Native")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Native"]
      )
    ; id

  smart-Transient(|) =
    <prim("SUGARJ_unsafe_build", "Transient")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Transient"]
      )
    ; id

  smart-Volatile(|) =
    <prim("SUGARJ_unsafe_build", "Volatile")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Volatile"]
      )
    ; id

  smart-Synchronized(|) =
    <prim("SUGARJ_unsafe_build", "Synchronized")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Synchronized"]
      )
    ; id

  smart-StrictFP(|) =
    <prim("SUGARJ_unsafe_build", "StrictFP")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrictFP"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Private"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Protected"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Abstract"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Final"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Static"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Native"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Transient"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Volatile"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Synchronized"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrictFP"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]
    )

  smart-Id(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Id") ; fail)> ( arg1
                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ID"]
                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "Id")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]
      )
    ; id

  smart-UnicodeEscape(|) =
    <prim("SUGARJ_unsafe_build", "UnicodeEscape")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["UnicodeEscape"]
      )
    ; id


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaCompilationUnit"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CompilationUnit"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaImportDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImportDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaPackageDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaElemVal"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemVal"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaElemValPair"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ElemValPair"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAnno"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Anno"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaLHS"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LHS"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaCondMid"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CondMid"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaArraySubscript"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArraySubscript"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaDimExpr"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DimExpr"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaArrayBaseType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayBaseType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaArrayCreationExpr"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayCreationExpr"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaClassMemberDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMemberDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaClassBodyDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBodyDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaInterfaces"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Interfaces"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaSuper"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Super"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaClassMod"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassMod"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaClassDecHead"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDecHead"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaClassBody"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassBody"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaClassDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaInterfaceMod"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMod"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaInterfaceMemberDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceMemberDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaExtendsInterfaces"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExtendsInterfaces"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaInterfaceDecHead"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDecHead"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaInterfaceDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaDefaultVal"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DefaultVal"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAnnoElemDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoElemDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAnnoDecHead"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoDecHead"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAnnoDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAbstractMethodMod"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodMod"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAbstractMethodDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AbstractMethodDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaConstantMod"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstantMod"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaConstantDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstantDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEnumBodyDecs"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumBodyDecs"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEnumConstArgs"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumConstArgs"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEnumConst"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumConst"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEnumBody"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumBody"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEnumDecHead"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumDecHead"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEnumDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EnumDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaConstrMod"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrMod"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaConstrInv"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrInv"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaConstrBody"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrBody"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaConstrHead"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrHead"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaConstrDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ConstrDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaStaticInit"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StaticInit"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaInstanceInit"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InstanceInit"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaMethodBody"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodBody"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaExceptionType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExceptionType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaThrows"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Throws"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaMethodMod"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodMod"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaVarMod"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarMod"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaFormalParam"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FormalParam"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaResultType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ResultType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaMethodDecHead"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodDecHead"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaMethodDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaBlockStm"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BlockStm"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaBlock"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Block"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaCatchClause"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CatchClause"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaSwitchLabel"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchLabel"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaSwitchGroup"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchGroup"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaSwitchBlock"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SwitchBlock"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaStm"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Stm"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaLocalVarDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LocalVarDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaLocalVarDecStm"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LocalVarDecStm"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaFieldMod"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldMod"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaVarInit"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarInit"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaDim"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Dim"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaVarDecId"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDecId"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaVarDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["VarDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaFieldDec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldDec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaArrayInit"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayInit"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaClassLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Literal"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Type"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaArrayType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeVar"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeVar"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeDecSpec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeDecSpec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaInterfaceType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["InterfaceType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaClassType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaClassOrInterfaceType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ClassOrInterfaceType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaRefType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RefType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeVarId"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeVarId"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeParams"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParams"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeBound"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeBound"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeParam"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeParam"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaWildcardBound"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["WildcardBound"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaActualTypeArg"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ActualTypeArg"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeArgs"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeArgs"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaPackageOrTypeName"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageOrTypeName"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaMethodName"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodName"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaExprName"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ExprName"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeName"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TypeName"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAmbName"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AmbName"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaPackageName"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PackageName"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaFloatType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FloatType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaIntType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaNumType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NumType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaPrimType"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["PrimType"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaNullLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NullLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaFooStringChars"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FooStringChars"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaStringChars"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringChars"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaStringPart"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringPart"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaStringLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StringLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaSingleChar"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SingleChar"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaCharContent"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharContent"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaCharLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaLastOcta"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LastOcta"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaOctaEscape"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaEscape"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaNamedEscape"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NamedEscape"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEscapeSeq"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EscapeSeq"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaBool"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Bool"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaBoolLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BoolLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaBinaryExponent"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BinaryExponent"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaHexaSignificand"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaSignificand"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaHexaFloatNumeral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaFloatNumeral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaSignedInteger"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SignedInteger"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaDeciFloatExponentPart"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciFloatExponentPart"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaDeciFloatDigits"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciFloatDigits"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaDeciFloatNumeral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciFloatNumeral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaFloatLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FloatLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaHexaFloatLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaFloatLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaDeciFloatLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciFloatLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaIntLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaOctaNumeral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaNumeral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaHexaNumeral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaNumeral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaDeciNumeral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciNumeral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaOctaLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OctaLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaHexaLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["HexaLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaDeciLiteral"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DeciLiteral"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaModifier"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Modifier"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaStrictFP"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrictFP"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaSynchronized"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Synchronized"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaVolatile"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Volatile"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTransient"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Transient"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaNative"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Native"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaStatic"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Static"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaFinal"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Final"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAbstract"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Abstract"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaProtected"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Protected"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaPrivate"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Private"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaPublic"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Public"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaId"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Id"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaID"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ID"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaKeyword"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Keyword"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEscChar"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EscChar"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEscEscChar"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EscEscChar"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAsterisk"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Asterisk"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaBlockCommentChars"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["BlockCommentChars"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaCommentPart"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CommentPart"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEOLCommentChars"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EOLCommentChars"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaComment"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Comment"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaEndOfFile"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EndOfFile"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaCarriageReturn"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CarriageReturn"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaLineTerminator"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["LineTerminator"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaUnicodeEscape"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["UnicodeEscape"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaArrayAccess"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArrayAccess"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaFieldAccess"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FieldAccess"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaMethodSpec"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["MethodSpec"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaExpr"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Expr"]
