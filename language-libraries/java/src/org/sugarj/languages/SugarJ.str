module org/sugarj/languages/SugarJ

imports
  org/sugarj/transformations/typesmart/Runtime
  org/sugarj/languages/Stratego
  org/sugarj/languages/Java
  org/sugarj/languages/Sdf2
  org/sugarj/languages/Stratego
  org/sugarj/languages/EditorServices
  org/sugarj/languages/Sugar
  org/sugarj/languages/Model


signature
  constructors
    SugarDec              : SugarDecHead * SugarBody -> SugarDec
    SugarDecHead          : List(AnnoOrSugarMod) * JavaId -> SugarDecHead
    SugarBody             : List(SugarDefElem) -> SugarBody
    EditorServicesDec     : EditorServicesDecHead * EditorServicesBody -> SugarDec
    EditorServicesDecHead : List(AnnoOrSugarMod) * JavaId -> EditorServicesDecHead
    EditorServicesBody    : List(EditorServiceSection) -> EditorServicesBody
    ChecksDec             : ChecksDecHead * ChecksBody -> ToplevelDeclaration
    ChecksDecHead         : List(AnnoOrSugarMod) * JavaId -> ChecksDecHead
    ChecksDecHead         : List(AnnoOrSugarMod) * JavaId -> ChecksDecHead
    ChecksBody            : List(CheckingRule) -> ChecksBody
    CheckingRuleErrors    : List(CheckingRuleBody) -> CheckingRule
    CheckingRuleWarnings  : List(CheckingRuleBody) -> CheckingRule
    CheckingRuleNotes     : List(CheckingRuleBody) -> CheckingRule
    CheckingRuleNoCond    : StrategoTerm * StrategoTerm -> CheckingRuleBody
    CheckingRule          : StrategoTerm * StrategoTerm * StrategoStrategy -> CheckingRuleBody
    CheckingRule          : StrategoTerm * StrategoTerm * List(StrategoRuleCond) -> CheckingRuleBody
    CheckingRules         : List(StrategoDef) -> CheckingRule
    ModelDec              : ModelDecHead * ModelBody -> ToplevelDeclaration
    ModelDecHead          : List(AnnoOrSugarMod) * JavaId * JavaId -> ModelDecHead
    ModelBody             : ModelTerm -> ModelBody
    TransDec              : TransformationDecHead * TransformationBody -> ToplevelDeclaration
    TransDecHead          : List(AnnoOrSugarMod) * JavaId -> TransformationDecHead
    TransBody             : TransformationDef -> TransformationBody
    ImportAs              : ModuleName -> ImportAs
    TransImportDec        : Option(ImportAs) * TransformationAppExpr -> JavaImportDec
    TypeImportAsDec       : ImportAs * ModuleName -> JavaImportDec


rules


rules

  smart-SugarDec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SugarDec") ; fail)> (arg1, SortNoArgs("SugarDecHead")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SugarDec") ; fail)> (arg2, SortNoArgs("SugarBody"))))
        ; ![SortNoArgs("SugarDec")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SugarDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SugarDecHead(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SugarDecHead") ; fail)> ( arg1
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("AnnoOrSugarMod")]
                                                                                    )
                                                                                  ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SugarDecHead") ; fail)> (arg2, SortNoArgs("JavaId"))))
        ; ![SortNoArgs("SugarDecHead")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SugarDecHead")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SugarBody(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"SugarBody") ; fail)> ( arg1
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("SugarDefElem")]
                                                                                )
                                                                              ))
        ; ![SortNoArgs("SugarBody")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SugarBody")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-EditorServicesDec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesDec") ; fail)> (arg1, SortNoArgs("EditorServicesDecHead")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesDec") ; fail)> (arg2, SortNoArgs("EditorServicesBody"))))
        ; ![SortNoArgs("SugarDec")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "EditorServicesDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-EditorServicesDecHead(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesDecHead") ; fail)> ( arg1
                                                                                           , Sort(
                                                                                               "List"
                                                                                             , [SortNoArgs("AnnoOrSugarMod")]
                                                                                             )
                                                                                           ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesDecHead") ; fail)> (arg2, SortNoArgs("JavaId"))))
        ; ![SortNoArgs("EditorServicesDecHead")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "EditorServicesDecHead")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-EditorServicesBody(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesBody") ; fail)> ( arg1
                                                                                       , Sort(
                                                                                           "List"
                                                                                         , [SortNoArgs("EditorServiceSection")]
                                                                                         )
                                                                                       ))
        ; ![SortNoArgs("EditorServicesBody")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "EditorServicesBody")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ChecksDec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDec") ; fail)> (arg1, SortNoArgs("ChecksDecHead")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDec") ; fail)> (arg2, SortNoArgs("ChecksBody"))))
        ; ![SortNoArgs("ToplevelDeclaration")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ChecksDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ChecksDecHead(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDecHead") ; fail)> ( arg1
                                                                                    , Sort(
                                                                                        "List"
                                                                                      , [SortNoArgs("AnnoOrSugarMod")]
                                                                                      )
                                                                                    ))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDecHead") ; fail)> (arg2, SortNoArgs("JavaId"))))
         ; ![SortNoArgs("ChecksDecHead")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDecHead") ; fail)> ( arg1
                                                                                      , Sort(
                                                                                          "List"
                                                                                        , [SortNoArgs("AnnoOrSugarMod")]
                                                                                        )
                                                                                      ))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDecHead") ; fail)> (arg2, SortNoArgs("JavaId"))))
           ; ![SortNoArgs("ChecksDecHead")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ChecksDecHead")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ChecksBody(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ChecksBody") ; fail)> ( arg1
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("CheckingRule")]
                                                                                 )
                                                                               ))
        ; ![SortNoArgs("ChecksBody")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ChecksBody")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CheckingRuleErrors(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleErrors") ; fail)> ( arg1
                                                                                       , Sort(
                                                                                           "List"
                                                                                         , [SortNoArgs("CheckingRuleBody")]
                                                                                         )
                                                                                       ))
        ; ![SortNoArgs("CheckingRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CheckingRuleErrors")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CheckingRuleWarnings(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleWarnings") ; fail)> ( arg1
                                                                                         , Sort(
                                                                                             "List"
                                                                                           , [SortNoArgs("CheckingRuleBody")]
                                                                                           )
                                                                                         ))
        ; ![SortNoArgs("CheckingRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CheckingRuleWarnings")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CheckingRuleNotes(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleNotes") ; fail)> ( arg1
                                                                                      , Sort(
                                                                                          "List"
                                                                                        , [SortNoArgs("CheckingRuleBody")]
                                                                                        )
                                                                                      ))
        ; ![SortNoArgs("CheckingRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CheckingRuleNotes")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CheckingRuleNoCond(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleNoCond") ; fail)> (arg1, SortNoArgs("StrategoTerm")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleNoCond") ; fail)> (arg2, SortNoArgs("StrategoTerm"))))
        ; ![SortNoArgs("CheckingRuleBody")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CheckingRuleNoCond")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CheckingRule(|arg1, arg2, arg3) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> (arg1, SortNoArgs("StrategoTerm")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> (arg2, SortNoArgs("StrategoTerm")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> (arg3, SortNoArgs("StrategoStrategy"))))
         ; ![SortNoArgs("CheckingRuleBody")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> (arg1, SortNoArgs("StrategoTerm")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> (arg2, SortNoArgs("StrategoTerm")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> ( arg3
                                                                                       , Sort(
                                                                                           "List"
                                                                                         , [SortNoArgs("StrategoRuleCond")]
                                                                                         )
                                                                                       )))
           ; ![SortNoArgs("CheckingRuleBody")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CheckingRule")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CheckingRules(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRules") ; fail)> ( arg1
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("StrategoDef")]
                                                                                    )
                                                                                  ))
        ; ![SortNoArgs("CheckingRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CheckingRules")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ModelDec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ModelDec") ; fail)> (arg1, SortNoArgs("ModelDecHead")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ModelDec") ; fail)> (arg2, SortNoArgs("ModelBody"))))
        ; ![SortNoArgs("ToplevelDeclaration")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ModelDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ModelDecHead(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ModelDecHead") ; fail)> ( arg1
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("AnnoOrSugarMod")]
                                                                                    )
                                                                                  ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ModelDecHead") ; fail)> (arg2, SortNoArgs("JavaId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ModelDecHead") ; fail)> (arg3, SortNoArgs("JavaId"))))
        ; ![SortNoArgs("ModelDecHead")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ModelDecHead")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ModelBody(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ModelBody") ; fail)> (arg1, SortNoArgs("ModelTerm")))
        ; ![SortNoArgs("ModelBody")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ModelBody")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TransDec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"TransDec") ; fail)> (arg1, SortNoArgs("TransformationDecHead")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"TransDec") ; fail)> (arg2, SortNoArgs("TransformationBody"))))
        ; ![SortNoArgs("ToplevelDeclaration")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TransDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TransDecHead(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"TransDecHead") ; fail)> ( arg1
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("AnnoOrSugarMod")]
                                                                                    )
                                                                                  ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"TransDecHead") ; fail)> (arg2, SortNoArgs("JavaId"))))
        ; ![SortNoArgs("TransformationDecHead")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TransDecHead")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TransBody(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"TransBody") ; fail)> (arg1, SortNoArgs("TransformationDef")))
        ; ![SortNoArgs("TransformationBody")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TransBody")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ImportAs(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ImportAs") ; fail)> (arg1, SortNoArgs("ModuleName")))
        ; ![SortNoArgs("ImportAs")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ImportAs")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TransImportDec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"TransImportDec") ; fail)> ( arg1
                                                                                    , Sort(
                                                                                        "Option"
                                                                                      , [SortNoArgs("ImportAs")]
                                                                                      )
                                                                                    ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"TransImportDec") ; fail)> (arg2, SortNoArgs("TransformationAppExpr"))))
        ; ![SortNoArgs("JavaImportDec")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TransImportDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TypeImportAsDec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"TypeImportAsDec") ; fail)> (arg1, SortNoArgs("ImportAs")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"TypeImportAsDec") ; fail)> (arg2, SortNoArgs("ModuleName"))))
        ; ![SortNoArgs("JavaImportDec")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TypeImportAsDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("JavaPackageDec")
    , SortNoArgs("ToplevelDeclaration")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("JavaImportDec")
    , SortNoArgs("ToplevelDeclaration")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("JavaTypeDec")
    , SortNoArgs("ToplevelDeclaration")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("SugarDec")
    , SortNoArgs("ToplevelDeclaration")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("JavaAnno")
    , SortNoArgs("AnnoOrSugarMod")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("SugarMod")
    , SortNoArgs("AnnoOrSugarMod")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("JavaPublic")
    , SortNoArgs("SugarMod")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("JavaTypeName")
    , SortNoArgs("ModuleName")
    )
