module org/sugarj/languages/SugarJ

imports
  org/sugarj/transformations/typesmart/Runtime
  org/sugarj/languages/Stratego


signature
  constructors
    CompilationUnit       : Option(JavaPackageDec) * List(JavaImportDec) * List(Alt(JavaTypeDec, SugarDec)) -> CompilationUnit
    SugarDec              : SugarDecHead * SugarBody -> SugarDec
    SugarDecHead          : List(AnnoOrSugarMod) * JavaId -> SugarDecHead
    SugarBody             : List(SugarDefElem) -> SugarBody
    EditorServicesDec     : EditorServicesDecHead * EditorServicesBody -> SugarDec
    EditorServicesDecHead : List(AnnoOrSugarMod) * JavaId -> EditorServicesDecHead
    EditorServicesBody    : List(EditorServiceSection) -> EditorServicesBody
    ChecksDec             : ChecksDecHead * ChecksBody -> ToplevelDeclaration
    ChecksDecHead         : List(AnnoOrSugarMod) * JavaId -> ChecksDecHead
    ChecksDecHead         : List(AnnoOrSugarMod) * JavaId -> ChecksDecHead
    ChecksBody            : List(CheckingRule) -> ChecksBody
    CheckingRuleErrors    : List(CheckingRuleBody) -> CheckingRule
    CheckingRuleWarnings  : List(CheckingRuleBody) -> CheckingRule
    CheckingRuleNotes     : List(CheckingRuleBody) -> CheckingRule
    CheckingRuleNoCond    : StrategoTerm * StrategoTerm -> CheckingRuleBody
    CheckingRule          : StrategoTerm * StrategoTerm * StrategoStrategy -> CheckingRuleBody
    CheckingRule          : StrategoTerm * StrategoTerm * List(StrategoRuleCond) -> CheckingRuleBody
    CheckingRules         : List(StrategoDef) -> CheckingRule
    ModelDec              : ModelDecHead * ModelBody -> ToplevelDeclaration
    ModelDecHead          : List(AnnoOrSugarMod) * JavaId * JavaId -> ModelDecHead
    ModelBody             : ModelTerm -> ModelBody
    TransDec              : TransformationDecHead * TransformationBody -> ToplevelDeclaration
    TransDecHead          : List(AnnoOrSugarMod) * JavaId -> TransformationDecHead
    TransBody             : TransformationDef -> TransformationBody
    ImportAs              : ModuleName -> ImportAs
    TransImportDec        : Option(ImportAs) * TransformationAppExpr -> JavaImportDec
    TypeImportAsDec       : ImportAs * ModuleName -> JavaImportDec


rules


rules

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaPackageDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ToplevelDeclaration"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaImportDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ToplevelDeclaration"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ToplevelDeclaration"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarDec"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ToplevelDeclaration"]
    )

  smart-CompilationUnit(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CompilationUnit") ; fail)> ( arg1
                                                                                , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaPackageDec"]]
                                                                                                                                  ]]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CompilationUnit") ; fail)> ( arg2
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaImportDec"]]
                                                                                                                                  ]]
                                                                                  ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CompilationUnit") ; fail)> ( arg3
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [ <prim("SUGARJ_unsafe_build", "Sort")> ["Alt"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeDec"]|[<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarDec"]]]
                                                                                                                                                                                   ]]
                                                                                                                                    ]
                                                                                                                                  ]]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "CompilationUnit")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CompilationUnit"]
      )
    ; id

  smart-SugarDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SugarDec") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarDecHead"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"SugarDec") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarBody"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "SugarDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarDec"]
      )
    ; id

  smart-SugarDecHead(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SugarDecHead") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoOrSugarMod"]]
                                                                                                                             ]]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"SugarDecHead") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaId"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "SugarDecHead")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarDecHead"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaAnno"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoOrSugarMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarMod"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoOrSugarMod"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaPublic"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarMod"]
    )

  smart-SugarBody(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"SugarBody") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarDefElem"]]
                                                                                                                          ]]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "SugarBody")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarBody"]
      )
    ; id

  smart-EditorServicesDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesDec") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EditorServicesDecHead"]
                                                                                  ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesDec") ; fail)> ( arg2
                                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EditorServicesBody"]
                                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "EditorServicesDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarDec"]
      )
    ; id

  smart-EditorServicesDecHead(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesDecHead") ; fail)> ( arg1
                                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoOrSugarMod"]]
                                                                                                                                      ]]
                                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesDecHead") ; fail)> ( arg2
                                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaId"]
                                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "EditorServicesDecHead")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EditorServicesDecHead"]
      )
    ; id

  smart-EditorServicesBody(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"EditorServicesBody") ; fail)> ( arg1
                                                                                   , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EditorServiceSection"]]
                                                                                                                                   ]]
                                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "EditorServicesBody")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["EditorServicesBody"]
      )
    ; id

  smart-ChecksDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDec") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ChecksDecHead"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDec") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ChecksBody"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "ChecksDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ToplevelDeclaration"]
      )
    ; id

  smart-ChecksDecHead(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDecHead") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoOrSugarMod"]]
                                                                                                                              ]]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ChecksDecHead") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaId"]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "ChecksDecHead")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ChecksDecHead"]
      )
    ; id

  smart-ChecksBody(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ChecksBody") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRule"]]
                                                                                                                           ]]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "ChecksBody")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ChecksBody"]
      )
    ; id

  smart-CheckingRuleErrors(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleErrors") ; fail)> ( arg1
                                                                                   , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRuleBody"]]
                                                                                                                                   ]]
                                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "CheckingRuleErrors")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRule"]
      )
    ; id

  smart-CheckingRuleWarnings(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleWarnings") ; fail)> ( arg1
                                                                                     , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRuleBody"]]
                                                                                                                                     ]]
                                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "CheckingRuleWarnings")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRule"]
      )
    ; id

  smart-CheckingRuleNotes(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleNotes") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRuleBody"]]
                                                                                                                                  ]]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "CheckingRuleNotes")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRule"]
      )
    ; id

  smart-CheckingRuleNoCond(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleNoCond") ; fail)> ( arg1
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoTerm"]
                                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRuleNoCond") ; fail)> ( arg2
                                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoTerm"]
                                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "CheckingRuleNoCond")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRuleBody"]
      )
    ; id

  smart-CheckingRule(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoTerm"]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoTerm"]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> ( arg3
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoStrategy"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "CheckingRule")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRuleBody"]
      )
    ; id

  smart-CheckingRule(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoTerm"]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoTerm"]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRule") ; fail)> ( arg3
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoRuleCond"]]
                                                                                                                               ]]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "CheckingRule")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRuleBody"]
      )
    ; id

  smart-CheckingRules(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"CheckingRules") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoDef"]]
                                                                                                                              ]]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "CheckingRules")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CheckingRule"]
      )
    ; id

  smart-ModelDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ModelDec") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelDecHead"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ModelDec") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelBody"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "ModelDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ToplevelDeclaration"]
      )
    ; id

  smart-ModelDecHead(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ModelDecHead") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoOrSugarMod"]]
                                                                                                                             ]]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ModelDecHead") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaId"]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"ModelDecHead") ; fail)> ( arg3
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaId"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "ModelDecHead")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelDecHead"]
      )
    ; id

  smart-ModelBody(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ModelBody") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelTerm"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "ModelBody")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelBody"]
      )
    ; id

  smart-TransDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TransDec") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationDecHead"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"TransDec") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationBody"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "TransDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ToplevelDeclaration"]
      )
    ; id

  smart-TransDecHead(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TransDecHead") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AnnoOrSugarMod"]]
                                                                                                                             ]]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"TransDecHead") ; fail)> ( arg2
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaId"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "TransDecHead")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationDecHead"]
      )
    ; id

  smart-TransBody(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TransBody") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationDef"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "TransBody")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationBody"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaTypeName"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
    )

  smart-ImportAs(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ImportAs") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "ImportAs")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImportAs"]
      )
    ; id

  smart-TransImportDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TransImportDec") ; fail)> ( arg1
                                                                               , <prim("SUGARJ_unsafe_build", "Sort")> ["Option"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImportAs"]]
                                                                                                                                 ]]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"TransImportDec") ; fail)> ( arg2
                                                                                 , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationAppExpr"]
                                                                                 ))
    ; <prim("SUGARJ_unsafe_build", "TransImportDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaImportDec"]
      )
    ; id

  smart-TypeImportAsDec(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TypeImportAsDec") ; fail)> ( arg1
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImportAs"]
                                                                                ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"TypeImportAsDec") ; fail)> ( arg2
                                                                                  , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "TypeImportAsDec")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["JavaImportDec"]
      )
    ; id
