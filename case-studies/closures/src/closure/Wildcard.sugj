package closure;

import concretesyntax.Java;
import closure.Syntax;

public sugar Wildcard {
  context-free syntax
    JavaType "(" "_" ")" "=>" JavaExpr -> JavaExpr {cons("WildcardClosure"), longest-match}

  desugarings
    desugar-wildcard-closure

  rules 
    desugar-wildcard-closure :
      WildcardClosure(ty, e) ->
      Closure(ty, objectType, Id(name), e)
      where
        !ClassOrInterfaceType(TypeName(Id("Object")), None()) => objectType;
        <free-local-vars-expr> e => names;
        <freshname> names => name
    
    freshname : names -> "fresh" 

    /*
     * this is approximate: we ignore that methods in anonymous class expressions bind variables
     */
    free-local-vars-expr : ExprName(Id(name)) -> [name]
    free-local-vars-expr : AmbName(Id(name)) -> [name]
    
    free-local-vars-expr : Closure(_, _, Id(v), e) -> free-vars
      where all-vars := <free-local-vars-expr> e
          ; free-vars := <filter(not(?v))> all-vars
    
    free-local-vars-expr : c#(xs) -> <mapconcat(free-local-vars-expr)> xs
}