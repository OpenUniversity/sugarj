module Meta.Concrete.Haskell where

import org.sugarj.languages.Haskell
import org.sugarj.languages.Stratego

import Meta.Concrete.MetaExplode

context-free syntax
  "|[" HaskellExp "]|" -> StrategoTerm {cons("ToMetaExpr")}
  "|[" HaskellTopdecl "]|" -> StrategoTerm {cons("ToMetaExpr")}

syntax
  "$"  <StrategoTerm-CF> -> <HaskellExp-CF> {cons("FromMetaExpr")}
  "$"  <StrategoTerm-CF> -> <HaskellType-CF> {cons("FromMetaExpr")}
  "$" <StrategoTerm-CF> -> <HaskellInst-CF> {cons("FromMetaExpr")}

  "$"  <StrategoTerm-CF> -> <HaskellAPat-CF> {cons("FromMetaExpr")}
  "$*" <StrategoTerm-CF> -> <HaskellFargs-CF> {cons("FromMetaExpr")}

  "$*" <StrategoTerm-CF> -> <HaskellDeclList-CF> {cons("FromMetaExpr")}

-- arrow syntax
context-free syntax
  "cmd" "|[" ArrCommand "]|" -> StrategoTerm {cons("ToMetaExpr")}

syntax
  "$"  <StrategoTerm-CF> -> <ArrCommand-CF> {cons("FromMetaExpr")}

  "$*" <StrategoTerm-CF> -> <ArrImplStmtList-CF> {cons("FromMetaExpr")}
  "$*" <StrategoTerm-CF> -> <ArrExplStmtList-CF> {cons("FromMetaExpr")}

-- sdf
context-free syntax
  "|[" Sdf2Production "]|" -> StrategoTerm {cons("ToMetaExpr")}

  "$" StrategoTerm -> Sdf2Symbol {cons("FromMetaExpr")}
  "$*" StrategoTerm -> Sdf2Symbols {cons("FromMetaExpr")}
  "$" StrategoTerm -> Sdf2ATerm {cons("FromMetaExpr")}


lexical syntax
  "$" -> NOVARSYM
  NOVARSYM -> HaskellVARSYM {reject}

lexical restrictions
  NOVARSYM -/- [\ \t\r\n] \/ [\!\#\$\%\&\*\+\.\/] \/ [\<\=\>\?\@\\\^\|\-\~] \/ [\:]
