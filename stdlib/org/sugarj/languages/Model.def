definition
module org/sugarj/languages/Model
imports org/sugarj/languages/Transformation
        org/sugarj/languages/TransformationImport
exports
 %% models
  sorts ModelDecHead ModelBody

  lexical syntax
    [a-zA-Z0-9\-\_]+ -> MetamodelID
  lexical restrictions
    MetamodelID -/- [a-zA-Z0-9\-\_]

  context-free syntax
    ModelDecHead ModelBody         -> ToplevelDeclaration     {cons("ModelDec")}
    AnnoOrSugarMod* "model" JavaId "instantiates" MetamodelID -> ModelDecHead {cons("ModelDecHead")}
    "{" ModelTerm "}"              -> ModelBody    {cons("ModelBody")}
    ATerm -> ModelTerm {cons("ToModelTerm")}
 
  context-free syntax
    MetamodelDecHead SugarBody         -> ToplevelDeclaration     {cons("MetamodelDec")}
    AnnoOrSugarMod* "metamodel" JavaId -> MetamodelDecHead {cons("MetamodelDecHead")}

%% transformations
module org/sugarj/languages/Transformation
exports
  context-free syntax
    TransformationDecHead TransformationBody   -> ToplevelDeclaration {cons("TransDec")}
    AnnoOrSugarMod* "transformation" JavaId -> TransformationDecHead {cons("TransDecHead")}
    
    "{" TransformationDef "}" -> TransformationBody {cons("TransBody")}
    Transformation*  -> TransformationDef
    DirectTransformation Transformation*  -> TransformationDef {ast("Cons(<1>, <2>)")} 

    StrategoDef+ -> DirectTransformation {cons("Rules")}
    "strategies" StrategoDef*   -> Transformation {cons("Strategies")}
    "signature" StrategoSdecl*  -> Transformation {cons("Signature")}
    "rules" StrategoDef*        -> Transformation {cons("Rules")}
    "overlays" StrategoOverlay* -> Transformation {cons("Overlays")}


module org/sugarj/languages/TransformationImport
exports
  context-free syntax
    JavaTypeName -> TransformationExpr
    TransformationExpr1 -> TransformationExpr
    JavaTypeName "<" {TransformationExpr ","}+ ">" -> TransformationExpr1 {cons("TransApp")}  
    
    "import" TransformationExpr1 ImportAs? ";" -> JavaImportDec {cons("TransImportDec")}
    "import" JavaTypeName ImportAs ";"             -> JavaImportDec {cons("TypeImportAsDec")}
    
    "as" JavaTypeName -> ImportAs {cons("ImportAs")}

