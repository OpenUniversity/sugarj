module org/sugarj/languages/Sdf2

imports
  org/sugarj/transformations/typesmart/Runtime
  org/sugarj/languages/Stratego


signature
  constructors
    aliases                    : Aliases -> Grammar
    alias                      : Symbol * Symbol -> Alias
    char-class                 : CharClass -> Lookahead
    seq                        : CharClass * Lookaheads -> Lookahead
    single                     : Lookahead -> Lookaheads
    alt                        : Lookaheads * Lookaheads -> Lookaheads
    list                       : List(Lookahead) -> Lookaheads
    follow                     : Symbols * Lookaheads -> Restriction
    restrictions               : Restrictions -> Grammar
    reject                     : Attribute
    prefer                     : Attribute
    avoid                      : Attribute
    quoted                     : StrCon -> Label
    unquoted                   : IdCon -> Label
    label                      : Label * Symbol -> Symbol
    unquoted-fun               : IdCon -> FunctionName
    quoted-fun                 : StrCon -> FunctionName
    lit                        : StrCon -> Symbol
    ci-lit                     : SingleQuotedStrCon -> Symbol
    prefix-fun                 : FunctionName * List(Symbol) * Symbol * Attributes -> Production
    kernel-start-symbols       : Symbols -> Grammar
    lexical-start-symbols      : Symbols -> Grammar
    context-free-start-symbols : Symbols -> Grammar
    sort                       : Sort -> Symbol
    parameterized-sort         : Sort * List(Symbol) -> Symbol
    'sorts                     : Symbols -> Grammar
    numeric                    : NumChar -> Character
    short                      : ShortChar -> Character
    top                        : Character
    eof                        : Character
    bot                        : Character
    label_start                : Character
    range                      : Character * Character -> CharRange
    conc                       : CharRanges * CharRanges -> CharRanges
    absent                     : OptCharRanges
    present                    : CharRanges -> OptCharRanges
    simple-charclass           : OptCharRanges -> CharClass
    comp                       : CharClass -> CharClass
    diff                       : CharClass * CharClass -> CharClass
    isect                      : CharClass * CharClass -> CharClass
    union                      : CharClass * CharClass -> CharClass
    char-class                 : CharClass -> Symbol
    left                       : Associativity
    right                      : Associativity
    non-assoc                  : Associativity
    assoc                      : Associativity
    bracket                    : Attribute
    assoc                      : Associativity -> Attribute
    default                    : List(NatCon) -> ArgumentIndicator
    with-arguments             : Group * ArgumentIndicator -> Group
    non-transitive             : Group -> Group
    simple-group               : Production -> Group
    prods-group                : Productions -> Group
    assoc-group                : Associativity * Productions -> Group
    chain                      : List(Group) -> Priority
    assoc                      : Group * Associativity * Group -> Priority
    priorities                 : Priorities -> Grammar
    lifting                    : Symbol -> Symbol
    empty                      : Symbol
    seq                        : Symbol * List(Symbol) -> Symbol
    opt                        : Symbol -> Symbol
    iter                       : Symbol -> Symbol
    iter-star                  : Symbol -> Symbol
    iter-sep                   : Symbol * Symbol -> Symbol
    iter-star-sep              : Symbol * Symbol -> Symbol
    tuple                      : Symbol * List(Symbol) -> Symbol
    func                       : Symbols * Symbol -> Symbol
    alt                        : Symbol * Symbol -> Symbol
    strategy                   : Symbol * Symbol -> Symbol
    renamings                  : List(Renaming) -> Renamings
    symbol                     : Symbol * Symbol -> Renaming
    production                 : Production * Production -> Renaming
    'module                    : ModuleName * List(ImpSection) * Sections -> Module
    exports                    : Grammar -> Section
    hiddens                    : Grammar -> Section
    unparameterized            : ModuleId -> ModuleName
    parameterized              : ModuleId * Symbols -> ModuleName
    'id                        : ModuleName -> Attribute
    imports                    : Imports -> ImpSection
    imp-section                : ImpSection -> Grammar
    'module                    : ModuleName -> Import
    renamed-module             : ModuleName * Renamings -> Import
    lexical-syntax             : Productions -> Grammar
    context-free-syntax        : Productions -> Grammar
    variables                  : Productions -> Grammar
    lexical-variables          : Productions -> Grammar
    cf                         : Symbol -> Symbol
    lex                        : Symbol -> Symbol
    varsym                     : Symbol -> Symbol
    layout                     : Symbol
    empty-grammar              : Grammar
    conc-grammars              : Grammar * Grammar -> Grammar
    present                    : IntCon -> OptExp
    absent                     : OptExp
    real-con                   : IntCon * NatCon * OptExp -> RealCon
    natural                    : NatCon -> IntCon
    positive                   : NatCon -> IntCon
    negative                   : NatCon -> IntCon
    quoted                     : StrCon -> AFun
    unquoted                   : IdCon -> AFun
    int                        : IntCon -> ATerm
    real                       : RealCon -> ATerm
    fun                        : AFun -> ATerm
    appl                       : AFun * List(ATerm) -> ATerm
    placeholder                : ATerm -> ATerm
    list                       : List(ATerm) -> ATerm
    annotated                  : ATerm * Annotation -> ATerm
    default                    : List(ATerm) -> Annotation
    default                    : ATerm -> ATermAttribute
    term                       : ATermAttribute -> Attribute
    attrs                      : List(Attribute) -> Attributes
    no-attrs                   : Attributes
    prod                       : Symbols * Symbol * Attributes -> Production
    syntax                     : Productions -> Grammar
    start                      : Symbol
    file-start                 : Symbol
    lexical-priorities         : Priorities -> Grammar
    context-free-priorities    : Priorities -> Grammar
    lexical-restrictions       : Restrictions -> Grammar
    context-free-restrictions  : Restrictions -> Grammar
    definition                 : Definition -> SDF


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SingleQuotedStrChar"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SingleQuotedStrCon"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sort"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NumChar"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ShortChar"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleWord"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleId"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Comment"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IdCon"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrChar"]
    )

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrCon"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NatCon"]
    )


rules


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sort"]
    )


rules

  smart-aliases(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"aliases") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Aliases"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "aliases")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-alias(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"alias") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"alias") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "alias")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Alias"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Alias"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Aliases"]
    )


rules

  smart-char-class(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"char-class") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "char-class")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookahead"]
      )
    ; id

  smart-seq(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"seq") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"seq") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "seq")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookahead"]
      )
    ; id

  smart-single(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"single") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookahead"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "single")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
      )
    ; id

  smart-alt(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"alt") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"alt") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "alt")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
    )

  smart-list(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"list") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookahead"]]
                                                                                                                     ]]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "list")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
      )
    ; id

  smart-follow(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"follow") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"follow") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "follow")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Restriction"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Restriction"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Restrictions"]
    )

  smart-restrictions(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"restrictions") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Restrictions"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "restrictions")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-reject(|) =
    <prim("SUGARJ_unsafe_build", "reject")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attribute"]
      )
    ; id

  smart-prefer(|) =
    <prim("SUGARJ_unsafe_build", "prefer")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attribute"]
      )
    ; id

  smart-avoid(|) =
    <prim("SUGARJ_unsafe_build", "avoid")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attribute"]
      )
    ; id


rules


rules

  smart-quoted(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"quoted") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrCon"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "quoted")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Label"]
      )
    ; id

  smart-unquoted(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"unquoted") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IdCon"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "unquoted")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Label"]
      )
    ; id

  smart-label(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"label") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Label"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"label") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "label")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id


rules

  smart-unquoted-fun(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"unquoted-fun") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IdCon"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "unquoted-fun")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FunctionName"]
      )
    ; id

  smart-quoted-fun(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"quoted-fun") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrCon"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "quoted-fun")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FunctionName"]
      )
    ; id


rules

  smart-lit(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"lit") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrCon"]
                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "lit")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-ci-lit(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ci-lit") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SingleQuotedStrCon"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "ci-lit")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-prefix-fun(|arg1, arg2, arg3, arg4) =
    where(<(has-sort <+ log-mismatching-sort-error(|"prefix-fun") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FunctionName"]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"prefix-fun") ; fail)> ( arg2
                                                                             , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]]
                                                                                                                             ]]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"prefix-fun") ; fail)> ( arg3
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                             ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"prefix-fun") ; fail)> ( arg4
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attributes"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "prefix-fun")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Production"]
      )
    ; id


rules

  smart-kernel-start-symbols(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"kernel-start-symbols") ; fail)> ( arg1
                                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]
                                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "kernel-start-symbols")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-lexical-start-symbols(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"lexical-start-symbols") ; fail)> ( arg1
                                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]
                                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "lexical-start-symbols")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-context-free-start-symbols(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"context-free-start-symbols") ; fail)> ( arg1
                                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]
                                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "context-free-start-symbols")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id


rules

  smart-sort(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"sort") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sort"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "sort")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-parameterized-sort(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"parameterized-sort") ; fail)> ( arg1
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sort"]
                                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"parameterized-sort") ; fail)> ( arg2
                                                                                     , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]]
                                                                                                                                     ]]
                                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "parameterized-sort")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-sorts(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"sorts") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "sorts")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id


rules

  smart-numeric(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"numeric") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NumChar"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "numeric")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]
      )
    ; id

  smart-short(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"short") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ShortChar"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "short")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]
      )
    ; id

  smart-top(|) =
    <prim("SUGARJ_unsafe_build", "top")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]
      )
    ; id

  smart-eof(|) =
    <prim("SUGARJ_unsafe_build", "eof")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]
      )
    ; id

  smart-bot(|) =
    <prim("SUGARJ_unsafe_build", "bot")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]
      )
    ; id

  smart-label_start(|) =
    <prim("SUGARJ_unsafe_build", "label_start")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]
      )
    ; id


rules

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRange"]
    )

  smart-range(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"range") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"range") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "range")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRange"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRange"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRanges"]
    )

  smart-conc(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"conc") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRanges"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"conc") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRanges"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "conc")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRanges"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRanges"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRanges"]
    )

  smart-absent(|) =
    <prim("SUGARJ_unsafe_build", "absent")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OptCharRanges"]
      )
    ; id

  smart-present(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"present") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRanges"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "present")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OptCharRanges"]
      )
    ; id

  smart-simple-charclass(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"simple-charclass") ; fail)> ( arg1
                                                                                 , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OptCharRanges"]
                                                                                 ))
    ; <prim("SUGARJ_unsafe_build", "simple-charclass")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
      )
    ; id

  smart-comp(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"comp") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "comp")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
      )
    ; id

  smart-diff(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"diff") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"diff") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "diff")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
      )
    ; id

  smart-isect(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"isect") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"isect") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "isect")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
      )
    ; id

  smart-union(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"union") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"union") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "union")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
    )


rules

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
    )


rules

  smart-char-class(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"char-class") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "char-class")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id


rules

  smart-left(|) =
    <prim("SUGARJ_unsafe_build", "left")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]
      )
    ; id

  smart-right(|) =
    <prim("SUGARJ_unsafe_build", "right")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]
      )
    ; id

  smart-non-assoc(|) =
    <prim("SUGARJ_unsafe_build", "non-assoc")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]
      )
    ; id

  smart-assoc(|) =
    <prim("SUGARJ_unsafe_build", "assoc")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]
      )
    ; id

  smart-bracket(|) =
    <prim("SUGARJ_unsafe_build", "bracket")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attribute"]
      )
    ; id

  smart-assoc(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"assoc") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "assoc")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attribute"]
      )
    ; id

  smart-default(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"default") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NatCon"]]
                                                                                                                        ]]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "default")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArgumentIndicator"]
      )
    ; id

  smart-with-arguments(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"with-arguments") ; fail)> ( arg1
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"with-arguments") ; fail)> ( arg2
                                                                                 , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArgumentIndicator"]
                                                                                 ))
    ; <prim("SUGARJ_unsafe_build", "with-arguments")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]
      )
    ; id

  smart-non-transitive(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"non-transitive") ; fail)> ( arg1
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "non-transitive")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]
      )
    ; id

  smart-simple-group(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"simple-group") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Production"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "simple-group")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]
      )
    ; id

  smart-prods-group(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"prods-group") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Productions"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "prods-group")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]
      )
    ; id

  smart-assoc-group(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"assoc-group") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]
                                                                            ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"assoc-group") ; fail)> ( arg2
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Productions"]
                                                                              ))
    ; <prim("SUGARJ_unsafe_build", "assoc-group")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]
      )
    ; id

  smart-chain(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"chain") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]]
                                                                                                                      ]]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "chain")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Priority"]
      )
    ; id

  smart-assoc(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"assoc") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"assoc") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]
                                                                        ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"assoc") ; fail)> ( arg3
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "assoc")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Priority"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Priority"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Priorities"]
    )

  smart-priorities(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"priorities") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Priorities"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "priorities")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id


rules

  smart-lifting(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"lifting") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "lifting")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id


rules

  smart-empty(|) =
    <prim("SUGARJ_unsafe_build", "empty")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-seq(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"seq") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"seq") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]]
                                                                                                                      ]]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "seq")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-opt(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"opt") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "opt")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-iter(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"iter") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "iter")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-iter-star(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"iter-star") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "iter-star")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-iter-sep(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"iter-sep") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"iter-sep") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "iter-sep")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-iter-star-sep(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"iter-star-sep") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"iter-star-sep") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "iter-star-sep")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-tuple(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"tuple") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                      ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"tuple") ; fail)> ( arg2
                                                                        , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]]
                                                                                                                        ]]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "tuple")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-func(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"func") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"func") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "func")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-alt(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"alt") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                    ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"alt") ; fail)> ( arg2
                                                                      , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "alt")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-strategy(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"strategy") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"strategy") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "strategy")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id


rules

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
    )


rules

  smart-renamings(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"renamings") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Renaming"]]
                                                                                                                          ]]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "renamings")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Renamings"]
      )
    ; id

  smart-symbol(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"symbol") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"symbol") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "symbol")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Renaming"]
      )
    ; id

  smart-production(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"production") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Production"]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"production") ; fail)> ( arg2
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Production"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "production")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Renaming"]
      )
    ; id


rules

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Module"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Definition"]
    )

  smart-module(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"module") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"module") ; fail)> ( arg2
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImpSection"]]
                                                                                                                         ]]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"module") ; fail)> ( arg3
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sections"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "module")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Module"]
      )
    ; id

  smart-exports(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"exports") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "exports")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Section"]
      )
    ; id

  smart-hiddens(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"hiddens") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "hiddens")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Section"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Section"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sections"]
    )

  smart-unparameterized(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"unparameterized") ; fail)> ( arg1
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleId"]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "unparameterized")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
      )
    ; id

  smart-parameterized(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"parameterized") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleId"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"parameterized") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "parameterized")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
      )
    ; id

  smart-id(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"id") ; fail)> ( arg1
                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "id")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attribute"]
      )
    ; id

  smart-imports(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"imports") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Imports"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "imports")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImpSection"]
      )
    ; id

  smart-imp-section(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"imp-section") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImpSection"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "imp-section")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Import"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Imports"]
    )

  smart-module(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"module") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "module")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Import"]
      )
    ; id

  smart-renamed-module(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"renamed-module") ; fail)> ( arg1
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
                                                                               ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"renamed-module") ; fail)> ( arg2
                                                                                 , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Renamings"]
                                                                                 ))
    ; <prim("SUGARJ_unsafe_build", "renamed-module")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Import"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Import"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Import"]
    )


rules

  smart-lexical-syntax(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"lexical-syntax") ; fail)> ( arg1
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Productions"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "lexical-syntax")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-context-free-syntax(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"context-free-syntax") ; fail)> ( arg1
                                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Productions"]
                                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "context-free-syntax")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-variables(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"variables") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Productions"]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "variables")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-lexical-variables(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"lexical-variables") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Productions"]
                                                                                  ))
    ; <prim("SUGARJ_unsafe_build", "lexical-variables")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-cf(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"cf") ; fail)> ( arg1
                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "cf")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-lex(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"lex") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "lex")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-varsym(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"varsym") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "varsym")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-layout(|) =
    <prim("SUGARJ_unsafe_build", "layout")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id


rules

  smart-empty-grammar(|) =
    <prim("SUGARJ_unsafe_build", "empty-grammar")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-conc-grammars(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"conc-grammars") ; fail)> ( arg1
                                                                              , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
                                                                              ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"conc-grammars") ; fail)> ( arg2
                                                                                , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
                                                                                ))
    ; <prim("SUGARJ_unsafe_build", "conc-grammars")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
    )


rules

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]
    )


rules

  smart-present(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"present") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntCon"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "present")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OptExp"]
      )
    ; id

  smart-absent(|) =
    <prim("SUGARJ_unsafe_build", "absent")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OptExp"]
      )
    ; id

  smart-real-con(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"real-con") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntCon"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"real-con") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NatCon"]
                                                                           ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"real-con") ; fail)> ( arg3
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OptExp"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "real-con")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RealCon"]
      )
    ; id


rules

  smart-natural(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"natural") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NatCon"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "natural")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntCon"]
      )
    ; id

  smart-positive(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"positive") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NatCon"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "positive")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntCon"]
      )
    ; id

  smart-negative(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"negative") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NatCon"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "negative")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntCon"]
      )
    ; id


rules

  smart-quoted(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"quoted") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrCon"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "quoted")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AFun"]
      )
    ; id

  smart-unquoted(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"unquoted") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IdCon"]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "unquoted")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AFun"]
      )
    ; id


rules

  smart-int(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"int") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntCon"]
                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "int")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
      )
    ; id

  smart-real(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"real") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RealCon"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "real")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
      )
    ; id

  smart-fun(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"fun") ; fail)> ( arg1
                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AFun"]
                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "fun")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
      )
    ; id

  smart-appl(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"appl") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AFun"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"appl") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]]
                                                                                                                       ]]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "appl")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
      )
    ; id

  smart-placeholder(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"placeholder") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "placeholder")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
      )
    ; id

  smart-list(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"list") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]]
                                                                                                                     ]]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "list")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
      )
    ; id

  smart-annotated(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"annotated") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
                                                                          ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"annotated") ; fail)> ( arg2
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Annotation"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "annotated")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
      )
    ; id


rules

  smart-default(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"default") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]]
                                                                                                                        ]]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "default")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Annotation"]
      )
    ; id


rules

  smart-default(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"default") ; fail)> ( arg1
                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "default")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATermAttribute"]
      )
    ; id

  smart-term(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"term") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATermAttribute"]
                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "term")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attribute"]
      )
    ; id

  smart-attrs(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"attrs") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attribute"]]
                                                                                                                      ]]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "attrs")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attributes"]
      )
    ; id

  smart-no-attrs(|) =
    <prim("SUGARJ_unsafe_build", "no-attrs")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attributes"]
      )
    ; id

  smart-prod(|arg1, arg2, arg3) =
    where(<(has-sort <+ log-mismatching-sort-error(|"prod") ; fail)> ( arg1
                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]
                                                                     ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"prod") ; fail)> ( arg2
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
                                                                       ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"prod") ; fail)> ( arg3
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attributes"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "prod")> [arg1, arg2, arg3]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Production"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Production"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Productions"]
    )

  smart-syntax(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"syntax") ; fail)> ( arg1
                                                                       , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Productions"]
                                                                       ))
    ; <prim("SUGARJ_unsafe_build", "syntax")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id


rules

  smart-start(|) =
    <prim("SUGARJ_unsafe_build", "start")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-file-start(|) =
    <prim("SUGARJ_unsafe_build", "file-start")> []
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]
      )
    ; id

  smart-lexical-priorities(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"lexical-priorities") ; fail)> ( arg1
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Priorities"]
                                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "lexical-priorities")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-context-free-priorities(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"context-free-priorities") ; fail)> ( arg1
                                                                                        , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Priorities"]
                                                                                        ))
    ; <prim("SUGARJ_unsafe_build", "context-free-priorities")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-lexical-restrictions(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"lexical-restrictions") ; fail)> ( arg1
                                                                                     , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Restrictions"]
                                                                                     ))
    ; <prim("SUGARJ_unsafe_build", "lexical-restrictions")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-context-free-restrictions(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"context-free-restrictions") ; fail)> ( arg1
                                                                                          , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Restrictions"]
                                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "context-free-restrictions")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
      )
    ; id

  smart-definition(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"definition") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Definition"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "definition")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SDF"]
      )
    ; id


rules


rules

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Label"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATermAttribute"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATermAttribute"]
    )


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2SDF"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SDF"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Aliases"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Aliases"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Alias"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Alias"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Restrictions"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Restrictions"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Restriction"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Restriction"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Label"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Label"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2FunctionName"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["FunctionName"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2SingleQuotedStrCon"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SingleQuotedStrCon"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2SingleQuotedStrChar"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SingleQuotedStrChar"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Sort"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sort"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2OptCharRanges"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OptCharRanges"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2CharRange"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRange"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Character"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Character"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2ShortChar"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ShortChar"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2NumChar"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NumChar"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Priorities"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Priorities"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Priority"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Priority"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2ArgumentIndicator"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ArgumentIndicator"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Associativity"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Associativity"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Import"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Import"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Imports"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Imports"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2ImpSection"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ImpSection"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2ModuleName"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Sections"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sections"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Section"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Section"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Module"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Module"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Definition"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Definition"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2ModuleId"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleId"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2ModuleWord"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleWord"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Renaming"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Renaming"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Renamings"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Renamings"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Productions"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Productions"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Production"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Production"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Attributes"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attributes"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Attribute"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Attribute"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2ATermAttribute"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATermAttribute"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Symbols"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbols"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Annotation"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Annotation"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2ATerm"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2AFun"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["AFun"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2IdCon"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IdCon"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2StrCon"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrCon"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2StrChar"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrChar"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2RealCon"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["RealCon"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2OptExp"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["OptExp"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2IntCon"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["IntCon"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2NatCon"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["NatCon"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Lookahead"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookahead"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Grammar"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Symbol"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Symbol"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Group"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Group"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2CharRanges"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharRanges"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2CharClass"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["CharClass"]


unrename-sort(|) =
  (where(renamed := <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Lookaheads"])
   ; ?renamed)
  ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Lookaheads"]
