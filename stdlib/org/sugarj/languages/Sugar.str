module org/sugarj/languages/Sugar

imports
  org/sugarj/transformations/typesmart/Runtime
  org/sugarj/languages/Stratego


signature
  constructors
    grammar-elem        : Grammar -> SugarDefElem
    transformation-elem : Transformation -> SugarDefElem
    Desugarings         : List(Desugaring) -> Transformation
    Analyses            : List(Analysis) -> Transformation
    PureDesugaring      : StrategoStrategy -> Desugaring
    InjectDesugaring    : StrategoStrategy * Sdf2Symbol * Sdf2Symbol * Sdf2Attributes -> Desugaring


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoKeyword"]
    )


rules

  is-lexical-sort(|) =
    equal(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoId"]
    )


rules

  smart-grammar-elem(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"grammar-elem") ; fail)> ( arg1
                                                                             , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
                                                                             ))
    ; <prim("SUGARJ_unsafe_build", "grammar-elem")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarDefElem"]
      )
    ; id

  smart-transformation-elem(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"transformation-elem") ; fail)> ( arg1
                                                                                    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Transformation"]
                                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "transformation-elem")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["SugarDefElem"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Grammar"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Grammar"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoDecl"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Transformation"]
    )

  smart-Desugarings(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Desugarings") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Desugaring"]]
                                                                                                                            ]]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "Desugarings")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Transformation"]
      )
    ; id

  smart-Analyses(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Analyses") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Analysis"]]
                                                                                                                         ]]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Analyses")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Transformation"]
      )
    ; id

  smart-PureDesugaring(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"PureDesugaring") ; fail)> ( arg1
                                                                               , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoStrategy"]
                                                                               ))
    ; <prim("SUGARJ_unsafe_build", "PureDesugaring")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Desugaring"]
      )
    ; id

  smart-InjectDesugaring(|arg1, arg2, arg3, arg4) =
    where(<(has-sort <+ log-mismatching-sort-error(|"InjectDesugaring") ; fail)> ( arg1
                                                                                 , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoStrategy"]
                                                                                 ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"InjectDesugaring") ; fail)> ( arg2
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Symbol"]
                                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"InjectDesugaring") ; fail)> ( arg3
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Symbol"]
                                                                                   ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"InjectDesugaring") ; fail)> ( arg4
                                                                                   , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Sdf2Attributes"]
                                                                                   ))
    ; <prim("SUGARJ_unsafe_build", "InjectDesugaring")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Desugaring"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoStrategy"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["Analysis"]
    )
