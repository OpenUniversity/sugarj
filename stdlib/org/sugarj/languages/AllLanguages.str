module org/sugarj/langauges/AllLanguages

imports
  org/sugarj/transformations/typesmart/Runtime
  org/sugarj/languages/Stratego


signature
  constructors
    ToModelTerm                : ATerm -> ModelTerm
    TransformationDef          : DirectTransformation * List(ModelTransformation) -> TransformationDef
    Strategies                 : List(StrategoDef) -> ModelTransformation
    Signature                  : List(StrategoSdecl) -> ModelTransformation
    Rules                      : List(StrategoDef) -> ModelTransformation
    Overlays                   : List(StrategoOverlay) -> ModelTransformation
    TransApp                   : TransformationExpr * TransformationExpr -> TransformationAppExpr
    grammar-elem               : Grammar -> SugarDefElem
    transformation-elem        : Transformation -> SugarDefElem
    'sorts                     : Sdf2Symbols -> Grammar
    syntax                     : Sdf2Productions -> Grammar
    lexical-syntax             : Sdf2Productions -> Grammar
    context-free-syntax        : Sdf2Productions -> Grammar
    variables                  : Sdf2Productions -> Grammar
    lexical-variables          : Sdf2Productions -> Grammar
    priorities                 : Sdf2Priorities -> Grammar
    lexical-priorities         : Sdf2Priorities -> Grammar
    context-free-priorities    : Sdf2Priorities -> Grammar
    restrictions               : Sdf2Restrictions -> Grammar
    lexical-restrictions       : Sdf2Restrictions -> Grammar
    context-free-restrictions  : Sdf2Restrictions -> Grammar
    aliases                    : Sdf2Aliases -> Grammar
    Desugarings                : List(Desugaring) -> Transformation
    Analyses                   : List(Analysis) -> Transformation
    PureDesugaring             : StrategoStrategy -> Desugaring
    InjectDesugaring           : StrategoStrategy * Sdf2Symbol * Sdf2Symbol * Sdf2Attributes -> Desugaring
    Refactorings               : SectionName * List(RefactoringRule) -> Section
    PPTable                    : StrategoCall -> RefactoringRule
    PrettyPrint                : StrategoCall -> RefactoringRule
    Refactoring                : List(SemanticNode) * String * StrategoCall * List(BuilderOption) -> RefactoringRule
    Builders                   : SectionName * List(BuilderRule) -> Section
    Builders                   : SectionName * List(BuilderRule) -> Section
    SemanticObserver           : StrategoCall -> BuilderRule
    Builder                    : String * StrategoCall * List(BuilderOption) -> BuilderRule
    BuilderCaption             : PropertyValue -> BuilderRule
    OpenEditor                 : BuilderOption
    RealTime                   : BuilderOption
    Persistent                 : BuilderOption
    Meta                       : BuilderOption
    Cursor                     : BuilderOption
    Source                     : BuilderOption
    Completions                : SectionName * List(CompletionRule) -> Section
    CompletionProposer         : StrategoCall -> CompletionRule
    IdentifierLexical          : PropertyValue -> CompletionRule
    IdentifierLexical          : PropertyValue -> CompletionRule
    CompletionKeyword          : PropertyValue * CompletionAnno -> CompletionRule
    CompletionTemplate         : CompletionPart * List(CompletionPart) * CompletionAnno -> CompletionRule
    CompletionTemplate         : Id * List(CompletionPart) * CompletionAnno -> CompletionRule
    CompletionTemplateWithSort : Sort * CompletionPart * List(CompletionPart) * CompletionAnno -> CompletionRule
    CompletionTemplate         : PropertyValue * List(CompletionPart) * CompletionAnno -> CompletionRule
    CompletionTemplateWithSort : Sort * PropertyValue * List(CompletionPart) * CompletionAnno -> CompletionRule
    CompletionTrigger          : PropertyValue * CompletionAnno -> CompletionRule
    Placeholder                : Placeholder -> CompletionPart
    None                       : CompletionAnno
    Disable                    : CompletionAnno
    Disable                    : CompletionAnno
    Blank                      : CompletionAnno
    References                 : SectionName * List(ReferenceRule) -> Section
    ReferenceHoverRule         : SemanticNode * StrategoCall * StrategoCall -> ReferenceRule
    ReferenceRule              : SemanticNode * StrategoCall -> ReferenceRule
    HoverRule                  : SemanticNode * StrategoCall -> ReferenceRule
    OccurrenceRule             : SemanticNode * StrategoCall -> ReferenceRule
    Colorer                    : SectionName * List(ColorRule) -> Section
    ColorRuleAll               : ColorNode * Attribute -> ColorRule
    ColorRuleAll               : ColorNode * Attribute -> ColorRule
    ColorRule                  : ColorNode * Attribute -> ColorRule
    ColorRuleAllNamed          : ColorNode * String * Attribute -> ColorRule
    ColorRuleAllNamed          : ColorNode * String * Attribute -> ColorRule
    ColorRuleNamed             : ColorNode * String * Attribute -> ColorRule
    Attribute                  : Color * MaybeColor * Font -> Attribute
    AttributeRef               : AttributeId -> Attribute
    Token                      : TokenKindName -> ColorNode
    Literal                    : Id -> ColorNode
    TK_IDENTIFIER              : TokenKindName
    TK_NUMBER                  : TokenKindName
    TK_LAYOUT                  : TokenKindName
    TK_STRING                  : TokenKindName
    TK_KEYWORD                 : TokenKindName
    TK_OPERATOR                : TokenKindName
    TK_VAR                     : TokenKindName
    TK_ERROR                   : TokenKindName
    TK_UNKNOWN                 : TokenKindName
    NORMAL                     : Font
    BOLD                       : Font
    ITALIC                     : Font
    BOLD_ITALIC                : Font
    BOLD_ITALIC                : Font
    ColorDefault               : Color
    ColorRGB                   : Int * Int * Int -> Color
    NoColor                    : NoColor
    ColorDef                   : AttributeId * Attribute -> ColorRule
    Outliner                   : SectionName * List(OutlineRule) -> Section
    OutlineRule                : Node -> OutlineRule
    Folding                    : SectionName * List(FoldingRule) -> Section
    FoldRule                   : Node * FoldingAnno -> FoldingRule
    FoldRuleAll                : Node * FoldingAnno -> FoldingRule
    Disable                    : FoldingAnno
    Disable                    : FoldingAnno
    Folded                     : FoldingAnno
    None                       : FoldingAnno
    SemanticProvider           : PropertyValue -> RefactoringRule
    SemanticProvider           : PropertyValue -> RefactoringRule
    OnSave                     : StrategoCall * OnSaveAnno -> RefactoringRule
    SemanticProvider           : PropertyValue -> BuilderRule
    SemanticProvider           : PropertyValue -> BuilderRule
    OnSave                     : StrategoCall * OnSaveAnno -> BuilderRule
    SemanticProvider           : PropertyValue -> CompletionRule
    SemanticProvider           : PropertyValue -> CompletionRule
    OnSave                     : StrategoCall * OnSaveAnno -> CompletionRule
    SemanticProvider           : PropertyValue -> ReferenceRule
    SemanticProvider           : PropertyValue -> ReferenceRule
    OnSave                     : StrategoCall * OnSaveAnno -> ReferenceRule
    Strategy                   : StrategoId -> StrategoCall
    Attribute                  : StrategoId -> StrategoCall
    None                       : OnSaveAnno
    Language                   : SectionName * List(LanguageProperty) -> Section
    Values                     : List(PropertyValue) -> PropertyValues
    LanguageName               : PropertyValue -> LanguageProperty
    LanguageId                 : PropertyValue -> LanguageProperty
    Extensions                 : PropertyValues -> LanguageProperty
    Description                : PropertyValue -> LanguageProperty
    Table                      : PropertyValue -> LanguageProperty
    TableProvider              : StrategoCall -> LanguageProperty
    StartSymbols               : List(Sort) -> LanguageProperty
    StartSymbols               : PropertyValues -> LanguageProperty
    URL                        : URL -> LanguageProperty
    Extends                    : PropertyValues -> LanguageProperty
    Aliases                    : PropertyValues -> LanguageProperty
    UnmanagedTablePrefix       : Id -> LanguageProperty
    LineCommentPrefix          : PropertyValue -> LanguageProperty
    BlockCommentDefs           : BlockCommentDef -> LanguageProperty
    FenceDefs                  : List(FenceDef) -> LanguageProperty
    IndentDefs                 : List(IndentDef) -> LanguageProperty
    IdentifierLexical          : PropertyValue -> LanguageProperty
    BlockCommentDef            : PropertyValue * PropertyValue * PropertyValue -> BlockCommentDef
    BlockCommentDef            : PropertyValue * NoContinuation * PropertyValue -> BlockCommentDef
    NoContinuation             : NoContinuation
    FenceDef                   : PropertyValue * PropertyValue -> FenceDef
    IndentDef                  : PropertyValue -> IndentDef
    Sort                       : Id -> Sort
    ListSort                   : Id -> Sort
    String                     : STRING -> String
    ConstructorOnly            : ConstructorId -> Constructor
    Constructor                : Id -> ConstructorId
    SortAndConstructor         : Sort * ConstructorId -> Node
    Module                     : ModuleName * Imports * List(Section) -> Module
    Imports                    : List(Import) -> Imports
    NoImports                  : Imports
    Import                     : ModuleName -> Import
    ImportRenamed              : ModuleName * Id -> Import
    OverlayNoArgs              : Id * Term -> Overlay
    Overlay                    : Id * List(Id) * Term -> Overlay
    DynRuleScope               : ScopeLabels * Strategy -> Strategy
    ScopeLabels                : Term -> ScopeLabels
    GenDynRules                : List(DynRuleDef) -> Strategy
    AddScopeLabel              : Id * Term -> DynRuleDef
    UndefineDynRule            : DynRuleId * Term -> DynRuleDef
    SetDynRule                 : DynRuleId * Rule -> DynRuleDef
    AddDynRule                 : DynRuleId * Rule -> DynRuleDef
    SetDynRuleMatch            : DynRuleId * Term -> DynRuleDef
    DynRuleAssign              : DynRuleId * Term -> DynRuleDef
    DynRuleAssignAdd           : DynRuleId * Term -> DynRuleDef
    SetDynRuleDepends          : DynRuleId * Rule * Term -> DynRuleDef
    LabeledDynRuleId           : RuleDec * Term -> DynRuleId
    AddLabelDynRuleId          : RuleDec * Term -> DynRuleId
    DynRuleId                  : RuleDec -> DynRuleId
    LabeledDynRuleScopeId      : Id * Term -> DynRuleScopeId
    DynRuleScopeId             : Id -> DynRuleScopeId
    RDecNoArgs                 : Id -> RuleDec
    RDec                       : Id * List(Typedid) -> RuleDec
    RDecT                      : Id * List(Typedid) * List(Typedid) -> RuleDec
    RuleNames                  : Term -> RuleNames
    DynRuleIntersectFix        : RuleNames * Strategy -> Strategy
    DynRuleUnionFix            : RuleNames * Strategy -> Strategy
    DynRuleUnionFix            : RuleNames * Strategy -> Strategy
    DynRuleIntersectUnionFix   : RuleNames * RuleNames * Strategy -> Strategy
    DynRuleIntersectUnionFix   : RuleNames * RuleNames * Strategy -> Strategy
    DynRuleIntersect           : Strategy * RuleNames * Strategy -> Strategy
    DynRuleUnion               : Strategy * RuleNames * Strategy -> Strategy
    DynRuleIntersectUnion      : Strategy * RuleNames * RuleNames * Strategy -> Strategy
    BA                         : StrategyAngle * Term -> Strategy
    DynRuleIntersectFix        : RuleNames * Strategy -> Strategy
    AM                         : Strategy * Term -> Strategy
    DynRuleIntersect           : Strategy * RuleNames * Strategy -> Strategy
    DynRuleUnion               : Strategy * RuleNames * Strategy -> Strategy
    DynRuleIntersectUnion      : Strategy * RuleNames * RuleNames * Strategy -> Strategy
    Seq                        : Strategy * Strategy -> Strategy
    RDefNoArgs                 : Id * Rule -> RuleDef
    RDef                       : Id * List(Typedid) * Rule -> RuleDef
    RDefT                      : Id * List(Typedid) * List(Typedid) * Rule -> RuleDef
    RuleNoCond                 : Term * Term -> Rule
    Rule                       : Term * Term * Strategy -> Rule
    Rule                       : Term * Term * List(RuleCond) -> Rule
    WhereClause                : Strategy -> RuleCond
    WithClause                 : Strategy -> RuleCond
    SDefNoArgs                 : Id * Strategy -> StrategyDef
    SDef                       : Id * List(Typedid) * Strategy -> StrategyDef
    DefaultVarDec              : ID -> Typedid
    Call                       : SVar * List(Strategy) -> Strategy
    ScopeDefault               : Strategy -> Strategy
    BA                         : StrategyAngle * Term -> Strategy
    LChoice                    : Strategy * Strategy -> Strategy
    Rec                        : Id * Strategy -> Strategy
    Not                        : Strategy -> Strategy
    Where                      : Strategy -> Strategy
    With                       : Strategy -> Strategy
    Test                       : Strategy -> Strategy
    PrimNoArgs                 : String -> Strategy
    Prim                       : String * List(Term) -> Strategy
    StrCong                    : String -> Strategy
    IntCong                    : Int -> Strategy
    RealCong                   : Real -> Strategy
    CharCong                   : Char -> Strategy
    CongQ                      : String * List(Strategy) -> Strategy
    AnnoCong                   : Strategy * StrategyCurly -> Strategy
    StrategyCurly              : Strategy -> StrategyCurly
    EmptyTupleCong             : Strategy
    TupleCong                  : Strategy * List(Strategy) -> Strategy
    ListCongNoTail             : List(Strategy) -> Strategy
    ListCong                   : List(Strategy) * Strategy -> Strategy
    ExplodeCong                : Strategy * StrategyParen -> Strategy
    CallNoArgs                 : SVar -> Strategy
    LRule                      : Rule -> Strategy
    SRule                      : Rule -> Strategy
    Choice                     : Strategy * Strategy -> Strategy
    RChoice                    : Strategy * Strategy -> Strategy
    CondChoice                 : Strategy * Strategy * Strategy -> Strategy
    IfThen                     : Strategy * Strategy -> Strategy
    SwitchChoiceNoOtherwise    : Strategy * List(SwitchCase) -> Strategy
    SwitchChoice               : Strategy * List(SwitchCase) * Strategy -> Strategy
    SwitchCase                 : Strategy * Strategy -> SwitchCase
    AM                         : Strategy * Term -> Strategy
    Assign                     : Term * Term -> Strategy
    ListVar                    : LId -> LID
    Var                        : LID -> Var
    BuildDefaultPT             : PreTerm -> PreTerm
    BuildDefault               : Term -> Term
    Char                       : Char -> PreTerm
    AnnoList                   : PreTerm * List(Term) -> Term
    NoAnnoList                 : PreTerm -> Term
    App                        : Strategy * Term -> PreTerm
    App                        : Strategy * Term -> Term
    RootApp                    : StrategyAngle -> PreTerm
    RootApp                    : StrategyAngle -> Term
    Tuple                      : List(Term) -> PreTerm
    List                       : List(Term) -> PreTerm
    ListTail                   : List(Term) * Term -> PreTerm
    Explode                    : Term * Term -> PreTerm
    AnnoList                   : PreTerm * List(Term) -> Term
    As                         : Var * Term -> Term
    SortList                   : List(Sort) -> Sort
    SortListTl                 : List(Sort) * Sort -> Sort
    SortTuple                  : List(Sort) -> Sort
    Star                       : Kind
    StarStar                   : Kind
    Sorts                      : List(Sort) -> Sdecl
    Constructors               : List(Opdecl) -> Sdecl
    SortVar                    : LCID -> Sort
    SortNoArgs                 : UCID -> Sort
    Sort                       : Id * List(Sort) -> Sort
    OpDecl                     : Id * Type -> Opdecl
    OpDeclQ                    : String * Type -> Opdecl
    OpDeclInj                  : Type -> Opdecl
    ExtOpDecl                  : Id * Type -> Opdecl
    ExtOpDeclQ                 : String * Type -> Opdecl
    ExtOpDeclInj               : Type -> Opdecl
    ConstType                  : Sort -> ConstType
    FunType                    : List(ArgType) * RetType -> FunType
    Var                        : Id -> Var
    Wld                        : Wld
    Int                        : Int -> PreTerm
    Real                       : Real -> PreTerm
    Str                        : String -> PreTerm
    Op                         : Id * List(Term) -> PreTerm
    OpQ                        : String * List(Term) -> PreTerm
    Explode                    : Term * Term -> PreTerm
    Anno                       : PreTerm * PreTerm -> Term
    As                         : Var * Term -> Term
    As                         : Var * PreTerm -> PreTerm
    Explode                    : Term * Term -> PreTerm
    As                         : Var * Term -> Term
    SVar                       : Id -> SVar
    Let                        : List(Def) * Strategy -> Strategy
    CallT                      : SVar * List(Strategy) * List(Term) -> Strategy
    CallDynamic                : Term * List(Strategy) * List(Term) -> Strategy
    SDefT                      : Id * List(Typedid) * List(Typedid) * Strategy -> StrategyDef
    ExtSDefInl                 : Id * List(Typedid) * List(Typedid) * Strategy -> StrategyDef
    ExtSDef                    : Id * List(Typedid) * List(Typedid) -> StrategyDef
    VarDec                     : ID * Type -> Typedid
    ParenStrat                 : Strategy -> StrategyParen
    Fail                       : Strategy
    Id                         : Strategy
    Match                      : Term -> Strategy
    Build                      : Term -> Strategy
    Scope                      : List(ID) * Strategy -> Strategy
    Seq                        : Strategy * Strategy -> Strategy
    GuardedLChoice             : Strategy * StrategyMid * Strategy -> Strategy
    PrimT                      : String * List(Strategy) * List(Term) -> Strategy
    Some                       : Strategy -> Strategy
    One                        : Strategy -> Strategy
    All                        : Strategy -> Strategy
    Build                      : Term -> Strategy
    Match                      : Term -> Strategy
    Seq                        : Strategy * Strategy -> Strategy
    GuardedLChoice             : Strategy * StrategyMid * Strategy -> Strategy
    ImportTerm                 : ModName -> Strategy
    Module                     : ModName * List(Decl) -> Module
    Specification              : List(Decl) -> Module
    Imports                    : List(ImportModName) -> Decl
    Strategies                 : List(Def) -> Decl
    Signature                  : List(Sdecl) -> Decl
    Import                     : ModName -> ImportModName
    ImportWildcard             : ModName -> ImportModName
    Rules                      : List(Def) -> Decl
    Overlays                   : List(Overlay) -> Decl
    aliases                    : Aliases -> Grammar
    alias                      : Symbol * Symbol -> Alias
    char-class                 : CharClass -> Lookahead
    seq                        : CharClass * Lookaheads -> Lookahead
    single                     : Lookahead -> Lookaheads
    alt                        : Lookaheads * Lookaheads -> Lookaheads
    list                       : List(Lookahead) -> Lookaheads
    follow                     : Symbols * Lookaheads -> Restriction
    restrictions               : Restrictions -> Grammar
    reject                     : Attribute
    prefer                     : Attribute
    avoid                      : Attribute
    quoted                     : StrCon -> Label
    unquoted                   : IdCon -> Label
    label                      : Label * Symbol -> Symbol
    unquoted-fun               : IdCon -> FunctionName
    quoted-fun                 : StrCon -> FunctionName
    lit                        : StrCon -> Symbol
    ci-lit                     : SingleQuotedStrCon -> Symbol
    prefix-fun                 : FunctionName * List(Symbol) * Symbol * Attributes -> Production
    kernel-start-symbols       : Symbols -> Grammar
    lexical-start-symbols      : Symbols -> Grammar
    context-free-start-symbols : Symbols -> Grammar
    sort                       : Sort -> Symbol
    parameterized-sort         : Sort * List(Symbol) -> Symbol
    'sorts                     : Symbols -> Grammar
    numeric                    : NumChar -> Character
    short                      : ShortChar -> Character
    top                        : Character
    eof                        : Character
    bot                        : Character
    label_start                : Character
    range                      : Character * Character -> CharRange
    conc                       : CharRanges * CharRanges -> CharRanges
    absent                     : OptCharRanges
    present                    : CharRanges -> OptCharRanges
    simple-charclass           : OptCharRanges -> CharClass
    comp                       : CharClass -> CharClass
    diff                       : CharClass * CharClass -> CharClass
    isect                      : CharClass * CharClass -> CharClass
    union                      : CharClass * CharClass -> CharClass
    char-class                 : CharClass -> Symbol
    left                       : Associativity
    right                      : Associativity
    non-assoc                  : Associativity
    assoc                      : Associativity
    bracket                    : Attribute
    assoc                      : Associativity -> Attribute
    default                    : List(NatCon) -> ArgumentIndicator
    with-arguments             : Group * ArgumentIndicator -> Group
    non-transitive             : Group -> Group
    simple-group               : Production -> Group
    prods-group                : Productions -> Group
    assoc-group                : Associativity * Productions -> Group
    chain                      : List(Group) -> Priority
    assoc                      : Group * Associativity * Group -> Priority
    priorities                 : Priorities -> Grammar
    lifting                    : Symbol -> Symbol
    empty                      : Symbol
    seq                        : Symbol * List(Symbol) -> Symbol
    opt                        : Symbol -> Symbol
    iter                       : Symbol -> Symbol
    iter-star                  : Symbol -> Symbol
    iter-sep                   : Symbol * Symbol -> Symbol
    iter-star-sep              : Symbol * Symbol -> Symbol
    tuple                      : Symbol * List(Symbol) -> Symbol
    func                       : Symbols * Symbol -> Symbol
    alt                        : Symbol * Symbol -> Symbol
    strategy                   : Symbol * Symbol -> Symbol
    renamings                  : List(Renaming) -> Renamings
    symbol                     : Symbol * Symbol -> Renaming
    production                 : Production * Production -> Renaming
    'module                    : ModuleName * List(ImpSection) * Sections -> Module
    exports                    : Grammar -> Section
    hiddens                    : Grammar -> Section
    unparameterized            : ModuleId -> ModuleName
    parameterized              : ModuleId * Symbols -> ModuleName
    'id                        : ModuleName -> Attribute
    imports                    : Imports -> ImpSection
    imp-section                : ImpSection -> Grammar
    'module                    : ModuleName -> Import
    renamed-module             : ModuleName * Renamings -> Import
    lexical-syntax             : Productions -> Grammar
    context-free-syntax        : Productions -> Grammar
    variables                  : Productions -> Grammar
    lexical-variables          : Productions -> Grammar
    cf                         : Symbol -> Symbol
    lex                        : Symbol -> Symbol
    varsym                     : Symbol -> Symbol
    layout                     : Symbol
    empty-grammar              : Grammar
    conc-grammars              : Grammar * Grammar -> Grammar
    present                    : IntCon -> OptExp
    absent                     : OptExp
    real-con                   : IntCon * NatCon * OptExp -> RealCon
    natural                    : NatCon -> IntCon
    positive                   : NatCon -> IntCon
    negative                   : NatCon -> IntCon
    quoted                     : StrCon -> AFun
    unquoted                   : IdCon -> AFun
    int                        : IntCon -> ATerm
    real                       : RealCon -> ATerm
    fun                        : AFun -> ATerm
    appl                       : AFun * List(ATerm) -> ATerm
    placeholder                : ATerm -> ATerm
    list                       : List(ATerm) -> ATerm
    annotated                  : ATerm * Annotation -> ATerm
    default                    : List(ATerm) -> Annotation
    default                    : ATerm -> ATermAttribute
    term                       : ATermAttribute -> Attribute
    attrs                      : List(Attribute) -> Attributes
    no-attrs                   : Attributes
    prod                       : Symbols * Symbol * Attributes -> Production
    syntax                     : Productions -> Grammar
    start                      : Symbol
    file-start                 : Symbol
    lexical-priorities         : Priorities -> Grammar
    context-free-priorities    : Priorities -> Grammar
    lexical-restrictions       : Restrictions -> Grammar
    context-free-restrictions  : Restrictions -> Grammar
    definition                 : Definition -> SDF
    PlainDec                   : PlainDecHead * PlainBody -> ToplevelDeclaration
    PlainDec                   : JavaID * JavaID -> ToplevelDeclaration
    PlainDecHead               : List(AnnoOrSugarMod) * JavaId * Option(PlainExtension) -> PlainDecHead
    PlainBody                  : PlainContent -> PlainBody


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("StrategoKeyword"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("StrategoId"))


rules


rules


rules


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("Placeholder"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("PlaceholderChar"))


rules


rules


rules


rules


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("StrategoId"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("SemanticNode"))


rules


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("PropertyValue"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("URL"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("Id"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("IdStar"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("Int"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("STRING"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("StringChar"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("BACKSLASH"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("SectionName"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("FileName"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("ModuleName"))


rules


rules


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("Int"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("Real"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("String"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("StrChar"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("Char"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("CharChar"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("Id"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("ModName"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("ModNamePart"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("ModName"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("LId"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("Id"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("LCID"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("UCID"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("Id"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("LId"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("LCID"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("UCID"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("Keyword"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("SingleQuotedStrChar"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("SingleQuotedStrCon"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("Sort"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("NumChar"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("ShortChar"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("ModuleWord"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("ModuleId"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("Comment"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("IdCon"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("StrChar"))

  is-lexical-sort(|) =
    equal(|SortNoArgs("StrCon"))


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("NatCon"))


rules


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("Sort"))


rules


rules

  is-lexical-sort(|) =
    equal(|SortNoArgs("PlainContent"))


rules

  smart-ToModelTerm(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ToModelTerm") ; fail)> (arg1, SortNoArgs("ATerm")))
        ; ![SortNoArgs("ModelTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ToModelTerm")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TransformationDef(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"TransformationDef") ; fail)> (arg1, SortNoArgs("DirectTransformation")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"TransformationDef") ; fail)> ( arg2
                                                                                         , Sort(
                                                                                             "List"
                                                                                           , [SortNoArgs("ModelTransformation")]
                                                                                           )
                                                                                         )))
        ; ![SortNoArgs("TransformationDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TransformationDef")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Strategies(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"Strategies") ; fail)> ( arg1
                                                                                , Sort(
                                                                                    "List"
                                                                                  , [SortNoArgs("StrategoDef")]
                                                                                  )
                                                                                ))
         ; ![SortNoArgs("ModelTransformation")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"Strategies") ; fail)> ( arg1
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("Def")]
                                                                                    )
                                                                                  ))
           ; ![SortNoArgs("Decl")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Strategies")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Signature(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"Signature") ; fail)> ( arg1
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("StrategoSdecl")]
                                                                                 )
                                                                               ))
         ; ![SortNoArgs("ModelTransformation")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"Signature") ; fail)> ( arg1
                                                                                 , Sort(
                                                                                     "List"
                                                                                   , [SortNoArgs("Sdecl")]
                                                                                   )
                                                                                 ))
           ; ![SortNoArgs("Decl")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Signature")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Rules(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"Rules") ; fail)> ( arg1
                                                                           , Sort(
                                                                               "List"
                                                                             , [SortNoArgs("StrategoDef")]
                                                                             )
                                                                           ))
         ; ![SortNoArgs("ModelTransformation")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"Rules") ; fail)> ( arg1
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Def")]
                                                                               )
                                                                             ))
           ; ![SortNoArgs("Decl")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Rules")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Overlays(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"Overlays") ; fail)> ( arg1
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("StrategoOverlay")]
                                                                                )
                                                                              ))
         ; ![SortNoArgs("ModelTransformation")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"Overlays") ; fail)> ( arg1
                                                                                , Sort(
                                                                                    "List"
                                                                                  , [SortNoArgs("Overlay")]
                                                                                  )
                                                                                ))
           ; ![SortNoArgs("Decl")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Overlays")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TransApp(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"TransApp") ; fail)> (arg1, SortNoArgs("TransformationExpr")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"TransApp") ; fail)> (arg2, SortNoArgs("TransformationExpr"))))
        ; ![SortNoArgs("TransformationAppExpr")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TransApp")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-grammar-elem(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"grammar-elem") ; fail)> (arg1, SortNoArgs("Grammar")))
        ; ![SortNoArgs("SugarDefElem")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "grammar-elem")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-transformation-elem(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"transformation-elem") ; fail)> (arg1, SortNoArgs("Transformation")))
        ; ![SortNoArgs("SugarDefElem")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "transformation-elem")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-sorts(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"sorts") ; fail)> (arg1, SortNoArgs("Sdf2Symbols")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"sorts") ; fail)> (arg1, SortNoArgs("Symbols")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "sorts")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-syntax(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"syntax") ; fail)> (arg1, SortNoArgs("Sdf2Productions")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"syntax") ; fail)> (arg1, SortNoArgs("Productions")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "syntax")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-lexical-syntax(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"lexical-syntax") ; fail)> (arg1, SortNoArgs("Sdf2Productions")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"lexical-syntax") ; fail)> (arg1, SortNoArgs("Productions")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "lexical-syntax")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-context-free-syntax(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"context-free-syntax") ; fail)> (arg1, SortNoArgs("Sdf2Productions")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"context-free-syntax") ; fail)> (arg1, SortNoArgs("Productions")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "context-free-syntax")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-variables(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"variables") ; fail)> (arg1, SortNoArgs("Sdf2Productions")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"variables") ; fail)> (arg1, SortNoArgs("Productions")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "variables")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-lexical-variables(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"lexical-variables") ; fail)> (arg1, SortNoArgs("Sdf2Productions")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"lexical-variables") ; fail)> (arg1, SortNoArgs("Productions")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "lexical-variables")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-priorities(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"priorities") ; fail)> (arg1, SortNoArgs("Sdf2Priorities")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"priorities") ; fail)> (arg1, SortNoArgs("Priorities")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "priorities")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-lexical-priorities(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"lexical-priorities") ; fail)> (arg1, SortNoArgs("Sdf2Priorities")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"lexical-priorities") ; fail)> (arg1, SortNoArgs("Priorities")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "lexical-priorities")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-context-free-priorities(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"context-free-priorities") ; fail)> (arg1, SortNoArgs("Sdf2Priorities")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"context-free-priorities") ; fail)> (arg1, SortNoArgs("Priorities")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "context-free-priorities")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-restrictions(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"restrictions") ; fail)> (arg1, SortNoArgs("Sdf2Restrictions")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"restrictions") ; fail)> (arg1, SortNoArgs("Restrictions")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "restrictions")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-lexical-restrictions(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"lexical-restrictions") ; fail)> (arg1, SortNoArgs("Sdf2Restrictions")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"lexical-restrictions") ; fail)> (arg1, SortNoArgs("Restrictions")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "lexical-restrictions")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-context-free-restrictions(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"context-free-restrictions") ; fail)> (arg1, SortNoArgs("Sdf2Restrictions")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"context-free-restrictions") ; fail)> (arg1, SortNoArgs("Restrictions")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "context-free-restrictions")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-aliases(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"aliases") ; fail)> (arg1, SortNoArgs("Sdf2Aliases")))
         ; ![SortNoArgs("Grammar")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"aliases") ; fail)> (arg1, SortNoArgs("Aliases")))
           ; ![SortNoArgs("Grammar")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "aliases")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Desugarings(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Desugarings") ; fail)> ( arg1
                                                                                , Sort(
                                                                                    "List"
                                                                                  , [SortNoArgs("Desugaring")]
                                                                                  )
                                                                                ))
        ; ![SortNoArgs("Transformation")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Desugarings")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Analyses(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Analyses") ; fail)> ( arg1
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Analysis")]
                                                                               )
                                                                             ))
        ; ![SortNoArgs("Transformation")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Analyses")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-PureDesugaring(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"PureDesugaring") ; fail)> (arg1, SortNoArgs("StrategoStrategy")))
        ; ![SortNoArgs("Desugaring")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "PureDesugaring")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-InjectDesugaring(|arg1, arg2, arg3, arg4) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"InjectDesugaring") ; fail)> (arg1, SortNoArgs("StrategoStrategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"InjectDesugaring") ; fail)> (arg2, SortNoArgs("Sdf2Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"InjectDesugaring") ; fail)> (arg3, SortNoArgs("Sdf2Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"InjectDesugaring") ; fail)> (arg4, SortNoArgs("Sdf2Attributes"))))
        ; ![SortNoArgs("Desugaring")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "InjectDesugaring")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Refactorings(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Refactorings") ; fail)> (arg1, SortNoArgs("SectionName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Refactorings") ; fail)> ( arg2
                                                                                    , Sort(
                                                                                        "List"
                                                                                      , [SortNoArgs("RefactoringRule")]
                                                                                      )
                                                                                    )))
        ; ![SortNoArgs("Section")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Refactorings")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-PPTable(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"PPTable") ; fail)> (arg1, SortNoArgs("StrategoCall")))
        ; ![SortNoArgs("RefactoringRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "PPTable")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-PrettyPrint(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"PrettyPrint") ; fail)> (arg1, SortNoArgs("StrategoCall")))
        ; ![SortNoArgs("RefactoringRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "PrettyPrint")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Refactoring(|arg1, arg2, arg3, arg4) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Refactoring") ; fail)> ( arg1
                                                                                 , Sort(
                                                                                     "List"
                                                                                   , [SortNoArgs("SemanticNode")]
                                                                                   )
                                                                                 ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Refactoring") ; fail)> (arg2, SortNoArgs("String")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Refactoring") ; fail)> (arg3, SortNoArgs("StrategoCall")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Refactoring") ; fail)> ( arg4
                                                                                   , Sort(
                                                                                       "List"
                                                                                     , [SortNoArgs("BuilderOption")]
                                                                                     )
                                                                                   )))
        ; ![SortNoArgs("RefactoringRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Refactoring")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Builders(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"Builders") ; fail)> (arg1, SortNoArgs("SectionName")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"Builders") ; fail)> ( arg2
                                                                                 , Sort(
                                                                                     "List"
                                                                                   , [SortNoArgs("BuilderRule")]
                                                                                   )
                                                                                 )))
         ; ![SortNoArgs("Section")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"Builders") ; fail)> (arg1, SortNoArgs("SectionName")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"Builders") ; fail)> ( arg2
                                                                                   , Sort(
                                                                                       "List"
                                                                                     , [SortNoArgs("BuilderRule")]
                                                                                     )
                                                                                   )))
           ; ![SortNoArgs("Section")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Builders")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SemanticObserver(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"SemanticObserver") ; fail)> (arg1, SortNoArgs("StrategoCall")))
        ; ![SortNoArgs("BuilderRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SemanticObserver")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Builder(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Builder") ; fail)> (arg1, SortNoArgs("String")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Builder") ; fail)> (arg2, SortNoArgs("StrategoCall")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Builder") ; fail)> ( arg3
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("BuilderOption")]
                                                                                 )
                                                                               )))
        ; ![SortNoArgs("BuilderRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Builder")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-BuilderCaption(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"BuilderCaption") ; fail)> (arg1, SortNoArgs("PropertyValue")))
        ; ![SortNoArgs("BuilderRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "BuilderCaption")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-OpenEditor(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("BuilderOption")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "OpenEditor")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RealTime(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("BuilderOption")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RealTime")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Persistent(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("BuilderOption")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Persistent")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Meta(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("BuilderOption")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Meta")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Cursor(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("BuilderOption")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Cursor")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Source(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("BuilderOption")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Source")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Completions(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Completions") ; fail)> (arg1, SortNoArgs("SectionName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Completions") ; fail)> ( arg2
                                                                                   , Sort(
                                                                                       "List"
                                                                                     , [SortNoArgs("CompletionRule")]
                                                                                     )
                                                                                   )))
        ; ![SortNoArgs("Section")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Completions")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CompletionProposer(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"CompletionProposer") ; fail)> (arg1, SortNoArgs("StrategoCall")))
        ; ![SortNoArgs("CompletionRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CompletionProposer")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-IdentifierLexical(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"IdentifierLexical") ; fail)> (arg1, SortNoArgs("PropertyValue")))
         ; ![SortNoArgs("CompletionRule")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"IdentifierLexical") ; fail)> (arg1, SortNoArgs("PropertyValue")))
           ; ![SortNoArgs("CompletionRule")|<id>]
         )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"IdentifierLexical") ; fail)> (arg1, SortNoArgs("PropertyValue")))
           ; ![SortNoArgs("LanguageProperty")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "IdentifierLexical")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CompletionKeyword(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"CompletionKeyword") ; fail)> (arg1, SortNoArgs("PropertyValue")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionKeyword") ; fail)> (arg2, SortNoArgs("CompletionAnno"))))
        ; ![SortNoArgs("CompletionRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CompletionKeyword")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CompletionTemplate(|arg1, arg2, arg3) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplate") ; fail)> (arg1, SortNoArgs("CompletionPart")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplate") ; fail)> ( arg2
                                                                                           , Sort(
                                                                                               "List"
                                                                                             , [SortNoArgs("CompletionPart")]
                                                                                             )
                                                                                           ))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplate") ; fail)> (arg3, SortNoArgs("CompletionAnno"))))
         ; ![SortNoArgs("CompletionRule")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplate") ; fail)> (arg1, SortNoArgs("Id")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplate") ; fail)> ( arg2
                                                                                             , Sort(
                                                                                                 "List"
                                                                                               , [SortNoArgs("CompletionPart")]
                                                                                               )
                                                                                             ))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplate") ; fail)> (arg3, SortNoArgs("CompletionAnno"))))
           ; ![SortNoArgs("CompletionRule")|<id>]
         )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplate") ; fail)> (arg1, SortNoArgs("PropertyValue")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplate") ; fail)> ( arg2
                                                                                             , Sort(
                                                                                                 "List"
                                                                                               , [SortNoArgs("CompletionPart")]
                                                                                               )
                                                                                             ))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplate") ; fail)> (arg3, SortNoArgs("CompletionAnno"))))
           ; ![SortNoArgs("CompletionRule")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CompletionTemplate")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CompletionTemplateWithSort(|arg1, arg2, arg3, arg4) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplateWithSort") ; fail)> (arg1, SortNoArgs("Sort")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplateWithSort") ; fail)> (arg2, SortNoArgs("CompletionPart")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplateWithSort") ; fail)> ( arg3
                                                                                                   , Sort(
                                                                                                       "List"
                                                                                                     , [SortNoArgs("CompletionPart")]
                                                                                                     )
                                                                                                   ))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplateWithSort") ; fail)> (arg4, SortNoArgs("CompletionAnno"))))
         ; ![SortNoArgs("CompletionRule")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplateWithSort") ; fail)> (arg1, SortNoArgs("Sort")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplateWithSort") ; fail)> (arg2, SortNoArgs("PropertyValue")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplateWithSort") ; fail)> ( arg3
                                                                                                     , Sort(
                                                                                                         "List"
                                                                                                       , [SortNoArgs("CompletionPart")]
                                                                                                       )
                                                                                                     ))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTemplateWithSort") ; fail)> (arg4, SortNoArgs("CompletionAnno"))))
           ; ![SortNoArgs("CompletionRule")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CompletionTemplateWithSort")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CompletionTrigger(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTrigger") ; fail)> (arg1, SortNoArgs("PropertyValue")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CompletionTrigger") ; fail)> (arg2, SortNoArgs("CompletionAnno"))))
        ; ![SortNoArgs("CompletionRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CompletionTrigger")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Placeholder(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Placeholder") ; fail)> (arg1, SortNoArgs("Placeholder")))
        ; ![SortNoArgs("CompletionPart")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Placeholder")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-None(|) =
    ![]
    ; (try(
         id ; ![SortNoArgs("CompletionAnno")|<id>]
       )
       ; try(
           id ; ![SortNoArgs("FoldingAnno")|<id>]
         )
       ; try(
           id ; ![SortNoArgs("OnSaveAnno")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "None")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Disable(|) =
    ![]
    ; (try(
         id ; ![SortNoArgs("CompletionAnno")|<id>]
       )
       ; try(
           id ; ![SortNoArgs("CompletionAnno")|<id>]
         )
       ; try(
           id ; ![SortNoArgs("FoldingAnno")|<id>]
         )
       ; try(
           id ; ![SortNoArgs("FoldingAnno")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Disable")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Blank(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("CompletionAnno")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Blank")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-References(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"References") ; fail)> (arg1, SortNoArgs("SectionName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"References") ; fail)> ( arg2
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("ReferenceRule")]
                                                                                    )
                                                                                  )))
        ; ![SortNoArgs("Section")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "References")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ReferenceHoverRule(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ReferenceHoverRule") ; fail)> (arg1, SortNoArgs("SemanticNode")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ReferenceHoverRule") ; fail)> (arg2, SortNoArgs("StrategoCall")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ReferenceHoverRule") ; fail)> (arg3, SortNoArgs("StrategoCall"))))
        ; ![SortNoArgs("ReferenceRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ReferenceHoverRule")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ReferenceRule(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ReferenceRule") ; fail)> (arg1, SortNoArgs("SemanticNode")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ReferenceRule") ; fail)> (arg2, SortNoArgs("StrategoCall"))))
        ; ![SortNoArgs("ReferenceRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ReferenceRule")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-HoverRule(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"HoverRule") ; fail)> (arg1, SortNoArgs("SemanticNode")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"HoverRule") ; fail)> (arg2, SortNoArgs("StrategoCall"))))
        ; ![SortNoArgs("ReferenceRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "HoverRule")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-OccurrenceRule(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"OccurrenceRule") ; fail)> (arg1, SortNoArgs("SemanticNode")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"OccurrenceRule") ; fail)> (arg2, SortNoArgs("StrategoCall"))))
        ; ![SortNoArgs("ReferenceRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "OccurrenceRule")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Colorer(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Colorer") ; fail)> (arg1, SortNoArgs("SectionName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Colorer") ; fail)> ( arg2
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("ColorRule")]
                                                                                 )
                                                                               )))
        ; ![SortNoArgs("Section")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Colorer")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ColorRuleAll(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAll") ; fail)> (arg1, SortNoArgs("ColorNode")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAll") ; fail)> (arg2, SortNoArgs("Attribute"))))
         ; ![SortNoArgs("ColorRule")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAll") ; fail)> (arg1, SortNoArgs("ColorNode")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAll") ; fail)> (arg2, SortNoArgs("Attribute"))))
           ; ![SortNoArgs("ColorRule")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ColorRuleAll")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ColorRule(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ColorRule") ; fail)> (arg1, SortNoArgs("ColorNode")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRule") ; fail)> (arg2, SortNoArgs("Attribute"))))
        ; ![SortNoArgs("ColorRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ColorRule")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ColorRuleAllNamed(|arg1, arg2, arg3) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAllNamed") ; fail)> (arg1, SortNoArgs("ColorNode")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAllNamed") ; fail)> (arg2, SortNoArgs("String")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAllNamed") ; fail)> (arg3, SortNoArgs("Attribute"))))
         ; ![SortNoArgs("ColorRule")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAllNamed") ; fail)> (arg1, SortNoArgs("ColorNode")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAllNamed") ; fail)> (arg2, SortNoArgs("String")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleAllNamed") ; fail)> (arg3, SortNoArgs("Attribute"))))
           ; ![SortNoArgs("ColorRule")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ColorRuleAllNamed")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ColorRuleNamed(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleNamed") ; fail)> (arg1, SortNoArgs("ColorNode")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleNamed") ; fail)> (arg2, SortNoArgs("String")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRuleNamed") ; fail)> (arg3, SortNoArgs("Attribute"))))
        ; ![SortNoArgs("ColorRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ColorRuleNamed")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Attribute(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Attribute") ; fail)> (arg1, SortNoArgs("Color")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Attribute") ; fail)> (arg2, SortNoArgs("MaybeColor")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Attribute") ; fail)> (arg3, SortNoArgs("Font"))))
        ; ![SortNoArgs("Attribute")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Attribute")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-AttributeRef(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"AttributeRef") ; fail)> (arg1, SortNoArgs("AttributeId")))
        ; ![SortNoArgs("Attribute")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "AttributeRef")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Token(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Token") ; fail)> (arg1, SortNoArgs("TokenKindName")))
        ; ![SortNoArgs("ColorNode")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Token")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Literal(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Literal") ; fail)> (arg1, SortNoArgs("Id")))
        ; ![SortNoArgs("ColorNode")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Literal")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TK_IDENTIFIER(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("TokenKindName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TK_IDENTIFIER")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TK_NUMBER(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("TokenKindName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TK_NUMBER")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TK_LAYOUT(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("TokenKindName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TK_LAYOUT")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TK_STRING(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("TokenKindName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TK_STRING")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TK_KEYWORD(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("TokenKindName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TK_KEYWORD")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TK_OPERATOR(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("TokenKindName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TK_OPERATOR")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TK_VAR(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("TokenKindName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TK_VAR")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TK_ERROR(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("TokenKindName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TK_ERROR")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TK_UNKNOWN(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("TokenKindName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TK_UNKNOWN")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-NORMAL(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Font")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "NORMAL")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-BOLD(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Font")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "BOLD")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ITALIC(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Font")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ITALIC")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-BOLD_ITALIC(|) =
    ![]
    ; (try(
         id ; ![SortNoArgs("Font")|<id>]
       )
       ; try(
           id ; ![SortNoArgs("Font")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "BOLD_ITALIC")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ColorDefault(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Color")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ColorDefault")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ColorRGB(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ColorRGB") ; fail)> (arg1, SortNoArgs("Int")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRGB") ; fail)> (arg2, SortNoArgs("Int")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorRGB") ; fail)> (arg3, SortNoArgs("Int"))))
        ; ![SortNoArgs("Color")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ColorRGB")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-NoColor(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("NoColor")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "NoColor")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ColorDef(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ColorDef") ; fail)> (arg1, SortNoArgs("AttributeId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ColorDef") ; fail)> (arg2, SortNoArgs("Attribute"))))
        ; ![SortNoArgs("ColorRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ColorDef")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Outliner(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Outliner") ; fail)> (arg1, SortNoArgs("SectionName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Outliner") ; fail)> ( arg2
                                                                                , Sort(
                                                                                    "List"
                                                                                  , [SortNoArgs("OutlineRule")]
                                                                                  )
                                                                                )))
        ; ![SortNoArgs("Section")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Outliner")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-OutlineRule(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"OutlineRule") ; fail)> (arg1, SortNoArgs("Node")))
        ; ![SortNoArgs("OutlineRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "OutlineRule")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Folding(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Folding") ; fail)> (arg1, SortNoArgs("SectionName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Folding") ; fail)> ( arg2
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("FoldingRule")]
                                                                                 )
                                                                               )))
        ; ![SortNoArgs("Section")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Folding")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-FoldRule(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"FoldRule") ; fail)> (arg1, SortNoArgs("Node")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"FoldRule") ; fail)> (arg2, SortNoArgs("FoldingAnno"))))
        ; ![SortNoArgs("FoldingRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "FoldRule")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-FoldRuleAll(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"FoldRuleAll") ; fail)> (arg1, SortNoArgs("Node")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"FoldRuleAll") ; fail)> (arg2, SortNoArgs("FoldingAnno"))))
        ; ![SortNoArgs("FoldingRule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "FoldRuleAll")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Folded(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("FoldingAnno")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Folded")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SemanticProvider(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"SemanticProvider") ; fail)> (arg1, SortNoArgs("PropertyValue")))
         ; ![SortNoArgs("RefactoringRule")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"SemanticProvider") ; fail)> (arg1, SortNoArgs("PropertyValue")))
           ; ![SortNoArgs("RefactoringRule")|<id>]
         )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"SemanticProvider") ; fail)> (arg1, SortNoArgs("PropertyValue")))
           ; ![SortNoArgs("BuilderRule")|<id>]
         )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"SemanticProvider") ; fail)> (arg1, SortNoArgs("PropertyValue")))
           ; ![SortNoArgs("BuilderRule")|<id>]
         )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"SemanticProvider") ; fail)> (arg1, SortNoArgs("PropertyValue")))
           ; ![SortNoArgs("CompletionRule")|<id>]
         )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"SemanticProvider") ; fail)> (arg1, SortNoArgs("PropertyValue")))
           ; ![SortNoArgs("CompletionRule")|<id>]
         )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"SemanticProvider") ; fail)> (arg1, SortNoArgs("PropertyValue")))
           ; ![SortNoArgs("ReferenceRule")|<id>]
         )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"SemanticProvider") ; fail)> (arg1, SortNoArgs("PropertyValue")))
           ; ![SortNoArgs("ReferenceRule")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SemanticProvider")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-OnSave(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"OnSave") ; fail)> (arg1, SortNoArgs("StrategoCall")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"OnSave") ; fail)> (arg2, SortNoArgs("OnSaveAnno"))))
         ; ![SortNoArgs("RefactoringRule")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"OnSave") ; fail)> (arg1, SortNoArgs("StrategoCall")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"OnSave") ; fail)> (arg2, SortNoArgs("OnSaveAnno"))))
           ; ![SortNoArgs("BuilderRule")|<id>]
         )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"OnSave") ; fail)> (arg1, SortNoArgs("StrategoCall")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"OnSave") ; fail)> (arg2, SortNoArgs("OnSaveAnno"))))
           ; ![SortNoArgs("CompletionRule")|<id>]
         )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"OnSave") ; fail)> (arg1, SortNoArgs("StrategoCall")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"OnSave") ; fail)> (arg2, SortNoArgs("OnSaveAnno"))))
           ; ![SortNoArgs("ReferenceRule")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "OnSave")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Strategy(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Strategy") ; fail)> (arg1, SortNoArgs("StrategoId")))
        ; ![SortNoArgs("StrategoCall")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Strategy")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Attribute(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Attribute") ; fail)> (arg1, SortNoArgs("StrategoId")))
        ; ![SortNoArgs("StrategoCall")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Attribute")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Language(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Language") ; fail)> (arg1, SortNoArgs("SectionName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Language") ; fail)> ( arg2
                                                                                , Sort(
                                                                                    "List"
                                                                                  , [SortNoArgs("LanguageProperty")]
                                                                                  )
                                                                                )))
        ; ![SortNoArgs("Section")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Language")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Values(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Values") ; fail)> ( arg1
                                                                           , Sort(
                                                                               "List"
                                                                             , [SortNoArgs("PropertyValue")]
                                                                             )
                                                                           ))
        ; ![SortNoArgs("PropertyValues")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Values")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-LanguageName(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"LanguageName") ; fail)> (arg1, SortNoArgs("PropertyValue")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "LanguageName")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-LanguageId(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"LanguageId") ; fail)> (arg1, SortNoArgs("PropertyValue")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "LanguageId")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Extensions(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Extensions") ; fail)> (arg1, SortNoArgs("PropertyValues")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Extensions")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Description(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Description") ; fail)> (arg1, SortNoArgs("PropertyValue")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Description")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Table(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Table") ; fail)> (arg1, SortNoArgs("PropertyValue")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Table")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TableProvider(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"TableProvider") ; fail)> (arg1, SortNoArgs("StrategoCall")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TableProvider")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-StartSymbols(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"StartSymbols") ; fail)> ( arg1
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("Sort")]
                                                                                    )
                                                                                  ))
         ; ![SortNoArgs("LanguageProperty")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"StartSymbols") ; fail)> (arg1, SortNoArgs("PropertyValues")))
           ; ![SortNoArgs("LanguageProperty")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "StartSymbols")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-URL(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"URL") ; fail)> (arg1, SortNoArgs("URL")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "URL")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Extends(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Extends") ; fail)> (arg1, SortNoArgs("PropertyValues")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Extends")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Aliases(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Aliases") ; fail)> (arg1, SortNoArgs("PropertyValues")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Aliases")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-UnmanagedTablePrefix(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"UnmanagedTablePrefix") ; fail)> (arg1, SortNoArgs("Id")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "UnmanagedTablePrefix")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-LineCommentPrefix(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"LineCommentPrefix") ; fail)> (arg1, SortNoArgs("PropertyValue")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "LineCommentPrefix")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-BlockCommentDefs(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"BlockCommentDefs") ; fail)> (arg1, SortNoArgs("BlockCommentDef")))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "BlockCommentDefs")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-FenceDefs(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"FenceDefs") ; fail)> ( arg1
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("FenceDef")]
                                                                                )
                                                                              ))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "FenceDefs")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-IndentDefs(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"IndentDefs") ; fail)> ( arg1
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("IndentDef")]
                                                                                 )
                                                                               ))
        ; ![SortNoArgs("LanguageProperty")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "IndentDefs")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-BlockCommentDef(|arg1, arg2, arg3) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"BlockCommentDef") ; fail)> (arg1, SortNoArgs("PropertyValue")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"BlockCommentDef") ; fail)> (arg2, SortNoArgs("PropertyValue")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"BlockCommentDef") ; fail)> (arg3, SortNoArgs("PropertyValue"))))
         ; ![SortNoArgs("BlockCommentDef")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"BlockCommentDef") ; fail)> (arg1, SortNoArgs("PropertyValue")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"BlockCommentDef") ; fail)> (arg2, SortNoArgs("NoContinuation")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"BlockCommentDef") ; fail)> (arg3, SortNoArgs("PropertyValue"))))
           ; ![SortNoArgs("BlockCommentDef")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "BlockCommentDef")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-NoContinuation(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("NoContinuation")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "NoContinuation")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-FenceDef(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"FenceDef") ; fail)> (arg1, SortNoArgs("PropertyValue")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"FenceDef") ; fail)> (arg2, SortNoArgs("PropertyValue"))))
        ; ![SortNoArgs("FenceDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "FenceDef")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-IndentDef(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"IndentDef") ; fail)> (arg1, SortNoArgs("PropertyValue")))
        ; ![SortNoArgs("IndentDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "IndentDef")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Sort(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Sort") ; fail)> (arg1, SortNoArgs("Id")))
        ; ![SortNoArgs("Sort")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Sort")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ListSort(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ListSort") ; fail)> (arg1, SortNoArgs("Id")))
        ; ![SortNoArgs("Sort")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ListSort")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-String(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"String") ; fail)> (arg1, SortNoArgs("STRING")))
        ; ![SortNoArgs("String")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "String")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ConstructorOnly(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ConstructorOnly") ; fail)> (arg1, SortNoArgs("ConstructorId")))
        ; ![SortNoArgs("Constructor")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ConstructorOnly")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Constructor(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Constructor") ; fail)> (arg1, SortNoArgs("Id")))
        ; ![SortNoArgs("ConstructorId")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Constructor")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SortAndConstructor(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SortAndConstructor") ; fail)> (arg1, SortNoArgs("Sort")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SortAndConstructor") ; fail)> (arg2, SortNoArgs("ConstructorId"))))
        ; ![SortNoArgs("Node")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SortAndConstructor")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Module(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Module") ; fail)> (arg1, SortNoArgs("ModuleName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Module") ; fail)> (arg2, SortNoArgs("Imports")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Module") ; fail)> ( arg3
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("Section")]
                                                                                )
                                                                              )))
        ; ![SortNoArgs("Module")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Module")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Imports(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"Imports") ; fail)> ( arg1
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Import")]
                                                                               )
                                                                             ))
         ; ![SortNoArgs("Imports")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"Imports") ; fail)> ( arg1
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("ImportModName")]
                                                                                 )
                                                                               ))
           ; ![SortNoArgs("Decl")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Imports")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-NoImports(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Imports")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "NoImports")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Import(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"Import") ; fail)> (arg1, SortNoArgs("ModuleName")))
         ; ![SortNoArgs("Import")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"Import") ; fail)> (arg1, SortNoArgs("ModName")))
           ; ![SortNoArgs("ImportModName")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Import")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ImportRenamed(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ImportRenamed") ; fail)> (arg1, SortNoArgs("ModuleName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ImportRenamed") ; fail)> (arg2, SortNoArgs("Id"))))
        ; ![SortNoArgs("Import")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ImportRenamed")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-OverlayNoArgs(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"OverlayNoArgs") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"OverlayNoArgs") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("Overlay")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "OverlayNoArgs")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Overlay(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Overlay") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Overlay") ; fail)> ( arg2
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("Id")]
                                                                                 )
                                                                               ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Overlay") ; fail)> (arg3, SortNoArgs("Term"))))
        ; ![SortNoArgs("Overlay")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Overlay")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleScope(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleScope") ; fail)> (arg1, SortNoArgs("ScopeLabels")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleScope") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleScope")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ScopeLabels(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ScopeLabels") ; fail)> (arg1, SortNoArgs("Term")))
        ; ![SortNoArgs("ScopeLabels")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ScopeLabels")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-GenDynRules(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"GenDynRules") ; fail)> ( arg1
                                                                                , Sort(
                                                                                    "List"
                                                                                  , [SortNoArgs("DynRuleDef")]
                                                                                  )
                                                                                ))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "GenDynRules")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-AddScopeLabel(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"AddScopeLabel") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"AddScopeLabel") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("DynRuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "AddScopeLabel")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-UndefineDynRule(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"UndefineDynRule") ; fail)> (arg1, SortNoArgs("DynRuleId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"UndefineDynRule") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("DynRuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "UndefineDynRule")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SetDynRule(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SetDynRule") ; fail)> (arg1, SortNoArgs("DynRuleId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SetDynRule") ; fail)> (arg2, SortNoArgs("Rule"))))
        ; ![SortNoArgs("DynRuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SetDynRule")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-AddDynRule(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"AddDynRule") ; fail)> (arg1, SortNoArgs("DynRuleId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"AddDynRule") ; fail)> (arg2, SortNoArgs("Rule"))))
        ; ![SortNoArgs("DynRuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "AddDynRule")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SetDynRuleMatch(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SetDynRuleMatch") ; fail)> (arg1, SortNoArgs("DynRuleId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SetDynRuleMatch") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("DynRuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SetDynRuleMatch")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleAssign(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleAssign") ; fail)> (arg1, SortNoArgs("DynRuleId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleAssign") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("DynRuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleAssign")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleAssignAdd(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleAssignAdd") ; fail)> (arg1, SortNoArgs("DynRuleId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleAssignAdd") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("DynRuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleAssignAdd")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SetDynRuleDepends(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SetDynRuleDepends") ; fail)> (arg1, SortNoArgs("DynRuleId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SetDynRuleDepends") ; fail)> (arg2, SortNoArgs("Rule")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SetDynRuleDepends") ; fail)> (arg3, SortNoArgs("Term"))))
        ; ![SortNoArgs("DynRuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SetDynRuleDepends")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-LabeledDynRuleId(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"LabeledDynRuleId") ; fail)> (arg1, SortNoArgs("RuleDec")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"LabeledDynRuleId") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("DynRuleId")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "LabeledDynRuleId")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-AddLabelDynRuleId(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"AddLabelDynRuleId") ; fail)> (arg1, SortNoArgs("RuleDec")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"AddLabelDynRuleId") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("DynRuleId")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "AddLabelDynRuleId")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleId(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleId") ; fail)> (arg1, SortNoArgs("RuleDec")))
        ; ![SortNoArgs("DynRuleId")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleId")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-LabeledDynRuleScopeId(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"LabeledDynRuleScopeId") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"LabeledDynRuleScopeId") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("DynRuleScopeId")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "LabeledDynRuleScopeId")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleScopeId(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleScopeId") ; fail)> (arg1, SortNoArgs("Id")))
        ; ![SortNoArgs("DynRuleScopeId")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleScopeId")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RDecNoArgs(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"RDecNoArgs") ; fail)> (arg1, SortNoArgs("Id")))
        ; ![SortNoArgs("RuleDec")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RDecNoArgs")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RDec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"RDec") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RDec") ; fail)> ( arg2
                                                                            , Sort(
                                                                                "List"
                                                                              , [SortNoArgs("Typedid")]
                                                                              )
                                                                            )))
        ; ![SortNoArgs("RuleDec")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RDecT(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"RDecT") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RDecT") ; fail)> ( arg2
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Typedid")]
                                                                               )
                                                                             ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RDecT") ; fail)> ( arg3
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Typedid")]
                                                                               )
                                                                             )))
        ; ![SortNoArgs("RuleDec")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RDecT")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RuleNames(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"RuleNames") ; fail)> (arg1, SortNoArgs("Term")))
        ; ![SortNoArgs("RuleNames")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RuleNames")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleIntersectFix(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectFix") ; fail)> (arg1, SortNoArgs("RuleNames")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectFix") ; fail)> (arg2, SortNoArgs("Strategy"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectFix") ; fail)> (arg1, SortNoArgs("RuleNames")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectFix") ; fail)> (arg2, SortNoArgs("Strategy"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleIntersectFix")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleUnionFix(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnionFix") ; fail)> (arg1, SortNoArgs("RuleNames")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnionFix") ; fail)> (arg2, SortNoArgs("Strategy"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnionFix") ; fail)> (arg1, SortNoArgs("RuleNames")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnionFix") ; fail)> (arg2, SortNoArgs("Strategy"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleUnionFix")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleIntersectUnionFix(|arg1, arg2, arg3) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnionFix") ; fail)> (arg1, SortNoArgs("RuleNames")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnionFix") ; fail)> (arg2, SortNoArgs("RuleNames")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnionFix") ; fail)> (arg3, SortNoArgs("Strategy"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnionFix") ; fail)> (arg1, SortNoArgs("RuleNames")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnionFix") ; fail)> (arg2, SortNoArgs("RuleNames")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnionFix") ; fail)> (arg3, SortNoArgs("Strategy"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleIntersectUnionFix")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleIntersect(|arg1, arg2, arg3) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersect") ; fail)> (arg1, SortNoArgs("Strategy")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersect") ; fail)> (arg2, SortNoArgs("RuleNames")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersect") ; fail)> (arg3, SortNoArgs("Strategy"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersect") ; fail)> (arg1, SortNoArgs("Strategy")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersect") ; fail)> (arg2, SortNoArgs("RuleNames")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersect") ; fail)> (arg3, SortNoArgs("Strategy"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleIntersect")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleUnion(|arg1, arg2, arg3) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnion") ; fail)> (arg1, SortNoArgs("Strategy")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnion") ; fail)> (arg2, SortNoArgs("RuleNames")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnion") ; fail)> (arg3, SortNoArgs("Strategy"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnion") ; fail)> (arg1, SortNoArgs("Strategy")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnion") ; fail)> (arg2, SortNoArgs("RuleNames")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleUnion") ; fail)> (arg3, SortNoArgs("Strategy"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleUnion")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DynRuleIntersectUnion(|arg1, arg2, arg3, arg4) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnion") ; fail)> (arg1, SortNoArgs("Strategy")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnion") ; fail)> (arg2, SortNoArgs("RuleNames")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnion") ; fail)> (arg3, SortNoArgs("RuleNames")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnion") ; fail)> (arg4, SortNoArgs("Strategy"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnion") ; fail)> (arg1, SortNoArgs("Strategy")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnion") ; fail)> (arg2, SortNoArgs("RuleNames")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnion") ; fail)> (arg3, SortNoArgs("RuleNames")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"DynRuleIntersectUnion") ; fail)> (arg4, SortNoArgs("Strategy"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DynRuleIntersectUnion")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-BA(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"BA") ; fail)> (arg1, SortNoArgs("StrategyAngle")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"BA") ; fail)> (arg2, SortNoArgs("Term"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"BA") ; fail)> (arg1, SortNoArgs("StrategyAngle")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"BA") ; fail)> (arg2, SortNoArgs("Term"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "BA")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-AM(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"AM") ; fail)> (arg1, SortNoArgs("Strategy")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"AM") ; fail)> (arg2, SortNoArgs("Term"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"AM") ; fail)> (arg1, SortNoArgs("Strategy")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"AM") ; fail)> (arg2, SortNoArgs("Term"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "AM")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Seq(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"Seq") ; fail)> (arg1, SortNoArgs("Strategy")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"Seq") ; fail)> (arg2, SortNoArgs("Strategy"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"Seq") ; fail)> (arg1, SortNoArgs("Strategy")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"Seq") ; fail)> (arg2, SortNoArgs("Strategy"))))
           ; ![SortNoArgs("Strategy")|<id>]
         )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"Seq") ; fail)> (arg1, SortNoArgs("Strategy")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"Seq") ; fail)> (arg2, SortNoArgs("Strategy"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Seq")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RDefNoArgs(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"RDefNoArgs") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RDefNoArgs") ; fail)> (arg2, SortNoArgs("Rule"))))
        ; ![SortNoArgs("RuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RDefNoArgs")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RDef(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"RDef") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RDef") ; fail)> ( arg2
                                                                            , Sort(
                                                                                "List"
                                                                              , [SortNoArgs("Typedid")]
                                                                              )
                                                                            ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RDef") ; fail)> (arg3, SortNoArgs("Rule"))))
        ; ![SortNoArgs("RuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RDef")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RDefT(|arg1, arg2, arg3, arg4) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"RDefT") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RDefT") ; fail)> ( arg2
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Typedid")]
                                                                               )
                                                                             ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RDefT") ; fail)> ( arg3
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Typedid")]
                                                                               )
                                                                             ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RDefT") ; fail)> (arg4, SortNoArgs("Rule"))))
        ; ![SortNoArgs("RuleDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RDefT")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RuleNoCond(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"RuleNoCond") ; fail)> (arg1, SortNoArgs("Term")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RuleNoCond") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("Rule")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RuleNoCond")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Rule(|arg1, arg2, arg3) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"Rule") ; fail)> (arg1, SortNoArgs("Term")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"Rule") ; fail)> (arg2, SortNoArgs("Term")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"Rule") ; fail)> (arg3, SortNoArgs("Strategy"))))
         ; ![SortNoArgs("Rule")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"Rule") ; fail)> (arg1, SortNoArgs("Term")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"Rule") ; fail)> (arg2, SortNoArgs("Term")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"Rule") ; fail)> ( arg3
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("RuleCond")]
                                                                                 )
                                                                               )))
           ; ![SortNoArgs("Rule")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Rule")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-WhereClause(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"WhereClause") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("RuleCond")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "WhereClause")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-WithClause(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"WithClause") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("RuleCond")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "WithClause")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SDefNoArgs(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SDefNoArgs") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SDefNoArgs") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("StrategyDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SDefNoArgs")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SDef(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SDef") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SDef") ; fail)> ( arg2
                                                                            , Sort(
                                                                                "List"
                                                                              , [SortNoArgs("Typedid")]
                                                                              )
                                                                            ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SDef") ; fail)> (arg3, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("StrategyDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SDef")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-DefaultVarDec(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"DefaultVarDec") ; fail)> (arg1, SortNoArgs("ID")))
        ; ![SortNoArgs("Typedid")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "DefaultVarDec")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Call(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Call") ; fail)> (arg1, SortNoArgs("SVar")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Call") ; fail)> ( arg2
                                                                            , Sort(
                                                                                "List"
                                                                              , [SortNoArgs("Strategy")]
                                                                              )
                                                                            )))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Call")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ScopeDefault(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ScopeDefault") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ScopeDefault")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-LChoice(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"LChoice") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"LChoice") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "LChoice")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Rec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Rec") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Rec") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Rec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Not(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Not") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Not")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Where(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Where") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Where")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-With(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"With") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "With")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Test(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Test") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Test")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-PrimNoArgs(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"PrimNoArgs") ; fail)> (arg1, SortNoArgs("String")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "PrimNoArgs")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Prim(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Prim") ; fail)> (arg1, SortNoArgs("String")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Prim") ; fail)> ( arg2
                                                                            , Sort(
                                                                                "List"
                                                                              , [SortNoArgs("Term")]
                                                                              )
                                                                            )))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Prim")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-StrCong(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"StrCong") ; fail)> (arg1, SortNoArgs("String")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "StrCong")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-IntCong(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"IntCong") ; fail)> (arg1, SortNoArgs("Int")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "IntCong")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RealCong(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"RealCong") ; fail)> (arg1, SortNoArgs("Real")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RealCong")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CharCong(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"CharCong") ; fail)> (arg1, SortNoArgs("Char")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CharCong")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CongQ(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"CongQ") ; fail)> (arg1, SortNoArgs("String")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CongQ") ; fail)> ( arg2
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Strategy")]
                                                                               )
                                                                             )))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CongQ")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-AnnoCong(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"AnnoCong") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"AnnoCong") ; fail)> (arg2, SortNoArgs("StrategyCurly"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "AnnoCong")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-StrategyCurly(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"StrategyCurly") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("StrategyCurly")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "StrategyCurly")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-EmptyTupleCong(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "EmptyTupleCong")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-TupleCong(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"TupleCong") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"TupleCong") ; fail)> ( arg2
                                                                                 , Sort(
                                                                                     "List"
                                                                                   , [SortNoArgs("Strategy")]
                                                                                   )
                                                                                 )))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "TupleCong")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ListCongNoTail(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ListCongNoTail") ; fail)> ( arg1
                                                                                   , Sort(
                                                                                       "List"
                                                                                     , [SortNoArgs("Strategy")]
                                                                                     )
                                                                                   ))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ListCongNoTail")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ListCong(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ListCong") ; fail)> ( arg1
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("Strategy")]
                                                                                )
                                                                              ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ListCong") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ListCong")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ExplodeCong(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ExplodeCong") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ExplodeCong") ; fail)> (arg2, SortNoArgs("StrategyParen"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ExplodeCong")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CallNoArgs(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"CallNoArgs") ; fail)> (arg1, SortNoArgs("SVar")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CallNoArgs")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-LRule(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"LRule") ; fail)> (arg1, SortNoArgs("Rule")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "LRule")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SRule(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"SRule") ; fail)> (arg1, SortNoArgs("Rule")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SRule")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Choice(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Choice") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Choice") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Choice")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RChoice(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"RChoice") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"RChoice") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RChoice")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CondChoice(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"CondChoice") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CondChoice") ; fail)> (arg2, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CondChoice") ; fail)> (arg3, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CondChoice")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-IfThen(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"IfThen") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"IfThen") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "IfThen")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SwitchChoiceNoOtherwise(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SwitchChoiceNoOtherwise") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SwitchChoiceNoOtherwise") ; fail)> ( arg2
                                                                                               , Sort(
                                                                                                   "List"
                                                                                                 , [SortNoArgs("SwitchCase")]
                                                                                                 )
                                                                                               )))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SwitchChoiceNoOtherwise")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SwitchChoice(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SwitchChoice") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SwitchChoice") ; fail)> ( arg2
                                                                                    , Sort(
                                                                                        "List"
                                                                                      , [SortNoArgs("SwitchCase")]
                                                                                      )
                                                                                    ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SwitchChoice") ; fail)> (arg3, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SwitchChoice")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SwitchCase(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SwitchCase") ; fail)> (arg1, SortNoArgs("Strategy")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SwitchCase") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("SwitchCase")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SwitchCase")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Assign(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Assign") ; fail)> (arg1, SortNoArgs("Term")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Assign") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Assign")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ListVar(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ListVar") ; fail)> (arg1, SortNoArgs("LId")))
        ; ![SortNoArgs("LID")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ListVar")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Var(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"Var") ; fail)> (arg1, SortNoArgs("LID")))
         ; ![SortNoArgs("Var")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"Var") ; fail)> (arg1, SortNoArgs("Id")))
           ; ![SortNoArgs("Var")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Var")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-BuildDefaultPT(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"BuildDefaultPT") ; fail)> (arg1, SortNoArgs("PreTerm")))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "BuildDefaultPT")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-BuildDefault(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"BuildDefault") ; fail)> (arg1, SortNoArgs("Term")))
        ; ![SortNoArgs("Term")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "BuildDefault")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Char(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Char") ; fail)> (arg1, SortNoArgs("Char")))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Char")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-AnnoList(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"AnnoList") ; fail)> (arg1, SortNoArgs("PreTerm")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"AnnoList") ; fail)> ( arg2
                                                                                 , Sort(
                                                                                     "List"
                                                                                   , [SortNoArgs("Term")]
                                                                                   )
                                                                                 )))
         ; ![SortNoArgs("Term")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"AnnoList") ; fail)> (arg1, SortNoArgs("PreTerm")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"AnnoList") ; fail)> ( arg2
                                                                                   , Sort(
                                                                                       "List"
                                                                                     , [SortNoArgs("Term")]
                                                                                     )
                                                                                   )))
           ; ![SortNoArgs("Term")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "AnnoList")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-NoAnnoList(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"NoAnnoList") ; fail)> (arg1, SortNoArgs("PreTerm")))
        ; ![SortNoArgs("Term")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "NoAnnoList")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-App(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"App") ; fail)> (arg1, SortNoArgs("Strategy")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"App") ; fail)> (arg2, SortNoArgs("Term"))))
         ; ![SortNoArgs("PreTerm")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"App") ; fail)> (arg1, SortNoArgs("Strategy")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"App") ; fail)> (arg2, SortNoArgs("Term"))))
           ; ![SortNoArgs("Term")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "App")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-RootApp(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"RootApp") ; fail)> (arg1, SortNoArgs("StrategyAngle")))
         ; ![SortNoArgs("PreTerm")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"RootApp") ; fail)> (arg1, SortNoArgs("StrategyAngle")))
           ; ![SortNoArgs("Term")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "RootApp")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Tuple(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Tuple") ; fail)> ( arg1
                                                                          , Sort(
                                                                              "List"
                                                                            , [SortNoArgs("Term")]
                                                                            )
                                                                          ))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Tuple")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-List(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"List") ; fail)> ( arg1
                                                                         , Sort(
                                                                             "List"
                                                                           , [SortNoArgs("Term")]
                                                                           )
                                                                         ))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "List")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ListTail(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ListTail") ; fail)> ( arg1
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("Term")]
                                                                                )
                                                                              ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ListTail") ; fail)> (arg2, SortNoArgs("Term"))))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ListTail")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Explode(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"Explode") ; fail)> (arg1, SortNoArgs("Term")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"Explode") ; fail)> (arg2, SortNoArgs("Term"))))
         ; ![SortNoArgs("PreTerm")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"Explode") ; fail)> (arg1, SortNoArgs("Term")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"Explode") ; fail)> (arg2, SortNoArgs("Term"))))
           ; ![SortNoArgs("PreTerm")|<id>]
         )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"Explode") ; fail)> (arg1, SortNoArgs("Term")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"Explode") ; fail)> (arg2, SortNoArgs("Term"))))
           ; ![SortNoArgs("PreTerm")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Explode")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-As(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"As") ; fail)> (arg1, SortNoArgs("Var")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"As") ; fail)> (arg2, SortNoArgs("Term"))))
         ; ![SortNoArgs("Term")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"As") ; fail)> (arg1, SortNoArgs("Var")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"As") ; fail)> (arg2, SortNoArgs("Term"))))
           ; ![SortNoArgs("Term")|<id>]
         )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"As") ; fail)> (arg1, SortNoArgs("Var")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"As") ; fail)> (arg2, SortNoArgs("PreTerm"))))
           ; ![SortNoArgs("PreTerm")|<id>]
         )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"As") ; fail)> (arg1, SortNoArgs("Var")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"As") ; fail)> (arg2, SortNoArgs("Term"))))
           ; ![SortNoArgs("Term")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "As")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SortList(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"SortList") ; fail)> ( arg1
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Sort")]
                                                                               )
                                                                             ))
        ; ![SortNoArgs("Sort")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SortList")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SortListTl(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SortListTl") ; fail)> ( arg1
                                                                                , Sort(
                                                                                    "List"
                                                                                  , [SortNoArgs("Sort")]
                                                                                  )
                                                                                ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SortListTl") ; fail)> (arg2, SortNoArgs("Sort"))))
        ; ![SortNoArgs("Sort")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SortListTl")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SortTuple(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"SortTuple") ; fail)> ( arg1
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("Sort")]
                                                                                )
                                                                              ))
        ; ![SortNoArgs("Sort")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SortTuple")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Star(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Kind")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Star")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-StarStar(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Kind")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "StarStar")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Sorts(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Sorts") ; fail)> ( arg1
                                                                          , Sort(
                                                                              "List"
                                                                            , [SortNoArgs("Sort")]
                                                                            )
                                                                          ))
        ; ![SortNoArgs("Sdecl")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Sorts")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Constructors(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Constructors") ; fail)> ( arg1
                                                                                 , Sort(
                                                                                     "List"
                                                                                   , [SortNoArgs("Opdecl")]
                                                                                   )
                                                                                 ))
        ; ![SortNoArgs("Sdecl")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Constructors")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SortVar(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"SortVar") ; fail)> (arg1, SortNoArgs("LCID")))
        ; ![SortNoArgs("Sort")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SortVar")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SortNoArgs(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"SortNoArgs") ; fail)> (arg1, SortNoArgs("UCID")))
        ; ![SortNoArgs("Sort")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SortNoArgs")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Sort(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Sort") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Sort") ; fail)> ( arg2
                                                                            , Sort(
                                                                                "List"
                                                                              , [SortNoArgs("Sort")]
                                                                              )
                                                                            )))
        ; ![SortNoArgs("Sort")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Sort")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-OpDecl(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"OpDecl") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"OpDecl") ; fail)> (arg2, SortNoArgs("Type"))))
        ; ![SortNoArgs("Opdecl")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "OpDecl")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-OpDeclQ(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"OpDeclQ") ; fail)> (arg1, SortNoArgs("String")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"OpDeclQ") ; fail)> (arg2, SortNoArgs("Type"))))
        ; ![SortNoArgs("Opdecl")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "OpDeclQ")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-OpDeclInj(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"OpDeclInj") ; fail)> (arg1, SortNoArgs("Type")))
        ; ![SortNoArgs("Opdecl")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "OpDeclInj")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ExtOpDecl(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ExtOpDecl") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ExtOpDecl") ; fail)> (arg2, SortNoArgs("Type"))))
        ; ![SortNoArgs("Opdecl")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ExtOpDecl")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ExtOpDeclQ(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ExtOpDeclQ") ; fail)> (arg1, SortNoArgs("String")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ExtOpDeclQ") ; fail)> (arg2, SortNoArgs("Type"))))
        ; ![SortNoArgs("Opdecl")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ExtOpDeclQ")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ExtOpDeclInj(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ExtOpDeclInj") ; fail)> (arg1, SortNoArgs("Type")))
        ; ![SortNoArgs("Opdecl")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ExtOpDeclInj")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ConstType(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ConstType") ; fail)> (arg1, SortNoArgs("Sort")))
        ; ![SortNoArgs("ConstType")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ConstType")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-FunType(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"FunType") ; fail)> ( arg1
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("ArgType")]
                                                                               )
                                                                             ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"FunType") ; fail)> (arg2, SortNoArgs("RetType"))))
        ; ![SortNoArgs("FunType")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "FunType")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Wld(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Wld")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Wld")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Int(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Int") ; fail)> (arg1, SortNoArgs("Int")))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Int")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Real(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Real") ; fail)> (arg1, SortNoArgs("Real")))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Real")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Str(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Str") ; fail)> (arg1, SortNoArgs("String")))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Str")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Op(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Op") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Op") ; fail)> ( arg2
                                                                          , Sort(
                                                                              "List"
                                                                            , [SortNoArgs("Term")]
                                                                            )
                                                                          )))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Op")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-OpQ(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"OpQ") ; fail)> (arg1, SortNoArgs("String")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"OpQ") ; fail)> ( arg2
                                                                           , Sort(
                                                                               "List"
                                                                             , [SortNoArgs("Term")]
                                                                             )
                                                                           )))
        ; ![SortNoArgs("PreTerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "OpQ")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Anno(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Anno") ; fail)> (arg1, SortNoArgs("PreTerm")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Anno") ; fail)> (arg2, SortNoArgs("PreTerm"))))
        ; ![SortNoArgs("Term")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Anno")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SVar(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"SVar") ; fail)> (arg1, SortNoArgs("Id")))
        ; ![SortNoArgs("SVar")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SVar")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Let(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Let") ; fail)> ( arg1
                                                                         , Sort(
                                                                             "List"
                                                                           , [SortNoArgs("Def")]
                                                                           )
                                                                         ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Let") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Let")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CallT(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"CallT") ; fail)> (arg1, SortNoArgs("SVar")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CallT") ; fail)> ( arg2
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Strategy")]
                                                                               )
                                                                             ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CallT") ; fail)> ( arg3
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Term")]
                                                                               )
                                                                             )))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CallT")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-CallDynamic(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"CallDynamic") ; fail)> (arg1, SortNoArgs("Term")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CallDynamic") ; fail)> ( arg2
                                                                                   , Sort(
                                                                                       "List"
                                                                                     , [SortNoArgs("Strategy")]
                                                                                     )
                                                                                   ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"CallDynamic") ; fail)> ( arg3
                                                                                   , Sort(
                                                                                       "List"
                                                                                     , [SortNoArgs("Term")]
                                                                                     )
                                                                                   )))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "CallDynamic")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-SDefT(|arg1, arg2, arg3, arg4) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"SDefT") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SDefT") ; fail)> ( arg2
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Typedid")]
                                                                               )
                                                                             ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SDefT") ; fail)> ( arg3
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Typedid")]
                                                                               )
                                                                             ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"SDefT") ; fail)> (arg4, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("StrategyDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "SDefT")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ExtSDefInl(|arg1, arg2, arg3, arg4) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ExtSDefInl") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ExtSDefInl") ; fail)> ( arg2
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("Typedid")]
                                                                                    )
                                                                                  ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ExtSDefInl") ; fail)> ( arg3
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("Typedid")]
                                                                                    )
                                                                                  ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ExtSDefInl") ; fail)> (arg4, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("StrategyDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ExtSDefInl")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ExtSDef(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"ExtSDef") ; fail)> (arg1, SortNoArgs("Id")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ExtSDef") ; fail)> ( arg2
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("Typedid")]
                                                                                 )
                                                                               ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"ExtSDef") ; fail)> ( arg3
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("Typedid")]
                                                                                 )
                                                                               )))
        ; ![SortNoArgs("StrategyDef")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ExtSDef")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-VarDec(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"VarDec") ; fail)> (arg1, SortNoArgs("ID")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"VarDec") ; fail)> (arg2, SortNoArgs("Type"))))
        ; ![SortNoArgs("Typedid")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "VarDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ParenStrat(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ParenStrat") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("StrategyParen")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ParenStrat")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Fail(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Fail")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Id(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Id")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Match(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"Match") ; fail)> (arg1, SortNoArgs("Term")))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"Match") ; fail)> (arg1, SortNoArgs("Term")))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Match")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Build(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"Build") ; fail)> (arg1, SortNoArgs("Term")))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"Build") ; fail)> (arg1, SortNoArgs("Term")))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Build")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Scope(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Scope") ; fail)> ( arg1
                                                                           , Sort(
                                                                               "List"
                                                                             , [SortNoArgs("ID")]
                                                                             )
                                                                           ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Scope") ; fail)> (arg2, SortNoArgs("Strategy"))))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Scope")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-GuardedLChoice(|arg1, arg2, arg3) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"GuardedLChoice") ; fail)> (arg1, SortNoArgs("Strategy")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"GuardedLChoice") ; fail)> (arg2, SortNoArgs("StrategyMid")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"GuardedLChoice") ; fail)> (arg3, SortNoArgs("Strategy"))))
         ; ![SortNoArgs("Strategy")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"GuardedLChoice") ; fail)> (arg1, SortNoArgs("Strategy")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"GuardedLChoice") ; fail)> (arg2, SortNoArgs("StrategyMid")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"GuardedLChoice") ; fail)> (arg3, SortNoArgs("Strategy"))))
           ; ![SortNoArgs("Strategy")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "GuardedLChoice")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-PrimT(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"PrimT") ; fail)> (arg1, SortNoArgs("String")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"PrimT") ; fail)> ( arg2
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Strategy")]
                                                                               )
                                                                             ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"PrimT") ; fail)> ( arg3
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Term")]
                                                                               )
                                                                             )))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "PrimT")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Some(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Some") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Some")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-One(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"One") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "One")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-All(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"All") ; fail)> (arg1, SortNoArgs("Strategy")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "All")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ImportTerm(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ImportTerm") ; fail)> (arg1, SortNoArgs("ModName")))
        ; ![SortNoArgs("Strategy")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ImportTerm")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Module(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"Module") ; fail)> (arg1, SortNoArgs("ModName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"Module") ; fail)> ( arg2
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("Decl")]
                                                                                )
                                                                              )))
        ; ![SortNoArgs("Module")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Module")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-Specification(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"Specification") ; fail)> ( arg1
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("Decl")]
                                                                                    )
                                                                                  ))
        ; ![SortNoArgs("Module")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "Specification")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ImportWildcard(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ImportWildcard") ; fail)> (arg1, SortNoArgs("ModName")))
        ; ![SortNoArgs("ImportModName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ImportWildcard")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-alias(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"alias") ; fail)> (arg1, SortNoArgs("Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"alias") ; fail)> (arg2, SortNoArgs("Symbol"))))
        ; ![SortNoArgs("Alias")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "alias")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-char-class(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"char-class") ; fail)> (arg1, SortNoArgs("CharClass")))
         ; ![SortNoArgs("Lookahead")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"char-class") ; fail)> (arg1, SortNoArgs("CharClass")))
           ; ![SortNoArgs("Symbol")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "char-class")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-seq(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"seq") ; fail)> (arg1, SortNoArgs("CharClass")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"seq") ; fail)> (arg2, SortNoArgs("Lookaheads"))))
         ; ![SortNoArgs("Lookahead")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"seq") ; fail)> (arg1, SortNoArgs("Symbol")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"seq") ; fail)> ( arg2
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("Symbol")]
                                                                                )
                                                                              )))
           ; ![SortNoArgs("Symbol")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "seq")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-single(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"single") ; fail)> (arg1, SortNoArgs("Lookahead")))
        ; ![SortNoArgs("Lookaheads")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "single")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-alt(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"alt") ; fail)> (arg1, SortNoArgs("Lookaheads")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"alt") ; fail)> (arg2, SortNoArgs("Lookaheads"))))
         ; ![SortNoArgs("Lookaheads")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"alt") ; fail)> (arg1, SortNoArgs("Symbol")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"alt") ; fail)> (arg2, SortNoArgs("Symbol"))))
           ; ![SortNoArgs("Symbol")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "alt")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-list(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"list") ; fail)> ( arg1
                                                                          , Sort(
                                                                              "List"
                                                                            , [SortNoArgs("Lookahead")]
                                                                            )
                                                                          ))
         ; ![SortNoArgs("Lookaheads")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"list") ; fail)> ( arg1
                                                                            , Sort(
                                                                                "List"
                                                                              , [SortNoArgs("ATerm")]
                                                                              )
                                                                            ))
           ; ![SortNoArgs("ATerm")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "list")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-follow(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"follow") ; fail)> (arg1, SortNoArgs("Symbols")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"follow") ; fail)> (arg2, SortNoArgs("Lookaheads"))))
        ; ![SortNoArgs("Restriction")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "follow")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-reject(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Attribute")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "reject")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-prefer(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Attribute")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "prefer")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-avoid(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Attribute")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "avoid")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-quoted(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"quoted") ; fail)> (arg1, SortNoArgs("StrCon")))
         ; ![SortNoArgs("Label")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"quoted") ; fail)> (arg1, SortNoArgs("StrCon")))
           ; ![SortNoArgs("AFun")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "quoted")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-unquoted(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"unquoted") ; fail)> (arg1, SortNoArgs("IdCon")))
         ; ![SortNoArgs("Label")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"unquoted") ; fail)> (arg1, SortNoArgs("IdCon")))
           ; ![SortNoArgs("AFun")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "unquoted")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-label(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"label") ; fail)> (arg1, SortNoArgs("Label")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"label") ; fail)> (arg2, SortNoArgs("Symbol"))))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "label")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-unquoted-fun(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"unquoted-fun") ; fail)> (arg1, SortNoArgs("IdCon")))
        ; ![SortNoArgs("FunctionName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "unquoted-fun")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-quoted-fun(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"quoted-fun") ; fail)> (arg1, SortNoArgs("StrCon")))
        ; ![SortNoArgs("FunctionName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "quoted-fun")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-lit(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"lit") ; fail)> (arg1, SortNoArgs("StrCon")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "lit")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-ci-lit(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"ci-lit") ; fail)> (arg1, SortNoArgs("SingleQuotedStrCon")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "ci-lit")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-prefix-fun(|arg1, arg2, arg3, arg4) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"prefix-fun") ; fail)> (arg1, SortNoArgs("FunctionName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"prefix-fun") ; fail)> ( arg2
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("Symbol")]
                                                                                    )
                                                                                  ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"prefix-fun") ; fail)> (arg3, SortNoArgs("Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"prefix-fun") ; fail)> (arg4, SortNoArgs("Attributes"))))
        ; ![SortNoArgs("Production")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "prefix-fun")> [arg1, arg2, arg3, arg4]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-kernel-start-symbols(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"kernel-start-symbols") ; fail)> (arg1, SortNoArgs("Symbols")))
        ; ![SortNoArgs("Grammar")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "kernel-start-symbols")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-lexical-start-symbols(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"lexical-start-symbols") ; fail)> (arg1, SortNoArgs("Symbols")))
        ; ![SortNoArgs("Grammar")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "lexical-start-symbols")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-context-free-start-symbols(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"context-free-start-symbols") ; fail)> (arg1, SortNoArgs("Symbols")))
        ; ![SortNoArgs("Grammar")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "context-free-start-symbols")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-sort(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"sort") ; fail)> (arg1, SortNoArgs("Sort")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "sort")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-parameterized-sort(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"parameterized-sort") ; fail)> (arg1, SortNoArgs("Sort")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"parameterized-sort") ; fail)> ( arg2
                                                                                          , Sort(
                                                                                              "List"
                                                                                            , [SortNoArgs("Symbol")]
                                                                                            )
                                                                                          )))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "parameterized-sort")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-numeric(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"numeric") ; fail)> (arg1, SortNoArgs("NumChar")))
        ; ![SortNoArgs("Character")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "numeric")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-short(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"short") ; fail)> (arg1, SortNoArgs("ShortChar")))
        ; ![SortNoArgs("Character")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "short")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-top(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Character")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "top")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-eof(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Character")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "eof")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-bot(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Character")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "bot")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-label_start(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Character")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "label_start")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-range(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"range") ; fail)> (arg1, SortNoArgs("Character")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"range") ; fail)> (arg2, SortNoArgs("Character"))))
        ; ![SortNoArgs("CharRange")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "range")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-conc(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"conc") ; fail)> (arg1, SortNoArgs("CharRanges")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"conc") ; fail)> (arg2, SortNoArgs("CharRanges"))))
        ; ![SortNoArgs("CharRanges")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "conc")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-absent(|) =
    ![]
    ; (try(
         id ; ![SortNoArgs("OptCharRanges")|<id>]
       )
       ; try(
           id ; ![SortNoArgs("OptExp")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "absent")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-present(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"present") ; fail)> (arg1, SortNoArgs("CharRanges")))
         ; ![SortNoArgs("OptCharRanges")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"present") ; fail)> (arg1, SortNoArgs("IntCon")))
           ; ![SortNoArgs("OptExp")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "present")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-simple-charclass(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"simple-charclass") ; fail)> (arg1, SortNoArgs("OptCharRanges")))
        ; ![SortNoArgs("CharClass")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "simple-charclass")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-comp(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"comp") ; fail)> (arg1, SortNoArgs("CharClass")))
        ; ![SortNoArgs("CharClass")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "comp")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-diff(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"diff") ; fail)> (arg1, SortNoArgs("CharClass")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"diff") ; fail)> (arg2, SortNoArgs("CharClass"))))
        ; ![SortNoArgs("CharClass")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "diff")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-isect(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"isect") ; fail)> (arg1, SortNoArgs("CharClass")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"isect") ; fail)> (arg2, SortNoArgs("CharClass"))))
        ; ![SortNoArgs("CharClass")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "isect")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-union(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"union") ; fail)> (arg1, SortNoArgs("CharClass")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"union") ; fail)> (arg2, SortNoArgs("CharClass"))))
        ; ![SortNoArgs("CharClass")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "union")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-left(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Associativity")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "left")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-right(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Associativity")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "right")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-non-assoc(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Associativity")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "non-assoc")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-assoc(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Associativity")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "assoc")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-bracket(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Attribute")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "bracket")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-assoc(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"assoc") ; fail)> (arg1, SortNoArgs("Associativity")))
        ; ![SortNoArgs("Attribute")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "assoc")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-default(|arg1) =
    ![]
    ; (try(
         where(<(has-sort <+ log-mismatching-sort-error(|"default") ; fail)> ( arg1
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("NatCon")]
                                                                               )
                                                                             ))
         ; ![SortNoArgs("ArgumentIndicator")|<id>]
       )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"default") ; fail)> ( arg1
                                                                               , Sort(
                                                                                   "List"
                                                                                 , [SortNoArgs("ATerm")]
                                                                                 )
                                                                               ))
           ; ![SortNoArgs("Annotation")|<id>]
         )
       ; try(
           where(<(has-sort <+ log-mismatching-sort-error(|"default") ; fail)> (arg1, SortNoArgs("ATerm")))
           ; ![SortNoArgs("ATermAttribute")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "default")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-with-arguments(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"with-arguments") ; fail)> (arg1, SortNoArgs("Group")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"with-arguments") ; fail)> (arg2, SortNoArgs("ArgumentIndicator"))))
        ; ![SortNoArgs("Group")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "with-arguments")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-non-transitive(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"non-transitive") ; fail)> (arg1, SortNoArgs("Group")))
        ; ![SortNoArgs("Group")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "non-transitive")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-simple-group(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"simple-group") ; fail)> (arg1, SortNoArgs("Production")))
        ; ![SortNoArgs("Group")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "simple-group")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-prods-group(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"prods-group") ; fail)> (arg1, SortNoArgs("Productions")))
        ; ![SortNoArgs("Group")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "prods-group")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-assoc-group(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"assoc-group") ; fail)> (arg1, SortNoArgs("Associativity")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"assoc-group") ; fail)> (arg2, SortNoArgs("Productions"))))
        ; ![SortNoArgs("Group")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "assoc-group")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-chain(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"chain") ; fail)> ( arg1
                                                                          , Sort(
                                                                              "List"
                                                                            , [SortNoArgs("Group")]
                                                                            )
                                                                          ))
        ; ![SortNoArgs("Priority")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "chain")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-assoc(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"assoc") ; fail)> (arg1, SortNoArgs("Group")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"assoc") ; fail)> (arg2, SortNoArgs("Associativity")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"assoc") ; fail)> (arg3, SortNoArgs("Group"))))
        ; ![SortNoArgs("Priority")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "assoc")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-lifting(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"lifting") ; fail)> (arg1, SortNoArgs("Symbol")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "lifting")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-empty(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "empty")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-opt(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"opt") ; fail)> (arg1, SortNoArgs("Symbol")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "opt")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-iter(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"iter") ; fail)> (arg1, SortNoArgs("Symbol")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "iter")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-iter-star(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"iter-star") ; fail)> (arg1, SortNoArgs("Symbol")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "iter-star")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-iter-sep(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"iter-sep") ; fail)> (arg1, SortNoArgs("Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"iter-sep") ; fail)> (arg2, SortNoArgs("Symbol"))))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "iter-sep")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-iter-star-sep(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"iter-star-sep") ; fail)> (arg1, SortNoArgs("Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"iter-star-sep") ; fail)> (arg2, SortNoArgs("Symbol"))))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "iter-star-sep")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-tuple(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"tuple") ; fail)> (arg1, SortNoArgs("Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"tuple") ; fail)> ( arg2
                                                                             , Sort(
                                                                                 "List"
                                                                               , [SortNoArgs("Symbol")]
                                                                               )
                                                                             )))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "tuple")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-func(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"func") ; fail)> (arg1, SortNoArgs("Symbols")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"func") ; fail)> (arg2, SortNoArgs("Symbol"))))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "func")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-strategy(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"strategy") ; fail)> (arg1, SortNoArgs("Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"strategy") ; fail)> (arg2, SortNoArgs("Symbol"))))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "strategy")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-renamings(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"renamings") ; fail)> ( arg1
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("Renaming")]
                                                                                )
                                                                              ))
        ; ![SortNoArgs("Renamings")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "renamings")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-symbol(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"symbol") ; fail)> (arg1, SortNoArgs("Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"symbol") ; fail)> (arg2, SortNoArgs("Symbol"))))
        ; ![SortNoArgs("Renaming")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "symbol")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-production(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"production") ; fail)> (arg1, SortNoArgs("Production")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"production") ; fail)> (arg2, SortNoArgs("Production"))))
        ; ![SortNoArgs("Renaming")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "production")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-module(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"module") ; fail)> (arg1, SortNoArgs("ModuleName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"module") ; fail)> ( arg2
                                                                              , Sort(
                                                                                  "List"
                                                                                , [SortNoArgs("ImpSection")]
                                                                                )
                                                                              ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"module") ; fail)> (arg3, SortNoArgs("Sections"))))
        ; ![SortNoArgs("Module")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "module")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-exports(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"exports") ; fail)> (arg1, SortNoArgs("Grammar")))
        ; ![SortNoArgs("Section")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "exports")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-hiddens(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"hiddens") ; fail)> (arg1, SortNoArgs("Grammar")))
        ; ![SortNoArgs("Section")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "hiddens")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-unparameterized(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"unparameterized") ; fail)> (arg1, SortNoArgs("ModuleId")))
        ; ![SortNoArgs("ModuleName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "unparameterized")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-parameterized(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"parameterized") ; fail)> (arg1, SortNoArgs("ModuleId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"parameterized") ; fail)> (arg2, SortNoArgs("Symbols"))))
        ; ![SortNoArgs("ModuleName")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "parameterized")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-id(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"id") ; fail)> (arg1, SortNoArgs("ModuleName")))
        ; ![SortNoArgs("Attribute")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "id")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-imports(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"imports") ; fail)> (arg1, SortNoArgs("Imports")))
        ; ![SortNoArgs("ImpSection")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "imports")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-imp-section(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"imp-section") ; fail)> (arg1, SortNoArgs("ImpSection")))
        ; ![SortNoArgs("Grammar")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "imp-section")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-module(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"module") ; fail)> (arg1, SortNoArgs("ModuleName")))
        ; ![SortNoArgs("Import")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "module")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-renamed-module(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"renamed-module") ; fail)> (arg1, SortNoArgs("ModuleName")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"renamed-module") ; fail)> (arg2, SortNoArgs("Renamings"))))
        ; ![SortNoArgs("Import")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "renamed-module")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-cf(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"cf") ; fail)> (arg1, SortNoArgs("Symbol")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "cf")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-lex(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"lex") ; fail)> (arg1, SortNoArgs("Symbol")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "lex")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-varsym(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"varsym") ; fail)> (arg1, SortNoArgs("Symbol")))
        ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "varsym")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-layout(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "layout")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-empty-grammar(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Grammar")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "empty-grammar")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-conc-grammars(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"conc-grammars") ; fail)> (arg1, SortNoArgs("Grammar")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"conc-grammars") ; fail)> (arg2, SortNoArgs("Grammar"))))
        ; ![SortNoArgs("Grammar")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "conc-grammars")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-real-con(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"real-con") ; fail)> (arg1, SortNoArgs("IntCon")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"real-con") ; fail)> (arg2, SortNoArgs("NatCon")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"real-con") ; fail)> (arg3, SortNoArgs("OptExp"))))
        ; ![SortNoArgs("RealCon")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "real-con")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-natural(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"natural") ; fail)> (arg1, SortNoArgs("NatCon")))
        ; ![SortNoArgs("IntCon")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "natural")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-positive(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"positive") ; fail)> (arg1, SortNoArgs("NatCon")))
        ; ![SortNoArgs("IntCon")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "positive")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-negative(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"negative") ; fail)> (arg1, SortNoArgs("NatCon")))
        ; ![SortNoArgs("IntCon")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "negative")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-int(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"int") ; fail)> (arg1, SortNoArgs("IntCon")))
        ; ![SortNoArgs("ATerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "int")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-real(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"real") ; fail)> (arg1, SortNoArgs("RealCon")))
        ; ![SortNoArgs("ATerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "real")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-fun(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"fun") ; fail)> (arg1, SortNoArgs("AFun")))
        ; ![SortNoArgs("ATerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "fun")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-appl(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"appl") ; fail)> (arg1, SortNoArgs("AFun")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"appl") ; fail)> ( arg2
                                                                            , Sort(
                                                                                "List"
                                                                              , [SortNoArgs("ATerm")]
                                                                              )
                                                                            )))
        ; ![SortNoArgs("ATerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "appl")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-placeholder(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"placeholder") ; fail)> (arg1, SortNoArgs("ATerm")))
        ; ![SortNoArgs("ATerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "placeholder")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-annotated(|arg1, arg2) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"annotated") ; fail)> (arg1, SortNoArgs("ATerm")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"annotated") ; fail)> (arg2, SortNoArgs("Annotation"))))
        ; ![SortNoArgs("ATerm")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "annotated")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-term(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"term") ; fail)> (arg1, SortNoArgs("ATermAttribute")))
        ; ![SortNoArgs("Attribute")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "term")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-attrs(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"attrs") ; fail)> ( arg1
                                                                          , Sort(
                                                                              "List"
                                                                            , [SortNoArgs("Attribute")]
                                                                            )
                                                                          ))
        ; ![SortNoArgs("Attributes")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "attrs")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-no-attrs(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Attributes")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "no-attrs")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-prod(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"prod") ; fail)> (arg1, SortNoArgs("Symbols")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"prod") ; fail)> (arg2, SortNoArgs("Symbol")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"prod") ; fail)> (arg3, SortNoArgs("Attributes"))))
        ; ![SortNoArgs("Production")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "prod")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-start(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "start")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-file-start(|) =
    ![]
    ; try(
        id ; ![SortNoArgs("Symbol")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "file-start")> []
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-definition(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"definition") ; fail)> (arg1, SortNoArgs("Definition")))
        ; ![SortNoArgs("SDF")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "definition")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-PlainDec(|arg1, arg2) =
    ![]
    ; (try(
         (where(<(has-sort <+ log-mismatching-sort-error(|"PlainDec") ; fail)> (arg1, SortNoArgs("PlainDecHead")))
          ; where(<(has-sort <+ log-mismatching-sort-error(|"PlainDec") ; fail)> (arg2, SortNoArgs("PlainBody"))))
         ; ![SortNoArgs("ToplevelDeclaration")|<id>]
       )
       ; try(
           (where(<(has-sort <+ log-mismatching-sort-error(|"PlainDec") ; fail)> (arg1, SortNoArgs("JavaID")))
            ; where(<(has-sort <+ log-mismatching-sort-error(|"PlainDec") ; fail)> (arg2, SortNoArgs("JavaID"))))
           ; ![SortNoArgs("ToplevelDeclaration")|<id>]
         ))
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "PlainDec")> [arg1, arg2]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-PlainDecHead(|arg1, arg2, arg3) =
    ![]
    ; try(
        (where(<(has-sort <+ log-mismatching-sort-error(|"PlainDecHead") ; fail)> ( arg1
                                                                                  , Sort(
                                                                                      "List"
                                                                                    , [SortNoArgs("AnnoOrSugarMod")]
                                                                                    )
                                                                                  ))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"PlainDecHead") ; fail)> (arg2, SortNoArgs("JavaId")))
         ; where(<(has-sort <+ log-mismatching-sort-error(|"PlainDecHead") ; fail)> ( arg3
                                                                                    , Sort(
                                                                                        "Option"
                                                                                      , [SortNoArgs("PlainExtension")]
                                                                                      )
                                                                                    )))
        ; ![SortNoArgs("PlainDecHead")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "PlainDecHead")> [arg1, arg2, arg3]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  smart-PlainBody(|arg1) =
    ![]
    ; try(
        where(<(has-sort <+ log-mismatching-sort-error(|"PlainBody") ; fail)> (arg1, SortNoArgs("PlainContent")))
        ; ![SortNoArgs("PlainBody")|<id>]
      )
    ; ?res-sorts
    ; <prim("SUGARJ_unsafe_build", "PlainBody")> [arg1]
    ; put-syntax-sort(|<build-alt-sort-or-fail> res-sorts)

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("ModelTransformation")]
      )
    , SortNoArgs("TransformationDef")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("StrategoDef")]
      )
    , SortNoArgs("DirectTransformation")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("ModuleName")
    , SortNoArgs("TransformationExpr")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("TransformationAppExpr")
    , SortNoArgs("TransformationExpr")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("StrategoDecl")
    , SortNoArgs("Transformation")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("StrategoStrategy")
    , SortNoArgs("Analysis")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("ReservedName")
    , SortNoArgs("StrategoCall")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("String")
    , SortNoArgs("CompletionPart")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Node")
    , SortNoArgs("ColorNode")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Color")
    , SortNoArgs("MaybeColor")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("NoColor")
    , SortNoArgs("MaybeColor")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Id")
    , SortNoArgs("AttributeId")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("String")
    , SortNoArgs("AttributeId")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Font")
    , SortNoArgs("AttributeId")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Node")
    , SortNoArgs("SemanticNode")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("String")
    , SortNoArgs("PropertyValue")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Sort")
    , SortNoArgs("Node")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Constructor")
    , SortNoArgs("Node")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("ReservedName")
    , SortNoArgs("Node")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("ReservedName")
    , SortNoArgs("ModuleName")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("DynRuleScopeId")]
      )
    , SortNoArgs("ScopeLabels")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("Id")]
      )
    , SortNoArgs("RuleNames")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Strategy")
    , SortNoArgs("StrategyAngle")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Term")
    , SortNoArgs("Strategy")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Term")
    , SortNoArgs("Strategy")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Strategy")
    , SortNoArgs("StrategyMid")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("LID")
    , SortNoArgs("ID")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Type")
    , SortNoArgs("ArgType")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("ConstType")
    , SortNoArgs("ArgType")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Type")
    , SortNoArgs("RetType")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("FunType")
    , SortNoArgs("RetType")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("FunType")
    , SortNoArgs("Type")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("ConstType")
    , SortNoArgs("Type")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Id")
    , SortNoArgs("ID")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Var")
    , SortNoArgs("PreTerm")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Var")
    , SortNoArgs("Term")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Wld")
    , SortNoArgs("PreTerm")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Wld")
    , SortNoArgs("Term")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("StrategyDef")
    , SortNoArgs("Def")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Strategy")
    , SortNoArgs("StrategyMid")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("RuleDef")
    , SortNoArgs("Def")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("Alias")]
      )
    , SortNoArgs("Aliases")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("Restriction")]
      )
    , SortNoArgs("Restrictions")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Character")
    , SortNoArgs("CharRange")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("CharRange")
    , SortNoArgs("CharRanges")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("Priority")]
      )
    , SortNoArgs("Priorities")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("Module")]
      )
    , SortNoArgs("Definition")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("Section")]
      )
    , SortNoArgs("Sections")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("Import")]
      )
    , SortNoArgs("Imports")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("Symbol")]
      )
    , SortNoArgs("Symbols")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | Sort(
        "List"
      , [SortNoArgs("Production")]
      )
    , SortNoArgs("Productions")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Associativity")
    , SortNoArgs("Label")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("Associativity")
    , SortNoArgs("ATermAttribute")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("ModuleName")
    , SortNoArgs("ATermAttribute")
    )

  has-subsort-of-trans(|) =
    has-subsort-of-inject(
    | SortNoArgs("JavaID")
    , SortNoArgs("PlainExtension")
    )


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceImport")) ; ?renamed)
  ; SortNoArgs("Import")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceImports")) ; ?renamed)
  ; SortNoArgs("Imports")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceModule")) ; ?renamed)
  ; SortNoArgs("Module")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceFileName")) ; ?renamed)
  ; SortNoArgs("FileName")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceBuilderOption")) ; ?renamed)
  ; SortNoArgs("BuilderOption")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceCompletionAnno")) ; ?renamed)
  ; SortNoArgs("CompletionAnno")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceCompletionPart")) ; ?renamed)
  ; SortNoArgs("CompletionPart")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServicePlaceholderChar")) ; ?renamed)
  ; SortNoArgs("PlaceholderChar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServicePlaceholder")) ; ?renamed)
  ; SortNoArgs("Placeholder")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceAttributeId")) ; ?renamed)
  ; SortNoArgs("AttributeId")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceMaybeColor")) ; ?renamed)
  ; SortNoArgs("MaybeColor")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceNoColor")) ; ?renamed)
  ; SortNoArgs("NoColor")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceColor")) ; ?renamed)
  ; SortNoArgs("Color")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceFont")) ; ?renamed)
  ; SortNoArgs("Font")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceTokenKindName")) ; ?renamed)
  ; SortNoArgs("TokenKindName")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceColorNode")) ; ?renamed)
  ; SortNoArgs("ColorNode")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceAttribute")) ; ?renamed)
  ; SortNoArgs("Attribute")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceColorRule")) ; ?renamed)
  ; SortNoArgs("ColorRule")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceOutlineRule")) ; ?renamed)
  ; SortNoArgs("OutlineRule")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceFoldingAnno")) ; ?renamed)
  ; SortNoArgs("FoldingAnno")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceFoldingRule")) ; ?renamed)
  ; SortNoArgs("FoldingRule")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceIndentDef")) ; ?renamed)
  ; SortNoArgs("IndentDef")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceFenceDef")) ; ?renamed)
  ; SortNoArgs("FenceDef")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceNoContinuation")) ; ?renamed)
  ; SortNoArgs("NoContinuation")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceBlockCommentDef")) ; ?renamed)
  ; SortNoArgs("BlockCommentDef")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceLanguageProperty")) ; ?renamed)
  ; SortNoArgs("LanguageProperty")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServicePropertyValues")) ; ?renamed)
  ; SortNoArgs("PropertyValues")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceURL")) ; ?renamed)
  ; SortNoArgs("URL")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServicePropertyValue")) ; ?renamed)
  ; SortNoArgs("PropertyValue")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceReservedName")) ; ?renamed)
  ; SortNoArgs("ReservedName")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceSection")) ; ?renamed)
  ; SortNoArgs("Section")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceOnSaveAnno")) ; ?renamed)
  ; SortNoArgs("OnSaveAnno")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceStrategoCall")) ; ?renamed)
  ; SortNoArgs("StrategoCall")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceRefactoringRule")) ; ?renamed)
  ; SortNoArgs("RefactoringRule")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceBuilderRule")) ; ?renamed)
  ; SortNoArgs("BuilderRule")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceCompletionRule")) ; ?renamed)
  ; SortNoArgs("CompletionRule")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceReferenceRule")) ; ?renamed)
  ; SortNoArgs("ReferenceRule")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceSemanticNode")) ; ?renamed)
  ; SortNoArgs("SemanticNode")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceStrategoId")) ; ?renamed)
  ; SortNoArgs("StrategoId")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceModuleName")) ; ?renamed)
  ; SortNoArgs("ModuleName")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceNode")) ; ?renamed)
  ; SortNoArgs("Node")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceConstructorId")) ; ?renamed)
  ; SortNoArgs("ConstructorId")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceConstructor")) ; ?renamed)
  ; SortNoArgs("Constructor")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceString")) ; ?renamed)
  ; SortNoArgs("String")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceSort")) ; ?renamed)
  ; SortNoArgs("Sort")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceSectionName")) ; ?renamed)
  ; SortNoArgs("SectionName")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceBACKSLASH")) ; ?renamed)
  ; SortNoArgs("BACKSLASH")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceStringChar")) ; ?renamed)
  ; SortNoArgs("StringChar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceSTRING")) ; ?renamed)
  ; SortNoArgs("STRING")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceInt")) ; ?renamed)
  ; SortNoArgs("Int")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceIdStar")) ; ?renamed)
  ; SortNoArgs("IdStar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("EditorServiceId")) ; ?renamed)
  ; SortNoArgs("Id")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoRuleNames")) ; ?renamed)
  ; SortNoArgs("RuleNames")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoRuleDec")) ; ?renamed)
  ; SortNoArgs("RuleDec")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoDynRuleScopeId")) ; ?renamed)
  ; SortNoArgs("DynRuleScopeId")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoDynRuleId")) ; ?renamed)
  ; SortNoArgs("DynRuleId")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoDynRuleDef")) ; ?renamed)
  ; SortNoArgs("DynRuleDef")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoScopeLabels")) ; ?renamed)
  ; SortNoArgs("ScopeLabels")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoRuleCond")) ; ?renamed)
  ; SortNoArgs("RuleCond")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoRule")) ; ?renamed)
  ; SortNoArgs("Rule")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoRuleDef")) ; ?renamed)
  ; SortNoArgs("RuleDef")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoOverlay")) ; ?renamed)
  ; SortNoArgs("Overlay")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoSwitchCase")) ; ?renamed)
  ; SortNoArgs("SwitchCase")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoStrategyCurly")) ; ?renamed)
  ; SortNoArgs("StrategyCurly")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoStrategyAngle")) ; ?renamed)
  ; SortNoArgs("StrategyAngle")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoKind")) ; ?renamed)
  ; SortNoArgs("Kind")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoLID")) ; ?renamed)
  ; SortNoArgs("LID")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoImportModName")) ; ?renamed)
  ; SortNoArgs("ImportModName")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoDecl")) ; ?renamed)
  ; SortNoArgs("Decl")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoModule")) ; ?renamed)
  ; SortNoArgs("Module")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoStrategyParen")) ; ?renamed)
  ; SortNoArgs("StrategyParen")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoTypedid")) ; ?renamed)
  ; SortNoArgs("Typedid")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoStrategyDef")) ; ?renamed)
  ; SortNoArgs("StrategyDef")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoSVar")) ; ?renamed)
  ; SortNoArgs("SVar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoDef")) ; ?renamed)
  ; SortNoArgs("Def")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoType")) ; ?renamed)
  ; SortNoArgs("Type")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoRetType")) ; ?renamed)
  ; SortNoArgs("RetType")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoArgType")) ; ?renamed)
  ; SortNoArgs("ArgType")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoFunType")) ; ?renamed)
  ; SortNoArgs("FunType")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoConstType")) ; ?renamed)
  ; SortNoArgs("ConstType")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoOpdecl")) ; ?renamed)
  ; SortNoArgs("Opdecl")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoSort")) ; ?renamed)
  ; SortNoArgs("Sort")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoSdecl")) ; ?renamed)
  ; SortNoArgs("Sdecl")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoWld")) ; ?renamed)
  ; SortNoArgs("Wld")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoID")) ; ?renamed)
  ; SortNoArgs("ID")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoVar")) ; ?renamed)
  ; SortNoArgs("Var")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoCharChar")) ; ?renamed)
  ; SortNoArgs("CharChar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoChar")) ; ?renamed)
  ; SortNoArgs("Char")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoStrChar")) ; ?renamed)
  ; SortNoArgs("StrChar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoString")) ; ?renamed)
  ; SortNoArgs("String")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoReal")) ; ?renamed)
  ; SortNoArgs("Real")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoInt")) ; ?renamed)
  ; SortNoArgs("Int")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoKeyword")) ; ?renamed)
  ; SortNoArgs("Keyword")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoUCID")) ; ?renamed)
  ; SortNoArgs("UCID")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoLCID")) ; ?renamed)
  ; SortNoArgs("LCID")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoLId")) ; ?renamed)
  ; SortNoArgs("LId")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoId")) ; ?renamed)
  ; SortNoArgs("Id")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoModNamePart")) ; ?renamed)
  ; SortNoArgs("ModNamePart")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoModName")) ; ?renamed)
  ; SortNoArgs("ModName")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoPreTerm")) ; ?renamed)
  ; SortNoArgs("PreTerm")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoTerm")) ; ?renamed)
  ; SortNoArgs("Term")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoStrategyMid")) ; ?renamed)
  ; SortNoArgs("StrategyMid")


unrename-sort(|) =
  (where(renamed := SortNoArgs("StrategoStrategy")) ; ?renamed)
  ; SortNoArgs("Strategy")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2SDF")) ; ?renamed)
  ; SortNoArgs("SDF")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Aliases")) ; ?renamed)
  ; SortNoArgs("Aliases")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Alias")) ; ?renamed)
  ; SortNoArgs("Alias")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Restrictions")) ; ?renamed)
  ; SortNoArgs("Restrictions")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Restriction")) ; ?renamed)
  ; SortNoArgs("Restriction")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Label")) ; ?renamed)
  ; SortNoArgs("Label")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2FunctionName")) ; ?renamed)
  ; SortNoArgs("FunctionName")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2SingleQuotedStrCon")) ; ?renamed)
  ; SortNoArgs("SingleQuotedStrCon")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2SingleQuotedStrChar")) ; ?renamed)
  ; SortNoArgs("SingleQuotedStrChar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Sort")) ; ?renamed)
  ; SortNoArgs("Sort")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2OptCharRanges")) ; ?renamed)
  ; SortNoArgs("OptCharRanges")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2CharRange")) ; ?renamed)
  ; SortNoArgs("CharRange")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Character")) ; ?renamed)
  ; SortNoArgs("Character")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2ShortChar")) ; ?renamed)
  ; SortNoArgs("ShortChar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2NumChar")) ; ?renamed)
  ; SortNoArgs("NumChar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Priorities")) ; ?renamed)
  ; SortNoArgs("Priorities")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Priority")) ; ?renamed)
  ; SortNoArgs("Priority")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2ArgumentIndicator")) ; ?renamed)
  ; SortNoArgs("ArgumentIndicator")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Associativity")) ; ?renamed)
  ; SortNoArgs("Associativity")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Import")) ; ?renamed)
  ; SortNoArgs("Import")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Imports")) ; ?renamed)
  ; SortNoArgs("Imports")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2ImpSection")) ; ?renamed)
  ; SortNoArgs("ImpSection")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2ModuleName")) ; ?renamed)
  ; SortNoArgs("ModuleName")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Sections")) ; ?renamed)
  ; SortNoArgs("Sections")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Section")) ; ?renamed)
  ; SortNoArgs("Section")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Module")) ; ?renamed)
  ; SortNoArgs("Module")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Definition")) ; ?renamed)
  ; SortNoArgs("Definition")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2ModuleId")) ; ?renamed)
  ; SortNoArgs("ModuleId")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2ModuleWord")) ; ?renamed)
  ; SortNoArgs("ModuleWord")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Renaming")) ; ?renamed)
  ; SortNoArgs("Renaming")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Renamings")) ; ?renamed)
  ; SortNoArgs("Renamings")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Productions")) ; ?renamed)
  ; SortNoArgs("Productions")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Production")) ; ?renamed)
  ; SortNoArgs("Production")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Attributes")) ; ?renamed)
  ; SortNoArgs("Attributes")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Attribute")) ; ?renamed)
  ; SortNoArgs("Attribute")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2ATermAttribute")) ; ?renamed)
  ; SortNoArgs("ATermAttribute")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Symbols")) ; ?renamed)
  ; SortNoArgs("Symbols")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Annotation")) ; ?renamed)
  ; SortNoArgs("Annotation")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2ATerm")) ; ?renamed)
  ; SortNoArgs("ATerm")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2AFun")) ; ?renamed)
  ; SortNoArgs("AFun")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2IdCon")) ; ?renamed)
  ; SortNoArgs("IdCon")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2StrCon")) ; ?renamed)
  ; SortNoArgs("StrCon")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2StrChar")) ; ?renamed)
  ; SortNoArgs("StrChar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2RealCon")) ; ?renamed)
  ; SortNoArgs("RealCon")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2OptExp")) ; ?renamed)
  ; SortNoArgs("OptExp")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2IntCon")) ; ?renamed)
  ; SortNoArgs("IntCon")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2NatCon")) ; ?renamed)
  ; SortNoArgs("NatCon")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Lookahead")) ; ?renamed)
  ; SortNoArgs("Lookahead")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Grammar")) ; ?renamed)
  ; SortNoArgs("Grammar")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Symbol")) ; ?renamed)
  ; SortNoArgs("Symbol")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Group")) ; ?renamed)
  ; SortNoArgs("Group")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2CharRanges")) ; ?renamed)
  ; SortNoArgs("CharRanges")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2CharClass")) ; ?renamed)
  ; SortNoArgs("CharClass")


unrename-sort(|) =
  (where(renamed := SortNoArgs("Sdf2Lookaheads")) ; ?renamed)
  ; SortNoArgs("Lookaheads")
