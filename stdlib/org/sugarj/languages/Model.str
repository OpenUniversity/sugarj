module org/sugarj/languages/Model

imports
  org/sugarj/transformations/typesmart/Runtime
  org/sugarj/languages/Stratego


signature
  constructors
    ToModelTerm       : ATerm -> ModelTerm
    TransformationDef : DirectTransformation * List(ModelTransformation) -> TransformationDef
    Strategies        : List(StrategoDef) -> ModelTransformation
    Signature         : List(StrategoSdecl) -> ModelTransformation
    Rules             : List(StrategoDef) -> ModelTransformation
    Overlays          : List(StrategoOverlay) -> ModelTransformation
    TransApp          : TransformationExpr * TransformationExpr -> TransformationAppExpr


rules

  smart-ToModelTerm(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"ToModelTerm") ; fail)> ( arg1
                                                                            , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ATerm"]
                                                                            ))
    ; <prim("SUGARJ_unsafe_build", "ToModelTerm")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelTerm"]
      )
    ; id


rules

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelTransformation"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationDef"]
    )

  smart-TransformationDef(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TransformationDef") ; fail)> ( arg1
                                                                                  , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DirectTransformation"]
                                                                                  ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"TransformationDef") ; fail)> ( arg2
                                                                                    , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelTransformation"]]
                                                                                                                                    ]]
                                                                                    ))
    ; <prim("SUGARJ_unsafe_build", "TransformationDef")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationDef"]
      )
    ; id

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoDef"]]
                                                    ]]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["DirectTransformation"]
    )

  smart-Strategies(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Strategies") ; fail)> ( arg1
                                                                           , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoDef"]]
                                                                                                                           ]]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "Strategies")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelTransformation"]
      )
    ; id

  smart-Signature(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Signature") ; fail)> ( arg1
                                                                          , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoSdecl"]]
                                                                                                                          ]]
                                                                          ))
    ; <prim("SUGARJ_unsafe_build", "Signature")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelTransformation"]
      )
    ; id

  smart-Rules(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Rules") ; fail)> ( arg1
                                                                      , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoDef"]]
                                                                                                                      ]]
                                                                      ))
    ; <prim("SUGARJ_unsafe_build", "Rules")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelTransformation"]
      )
    ; id

  smart-Overlays(|arg1) =
    where(<(has-sort <+ log-mismatching-sort-error(|"Overlays") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "Sort")> ["List"|[ [<prim("SUGARJ_unsafe_build", "SortNoArgs")> ["StrategoOverlay"]]
                                                                                                                         ]]
                                                                         ))
    ; <prim("SUGARJ_unsafe_build", "Overlays")> [arg1]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModelTransformation"]
      )
    ; id


rules

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["ModuleName"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationExpr"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationExpr"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationExpr"]
    )

  is-subsort-of-trans(|) =
    is-subsort-of-inject(
    | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationAppExpr"]
    , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationExpr"]
    )

  smart-TransApp(|arg1, arg2) =
    where(<(has-sort <+ log-mismatching-sort-error(|"TransApp") ; fail)> ( arg1
                                                                         , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationExpr"]
                                                                         ))
    ; where(<(has-sort <+ log-mismatching-sort-error(|"TransApp") ; fail)> ( arg2
                                                                           , <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationExpr"]
                                                                           ))
    ; <prim("SUGARJ_unsafe_build", "TransApp")> [arg1, arg2]
    ; put-syntax-sort(
      | <prim("SUGARJ_unsafe_build", "SortNoArgs")> ["TransformationAppExpr"]
      )
    ; id
