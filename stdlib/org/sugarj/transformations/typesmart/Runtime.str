module org/sugarj/transformations/typesmart/Runtime

imports org/sugarj/transformations/Analyze
        org/sugarj/languages/Stratego

rules
  put-syntax-sort(|sort) =
    prim("SUGARJ_put_typesmart_sort", sort)
  get-syntax-sort =
    prim("SUGARJ_get_typesmart_sort") 

rules
  has-sort = Swap; debug-analysis(!"has sort? "); fail
  has-sort = ?(xs, Sort("List", [xsort]))
           ; <map(!(<id>, xsort); has-sort)> xs
  has-sort = ?(""#(xs), Sort("Tuple", xsorts))
           ; <equal> (<length> xs, <length> xsorts)
           ; <zip> (xs, xsorts)
           ; map(has-sort)
  has-sort = ?(None(), Sort("Option", _))
  has-sort = ?(Some(x), Sort("Option", [xsort]))
           ; <has-sort> (x, xsort)
  has-sort = ?(x, Sort("Alt", [xsort1, xsort2]))
           ; (<has-sort> (x, xsort1) + <has-sort> (x, xsort2))
  has-sort = ?(x, xsort)
           ; <is-string> x
           ; <is-lexical-sort> xsort
  has-sort = (get-syntax-sort, id); is-subsort-of
  has-sort =
      ?(term, sort)
    ; <infer-sort> term => inferred
    ; <is-subsort-of> (inferred, sort)
  // has-sort = Swap; debug-analysis(!"FAIL has sort: "); fail
  
  is-lexical-sort = fail
  
  // is-subsort-of = debug-analysis(!"is-subsort-of: "); fail
  is-subsort-of = is-subsort-of-refl <+ is-subsort-unrename <+ is-subsort-of-trans
  is-subsort-of-refl = structurally-equal
  is-subsort-unrename = (unrename-sort, try(unrename-sort)); is-subsort-of
  is-subsort-unrename = (id, unrename-sort); is-subsort-of
  is-subsort-of-trans = fail
  unrename-sort = fail
  
  is-subsort-of-inject(|arg-sort,res-sort) =
      ?(sub-sort,sup-sort)
    ; (<sort-equal> (sub-sort,sup-sort)
      <+  <sort-equal> (sub-sort, arg-sort) 
        ; ( <sort-equal> (res-sort, sup-sort)
            <+ <is-subsort-of> (res-sort, sup-sort)))

  sort-equal = structurally-equal
  sort-equal = ?(Sort("List", [EmptyCollection()]), Sort("List", [_]))
  sort-equal = ?(Sort("Option", [EmptyCollection()]), Sort("Option", [_]))

  infer-sort =
      is-list
    ; ?[]
      < <prim("SUGARJ_unsafe_build", "Sort")> ["List", [EmptyCollection()]]
      + ?[x|xs]
      ; <prim("SUGARJ_unsafe_build", "Sort")> ["List", [<get-syntax-sort> x]] => xsort
      ; where(<has-sort> (xs, xsort))
  infer-sort =
      ?None()
      < <prim("SUGARJ_unsafe_build", "Sort")> ["Option", [EmptyCollection()]]
      + ?Some(x)
      ; <prim("SUGARJ_unsafe_build", "Sort")> ["Option", [<get-syntax-sort> x]]

signature constructors
  EmptyCollection : Sdf2Sort

rules
  log-mismatching-sort-error(|cons) =
    (not(get-syntax-sort), id);
    Swap;
    debug-analysis(<conc-strings> ("Argument of constructor ", cons, " lacks sort annotation, expected: "))
  
  log-mismatching-sort-error(|cons) =
    (get-syntax-sort, id);
    ?(was, exp);
    where(<conc-strings> 
            ("Mismatching argument sort for constructor '", cons, "'.",
             " Was ", <write-to-string> was, ",",
             " expected ", <write-to-string> exp) => s);
    <debug-analysis(!s)> "."
