module org/sugarj/transformations/typesmart/Runtime

imports org/sugarj/transformations/Analyze
        org/sugarj/languages/Stratego

rules
  put-syntax-sort(|sort) =
    (where(get-analysis-data-annotation) <+ init-analysis-data-annotation);
    put-anno(|"syntax-sort", sort)
  get-syntax-sort =
    get-anno(|"syntax-sort")
  has-syntax-sort =
    where(get-syntax-sort)

rules
  has-sort = ?(xs, listsort@Sort("List", [xsort]))
           ; <map(has-sort)> (xs, xsort)
  has-sort = ?(""#(xs), listsort@Sort("Tuple", xsorts))
           ; <equal> (<length> xs, <length> xsorts)
           ; <zip> (xs, xsorts)
           ; map(has-sort)
  has-sort = ?(None(), Sort("Option", _))
  has-sort = ?(Some(x), Sort("Option", [xsort]))
           ; <has-sort> (x, xsort)
  has-sort = ?(x, Sort("Alt", [xsort1, xsort2]))
           ; (<has-sort> (x, xsort1) + <has-sort> (x, xsort2))
  has-sort = ?(x, xsort)
           ; <is-string> x
           ; <is-lexical-sort> xsort
  has-sort = (get-syntax-sort, id); is-subsort-of
  
  is-lexical-sort = fail
  
  is-subsort-of = is-subsort-of-refl
  is-subsort-of-refl = structurally-equal
  is-subsort-of-inject(|arg-sort,res-sort) =
      ?(sub-sort,sup-sort)
    ; <structurally-equal> (sub-sort, arg-sort) 
    ; ( <structurally-equal> (sup-sort, res-sort)
     <+ <is-subsort-of> (res-sort, sup-sort)) 

rules
  log-mismatching-sort-error(|cons) =
    (not(get-syntax-sort), id);
    debug(<conc-strings> ("Argument of constructor ", cons, " lacks sort annotation, expected: "))
  
  log-mismatching-sort-error(|cons) =
    (get-syntax-sort, id);
    ?(was, exp);
    where(<conc-strings> 
            ("Mismatching argument sort for constructor '", cons, "'.",
             " Was ", <write-to-string> was, ",",
             " expected ", <write-to-string> exp) => s);
    <debug(!s)> "."
  
