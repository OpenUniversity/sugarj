module org/sugarj/transformations/typesmart/Runtime

imports org/sugarj/transformations/Analyze
        org/sugarj/languages/AllLanguages
        org/sugarj/stdlib/Common

rules
  // redefined in Stratego
  smart-Some(|arg) =
      <get-syntax-sort> arg => xsort
    ; <prim("SUGARJ_unsafe_build", "Some")> [arg] 
    ; put-syntax-sort(|<prim("SUGARJ_unsafe_build", "Sort")> ["Option", [xsort]])

rules
  put-syntax-sort(|sort) =
    prim("SUGARJ_put_typesmart_sort", sort)
  get-syntax-sort =
    prim("SUGARJ_get_typesmart_sort") 

rules
  // has-sort = Swap; debug(!"has sort? "); fail
  has-sort = try-init-subsort-stack; has-subsort-of
  
  is-lexical-sort = fail
  
  // has-subsort-of = (try(get-syntax-sort), id); debug-analysis(!"has-subsort-of: "); fail
  has-subsort-of = 
      push-subsort-stack
    ; finally( has-subsort-of-refl <+ has-subsort-unrename <+ has-subsort-of-trans
             , pop-subsort-stack)
  // has-subsort-of = debug-analysis(!"FAIL has-subsort-of: "); fail
  
  try-init-subsort-stack =
    where(Subsort-Stack <+ rules ( Subsort-Stack := [] ))
  push-subsort-stack =
      where(
        strip-annos => pair
      ; (<not(elem)> (pair, <Subsort-Stack>) <+ debug(!"detected loop: "); fail)
      ; rules( Subsort-Stack := [pair | <Subsort-Stack>] ))
  pop-subsort-stack =
    where(rules( Subsort-Stack := <Subsort-Stack; ?[_|<id>]> ))
  
  has-subsort-of-refl =
      ?(xs, Sort("List", [xsort]))
    ; <map(!(<id>, xsort); has-subsort-of)> xs
  has-subsort-of-refl =
      ?(""#(xs), Sort("Tuple", xsorts))
    ; <equal> (<length> xs, <length> xsorts)
    ; <zip> (xs, xsorts)
    ; map(has-subsort-of)
  has-subsort-of-refl =
      ?(None(), Sort("Option", [_]))
  has-subsort-of-refl =
      ?(Some(x), Sort("Option", [xsort]))
    ; <has-subsort-of> (x, xsort)
  has-subsort-of-refl =
      ?(x, Sort("Alt", [xsort1, xsort2]))
    ; (<has-subsort-of> (x, xsort1) + <has-subsort-of> (x, xsort2))
  has-subsort-of-refl =
      ?(x, xsort)
    ; <is-string> x
    ; <is-lexical-sort> xsort
  has-subsort-of-refl =
      (get-syntax-sort ,id)
    ; sort-match
  
  has-subsort-unrename = (id, unrename-sort); has-subsort-of
  has-subsort-of-trans = fail
  unrename-sort = fail
  
  has-subsort-of-inject(|arg-sort,res-sort) =
  	  ?(term,sup-sort)
      // result to argument
      ; <sort-match> (sup-sort, res-sort)
      ; where(<repeat(unrename-sort)> arg-sort => unrenamed-arg-sort)
      // ; <debug-analysis(!"inject: ")> (unrenamed-arg-sort, res-sort) 
      ; <has-subsort-of> (term, unrenamed-arg-sort)

  sort-match = structurally-equal
  sort-match =
      ?(Sort("List", [xsort]), Sort("List", [xsort2]))
    ; <sort-match> (xsort, xsort2)
  sort-match =
      ?(Sort("Option",[xsort1]), Sort("Option",[xsort2]))
    ; (<sort-match> (xsort1, xsort2))
  sort-match =
      ?(Sort("Tuple",xsorts1), Sort("Tuple",xsorts2))
      ; <equal> (<length> xsorts1, <length> xsorts2)
      ; <zip> (xsorts1, xsorts2)
      ; map(sort-match)
  sort-match =
      ?(Sort("Alt",[sort1, sort2]), sort)
    ; (<sort-match> (sort1, sort) + <sort-match> (sort2, sort))
  sort-match =
      ?(sort, Sort("Alt",[sort1, sort2]))
    ; (<sort-match> (sort, sort1) + <sort-match> (sort, sort2))
  sort-match =
      (repeat1(unrename-sort), id)
    ; sort-match

rules
  build-alt-sort-or-fail = 
  	// debug(!"build: ");
  	not(?[]); nub; foldl1(\ (x,y) -> Sort("Alt", [x,y]) \)

signature constructors
  EmptyCollection : Sdf2Sort

rules
  log-mismatching-sort-error(|cons) =
    (not(get-syntax-sort), id);
    Swap;
    debug(<conc-strings> ("Argument of constructor ", cons, " lacks sort annotation, expected: "))
  
  log-mismatching-sort-error(|cons) =
    (get-syntax-sort, id);
    ?(was, exp);
    where(<conc-strings> 
            ("Mismatching argument sort for constructor '", cons, "'.",
             " Was ", <write-to-string> was, ",",
             " expected ", <write-to-string> exp) => s);
    <debug(!s)> "."
