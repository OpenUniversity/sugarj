package sugar;


import sugar.XmlSyntax;
import org.sugarj.languages.Java;
import concretesyntax.Java;


public sugar Xml {
	/*signature constructors
    	Lit  : s -> lit
		String : l -> s
		Chars : s -> c*/
	context-free syntax
		Document -> JavaExpr {cons("XMLExpr")}
		"$" "{" JavaExpr "}" -> Element {cons("JavaEscape"), prefer}

	desugarings
		desugar-xml : Document -> JavaExpr
	strategies
		arglist = ?p1#(<id>)
		/*
		desugar-xml : d@XMLDocument(_) ->
			Invoke(Method(MethodName(AmbName(Id("String")), Id("format"))),
				[Lit(String([Chars(<xml-to-string> d)]))
				 | <extract-java-escapes> d
				 ])*/
		desugar-xml: XMLExpr(doc) -> 
			|[String.format(~xml-string, ~*java-escapes)]|
			where <xml-to-string> doc => xml-string;
			      <xml-java-escapes> doc => java-escapes
				
		
		xml-java-escapes = collect-all(\JavaEscape(code) -> code\)
		xml-to-string = !Lit(String([Chars(<xml-to-string-lit>)]))
        xml-to-string-lit = pprint <+ arglist; map(xml-to-string-lit); concat-strings <+ !""
		pprint : Element(ElemName(QName(None(), open_name)), attributes, body, ElemName(QName(None(), close_name)))
			->  <concat-strings> ["<", open_name, <xml-to-string-lit> attributes, ">", <xml-to-string-lit> body, "</", close_name, ">"]
		pprint : Attribute(AttrName(QName(None(), aname)), content) -> <concat-strings> [" ", aname, "=", <xml-to-string-lit> content]
		pprint : DoubleQuoted(anything) -> <concat-strings>["\\\"", <xml-to-string-lit> anything, "\\\""]
		pprint : CharDataPart(s) -> s
		pprint : JavaEscape(_) -> "%s"
}