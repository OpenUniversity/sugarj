module Test.Lambda.Eval where

import Test.Lambda.Syntax

lookupEnv _ Nil = Nothing
lookupEnv v (Cons v' val env) =
  if v == v'
    then Just val
    else lookupEnv v env

eval |[ Exp | Var$v ]| env =
  case lookupEnv v env of
    Nothing -> error $ "undefined variable " ++ show v
    Just val -> val
eval |[ (Exp$e1 Exp$e2) ]| env =
  let |[ (lambda $v. Exp$e, $env') ]| = eval e1 env
      val = eval e2 env 
  in eval e |[ $v = $val : $env' ]|
eval |[ lambda $v. Exp$e ]| env =
  |[ (lambda $v. Exp$e, $env) ]| 

var = |[ Exp | v ]|
ident = |[ lambda x. x ]|
zero = |[ lambda s. lambda z. z ]|
succ = |[ lambda n. lambda s. lambda z. (s ((n s) z)) ]|

const x = |[ lambda c. Exp$x ]|
