package variability;
  
import concretesyntax.MetaExplode;

public sugar Java {

  context-free syntax
    JavaVariableType -> ToplevelDeclaration

    VariableClass -> JavaVariableType
    AnnoOrSugarMod* "variable" "class" JavaId JavaClassBody -> VariableClass {cons("VariableClassDec")}
    
    VariableInterface -> JavaVariableType
    VariableInterfaceDecHead "{" JavaInterfaceMemberDec* "}" -> VariableInterface {cons("VariableInterfaceDec")}
    AnnoOrSugarMod* "variable" "interface" JavaId JavaTypeParams? JavaExtendsInterfaces? -> VariableInterfaceDecHead  {cons("VariableInterfaceDecHead")}
    
    

   JavaId -> FeatureName {cons("FeatureName")}
   FeatureName->FeatureExpr
  //conditional elements
   "#" "feature" "(" FeatureExpr ")" JavaMethodDec -> JavaMethodDec {cons("OptionalNode")}
   "#" "feature" "(" FeatureExpr ")" JavaStm -> JavaStm {cons("OptionalNode")}
   "#" "feature" "(" FeatureExpr ")" JavaInterfaceMemberDec -> JavaInterfaceMemberDec {cons("OptionalNode")}
   "#" "feature" "(" FeatureExpr ")" JavaVariableType -> JavaVariableType{cons("OptionalNode")}

  desugarings
    desugar-variable-type
    variable-type-declaration

  rules         
    desugar-variable-type :
      VariableClassDec(mods, name, body) -> 
      ModelDec(ModelDecHead(mods, name), ModelBody(("VariableStructure", ClassDec(ClassDecHead(mods, name, None, None, None), body))))
      
    desugar-variable-type :
      VariableInterfaceDec(VariableInterfaceDecHead(mods,name,params,extendsifc),body) ->
      ModelDec(ModelDecHead(mods, name), ModelBody(("VariableStructure", InterfaceDec(InterfaceDecHead(mods,name,params,extendsifc),body))))

    variable-type-declaration : 
     OptionalNode( exp, ModelDec(head, ModelBody( ("VariableStructure", vartypedec ) )) ) ->
     ModelDec(head, ModelBody( ("VariableStructure", OptionalNode(exp, vartypedec) )) )
}

public editor services Java {
  //TODO coloring
  //TODO configuration-aware folding
  //TODO configuration-specific preview builder or with input dialog
  //TODO outlining
  //TODO reference resolving
  //TODO code completion limited through candidate sorts

  completions
    completion trigger : "#"
    completion template : JavaTypeDec = "#feature(" <e> ")" 
    completion template : JavaMethodDec = "#feature(" <e> ")" 
    completion template : JavaStm = "#feature(" <e> ")" 
    completion template : JavaBlockStm = "#feature(" <e> ")" 

  folding
    _.ConditionalStatement
    _.ConditionalMethod
    _.ConditionalType

//   colorer ConditionalMethodColoring
//     environment _.ConditionalStatement : _ 192 255 255
//     _.ConditionalStatement : _ 192 255 255
//
//     _.ConditionalMethod : _ 192 192 192
}