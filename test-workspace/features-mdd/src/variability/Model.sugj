package variability;

import concretesyntax.Stratego;
import concretesyntax.EditorServices;
import org.sugarj.languages.Java;

public sugar Model {

 context-free syntax
   JavaId -> FeatureName {cons("FeatureName")}
   //feature model
   AnnoOrSugarMod* "featuremodel" JavaId FeatureModelBody -> ToplevelDeclaration{cons("FMDecl")}
   "{" FeatureDeclaration* "}" -> FeatureModelBody {cons("FMBody")}
   "feature" FeatureName FeatureDependencies? ";" -> FeatureDeclaration {cons("FeatureDecl")}
   "implies" FeatureName -> FeatureDependencies

	
 desugarings
   featuremodel

 rules
   featuremodel : 
     FMDecl(mods, Id(n), FMBody(decls))
     -> 
     [SugarDec(SugarDecHead(mods, Id(n)), SugarBody([sugar])),
      EditorServicesDec(EditorServicesDecHead(mods, Id(n)), EditorServicesBody(services))]
     where 
       <featuredecl2sugar(|n)> decls => pre-sugar;
       !transformation-elem(pre-sugar) => sugar;

       <map(featuredecl2service)> decls => services

     featuredecl2sugar(|n) :
       decls
       ->
       |[ rules featuremodel : string~n -> term~names ]|
       where
         <get-decl-names; map(!NoAnnoList(Str(<id>))); !NoAnnoList(List(<id>))> decls => names
    
    featuredecl2service :
     FeatureDecl(FeatureName(Id(n)), _)
     ->
     |[  completions
           completion template : FeatureName = string~n
     ]|
    
    featuremodel = fail

    get-decl-names = map(?FeatureDecl(FeatureName(Id(<id>)), _))
}