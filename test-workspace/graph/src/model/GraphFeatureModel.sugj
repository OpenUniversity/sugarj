package model;

import variability.Model; 

featuremodel GraphFeatureModel  {
  features 
   // GPL
   Benchmark,
   BaseImpl,
   SearchAlg,
   Undirected,
   Weighted,
   // GPL::Algorithms
   Number,
   Connected,
   Transpose,
   Mstprim,
   Mstkruskal,
   Cycle,
   StronglyConnected,
   // GPL::SearchAlg
   SearchBase,
   Dfs,
   Bfs,
   // GPL::BaseImpl
   GenEdges,
   GNOnlyNeighbours,
   GNoEdges
   
   // structural requirements
   requires BaseImpl
   requires BaseImpl -> (GNOnlyNeighbours xor GenEdges xor GNoEdges)
   requires BaseImpl -> Benchmark
   

   requires SearchBase -> SearchAlg
   requires SearchAlg -> (Dfs xor Bfs)

   // additional requirements
   requires Connected -> Undirected
   requires (Dfs || Bfs || Number || Connected) -> SearchBase
   requires StronglyConnected -> (!Undirected && Dfs && Transpose)
   requires Cycle -> Dfs
   requires (Mstprim || Mstkruskal) -> (Undirected && Weighted)
   
}