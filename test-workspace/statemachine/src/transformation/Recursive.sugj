package transformation;

import transformation.Renaming;

public transformation Recursive {
rules
  main =
    ?(model, model-path, trans-path);
    !(model-path, trans-path);
    prim("SUGARJ_rename_main_args") => (old-name, new-name);
    where(!SDefNoArgs(new-name, Call(SVar("recursively-transform"), [Id(), Call(SVar("try"), [CallNoArgs(SVar(old-name))])])) => new-main);
    !model;
    SugarCompilationUnit(
      id,
      ensure-import(|TypeImportDec(TypeName(PackageOrTypeName(Id("transformation")), Id("Recursive")))),
      map(SugarDec(id, SugarBody(!([transformation-elem(Rules([new-main]))], <id>); conc))));
    prim("SUGARJ_compile", model-path, trans-path)

  recursively-transform(model-predicate, trans) = ?(model, model-path, trans-path); 
    {| Renamings, Stack: 
         rules ( Renamings := [] 
                 Stack := [model-path]);
         !model;
         (where(model-predicate) < trans + id) => generated;
         recursively-transform(model-predicate, trans | trans-path);
         compile-renamed(|model-path, trans-path)
    |}

  recursively-transform(model-predicate, trans | trans-path) =
    topdown(try(where(
      {pkgs, name, model-path, model, generated, seen-before:
        get-imported-model(model-predicate) => (pkgs, name, model-path, model);
        where(<elem < !"yes" + !"no"> (model-path,<Stack>) => seen-before);
        <trans> model => generated;
        rules( Renamings := [ (pkgs, name, (<conc-strings> (name, <name-suffix> trans-path)))
                            | <Renamings>] 
               Stack := [ model-path | <Stack> ] );
        tryfinally(
          if where(!seen-before; equal(|"yes"))
            then write-renamed(|model-path, trans-path)
            else recursively-transform(model-predicate, trans | trans-path);
                 compile-renamed(|model-path, trans-path)
          end,
          rules( Stack := <Stack; Tl> ))
      })))
  
  compile-renamed(|model-path, trans-path) =
    apply-renamings(|<Renamings>);
    prim("SUGARJ_compile", model-path, trans-path)

  write-renamed(|model-path, trans-path) =
    apply-renamings(|<Renamings>);
    prim("SUGARJ_write", model-path, trans-path)

  get-imported-model(predicate) =
    ?TypeImportDec(<id>);debug(!"imported-model: ");
    import-model-path => (pkgs, name);
    <build-path> (pkgs, name) => path;
    prim("SUGARJ_resolve_model") => model;
    where(predicate);debug(!"imported-model OK: ");
    !(pkgs, name, path, model)

  ensure-import(|imp) = !(<id>, [imp]); union

  conforms-to-metamodel(|meta-model) =
    where(collect-one(?ModelDecHead(_, _, meta-model)))

  tryfinally(s, final) = s < final + (final; fail)
}

