package statemachine.test;

import statemachine.ToJava;

public transformation TransTest {


rules
  main = 
    {| Renamings: 
         rules ( Renamings := [] );
         recursively-transform(main-statemachine_ToJava)
    |}

  recursively-transform(trans) =
    topdown(try(where(
      {pkgs, name, model-path, model, generated:
        get-imported-model(conforms-to-metamodel(|"Statemachine")) => (pkgs, name, model-path, model);
        rules( Renamings := [ (pkgs, name, (<conc-strings> (name, "$statemachine_test_TransTest")))
                            | <Renamings>]);
        <trans> model => generated;
        where(recursively-transform(trans));
        prim("SUGARJ_compile", model-path, "statemachine/test/TransTest")
      })));
    apply-renamings(|<Renamings>); debug(!"renamed: ")
  
  get-imported-model(predicate) =
    ?TypeImportDec(<id>);
    import-model-path => (pkgs, name);
    <build-path> (pkgs, name) => path;
    prim("SUGARJ_resolve_model") => model;
    where(predicate);
    !(pkgs, name, path, model)

  conforms-to-metamodel(|meta-model) =
    collect-one(?ModelBody((meta-model, _)))

  import-model-path : TypeName(Id(name)) -> ([], name)
  import-model-path : TypeName(pkg, Id(name)) -> (<import-model-pkg> pkg, name)

  import-model-pkg : PackageOrTypeName(Id(name)) -> [name]
  import-model-pkg : PackageOrTypeName(pkg, Id(name)) -> <conc> (<import-model-pkg> pkg, [name])

  build-path : ([], name) -> name
  build-path : ([pkg|pkgs], name) -> <conc-strings> (pkg, "/", <build-path> (pkgs, name))

  apply-renamings(|renamings) =
    where(<?[(pkg, from, to)|rest]> renamings)
      < rename-java(|pkg, from, to); apply-renamings(|rest)
      + id
}