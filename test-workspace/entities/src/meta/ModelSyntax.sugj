package meta;

import org.sugarj.languages.Java;
import org.sugarj.languages.Model;
import org.sugarj.languages.Sdf2;
import org.sugarj.languages.SugarJ;

import meta.Model;
import meta.Syntax;

public transformation ModelSyntax {
  rules
    main = SugarCompilationUnit(id,id,mapconcat(metamodel-to-nothing))
    main = where(?SugarCompilationUnit(_,_,[ModelDec(_, ModelBody(("Syntax", Id(<id>), _)))]) => metamodel);
           register-model-imports;
           SugarCompilationUnit(id,ensure-imports(|metamodel),map(syntaxmodel-to-sugar))
           
     
 
    metamodel-to-nothing :
      ModelDec(_, ModelBody(("Metamodel", _))) -> []
    
    syntaxmodel-to-sugar :
      ModelDec(ModelDecHead(mods, name), ModelBody(("Syntax", Id(metamodel), SyntaxDec(prods)))) ->
      SugarDec(SugarDecHead(mods, name), SugarBody([grammar, transformations, sig]))
    where <resolve-model; extract-model(|metamodel)> metamodel => metamodeldec;
          <?ModelDec(_, ModelBody(("Metamodel", <id>)))> metamodeldec => structures;

          <map(prod-to-sdf(|structures))> prods => sdfprods;
          grammar := grammar-elem(context-free-syntax(sdfprods));
          <gen-signature-from-grammar; !transformation-elem(<id>)> context-free-syntax(sdfprods) => sig;

          <mapconcat(![<prod-to-trans(|structures)>] <+ ![])> prods => rulez;
          transformations := transformation-elem(Rules(rulez)) 

  rules
    prod-to-sdf(|structures) :
      Production(n, rhs) ->
      prod(<map(exp-to-sdf())> rhs, sort(n), attrs(annos))
    where <![<cons-anno>] <+ ![]> (n, structures) => annos

    exp-to-sdf : Nonterminal(n) -> sort(n)
    exp-to-sdf : Terminal(t) -> lit(t)
    exp-to-sdf : Many(e) -> iter-star(<exp-to-sdf> e)
    exp-to-sdf : Many1(e) -> iter(<exp-to-sdf> e)
    exp-to-sdf : Optional(e) -> opt(<exp-to-sdf> e)
    exp-to-sdf : Labeled(l, e) -> <exp-to-sdf> e
    exp-to-sdf : Alt(e1, e2) -> alt(<exp-to-sdf> e1, <exp-to-sdf> e2)
    exp-to-sdf : Group([]) -> empty()
    exp-to-sdf : Group([e|es]) -> seq(<exp-to-sdf> e, <map(exp-to-sdf)> es)

    cons-anno : (n, structures) -> term(default(appl(unquoted("cons"), [fun(quoted(cons-name))])))
      where <fetch-elem(?Structure(n,_,_))> structures;
            <conc-strings> (n,"__") => cons-name


    prod-to-trans(|structures) : 
      Production(n, rhs) ->
      RDefNoArgs("ast-for-metamodel", rule)
    where
      <fetch-elem(?Structure(n,_,_))> structures => struct;
      <?Structure(_,_,<id>)> struct => attributes;
      <map(?Attribute(<id>,_); !Var(<id>))> attributes => vars;
      <length> attributes => len;
      <attr-extractors(|n, len, rhs, [])> attributes => conds;
      <strat-seq> conds => cond;

      rule := Rule(Var("e__"), NoAnnoList(Op(n,vars)), cond) 

    strat-seq = !(<id>, Id()); foldl(\(a,b) -> Seq(a,b)\)

    attr-extractors(|n, anum, rhs, used) :
      [] -> []
    attr-extractors(|n, anum, rhs, used) : 
      [Attribute(a,type) | as] -> 
      [strat | <attr-extractors(|n, anum, rhs, [index|used])> as]
    where
      <not(oncetd(?Labeled(a,_)))> rhs;
      <conc-strings> (n,"__") => auxcons;
      <next-unused-index> (0,used) => index;
      <pattern-for-index> (index,anum) => pattern;
      <attribute-type-coercion> type => type-coercion;
      strat := AM(BA(Seq(Match(NoAnnoList(Op(auxcons, pattern))), type-coercion), Var("e__")), Var(a))
//    attr-extractors(|n, anum, rhs, used) : 
//      [Attribute(a,type) | as] -> 
//      <attr-extractors(|n, anum, rhs, used)> as
    
    next-unused-index = 
      if elem
        then (inc,id); next-unused-index
        else ?(<id>,_)
      end

    pattern-for-index : (_,0) -> []
    pattern-for-index : (0,n) -> [RootApp(Id()) | <pattern-for-index> (-1,<dec> n)]
    pattern-for-index : (m,n) -> [Wld() | <pattern-for-index> (<dec> m,<dec> n)]

    attribute-type-coercion : AttrReferenceType(_) -> Id()
    attribute-type-coercion : 
      AttrCompoundType(tyop, types) -> 
      Call(SVar(tyop-strat), <map(attribute-type-coercion)> types)
    where <(?"List"+?"Set");!"type-coerce-list" + ?"Option";!"type-coerce-option"> tyop => tyop-strat
    attribute-type-coercion : 
      // TODO no support for non-pair tuples
      AttrTupleType([ty1,ty2]) -> 
      Call(SVar("type-coerce-pair"), [<attribute-type-coercion> ty1, <attribute-type-coercion> ty2])

  rules
    register-model-imports =
      ?t;
      ?SugarCompilationUnit(_, <id>,_);
      map(try(register-model-import));
      !t

    register-model-import =
      ?TypeImportDec(name);
      path := <import-model-path> name;
      register-model-import(|path)

    register-model-import =
      ?TransImportDec(name, trans, _);
      path := <import-model-path-trans> (<import-model-path> name, trans);
      register-model-import(|path)

    register-model-import(|path) =
      unqualifiedname := <unqualified-name-from-path> path;
      prim("SUGARJ_resolve_model", path) => model;
      rules(resolve-model :+ unqualifiedname -> model)

    unqualified-name-from-path = 
      string-as-chars(reverse; take-until(?'/'); reverse)

    import-model-path : TypeName(Id(name)) -> name
    import-model-path : TypeName(pkg, Id(name)) -> <conc-strings> (<import-model-pkg> pkg, "/", name)

    import-model-pkg : PackageOrTypeName(Id(name)) -> name
    import-model-pkg : PackageOrTypeName(pkg, Id(name)) -> <conc-strings> (<import-model-pkg> pkg, "/", name)

    import-model-path-trans : (name, []) -> name
    import-model-path-trans = !"resolution of transformation-generated models not yet implemented"; error; fail

  rules
    extract-model(|name) =
      ?SugarCompilationUnit(_,_,<id>);
  	  fetch-elem(?ModelDec(ModelDecHead(_, Id(name)), _))

  rules
    ensure-imports(|metamodel) = debug; ensure-aux-import; debug; ensure-metamodel-import(|metamodel); debug

    ensure-aux-import : imps -> <union> (imps, [auximp])
      where auximp := TypeImportDec(TypeName(PackageOrTypeName(Id("meta")), Id("ModelSyntaxAux")))

    ensure-metamodel-import(|metamodel) : imps -> <union> (imps, [metamodelimp])
      where <fetch-elem(?TypeImportDec(TypeName(_, Id(metamodel))) <+ ?TypeImportDec(TypeName(Id(metamodel))))> imps => origimp;
            <?TypeImportDec(<id>)> origimp => metamodel-typename;
            metamodelimp := TransImportDec(metamodel-typename, [TypeName(PackageOrTypeName(Id("meta")), Id("Signatures"))], None())
}